{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/darkmode.styl","path":"css/darkmode.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/lightmode.styl","path":"css/lightmode.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.webp","path":"images/logo.webp","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"source/images/1617782228929766s.png","path":"images/1617782228929766s.png","modified":0,"renderable":0},{"_id":"source/images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg","path":"images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg","modified":0,"renderable":0},{"_id":"source/images/b9be3cae2d0a1c308d21909145aebf70.jpeg","path":"images/b9be3cae2d0a1c308d21909145aebf70.jpeg","modified":0,"renderable":0},{"_id":"source/images/nps1.jpg","path":"images/nps1.jpg","modified":0,"renderable":0},{"_id":"source/images/nps2.jpg","path":"images/nps2.jpg","modified":0,"renderable":0},{"_id":"source/images/nps3.jpg","path":"images/nps3.jpg","modified":0,"renderable":0},{"_id":"source/images/qrcode.jpeg","path":"images/qrcode.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"4ade9ba4f3a910bb049e3b5239b44ab88336912c","modified":1648216842055},{"_id":"source/_posts/hello-world.md","hash":"6a3f0d400b47d0f8ddf108e4580d57afa3059737","modified":1648217240905},{"_id":"source/.DS_Store","hash":"74d660f5c556be6d5a527398baeae7b6373d21fa","modified":1653304501506},{"_id":"source/tags/index.md","hash":"489a632f9690efba860445aee3cb8bbb80e86038","modified":1648216857334},{"_id":"source/about/index.md","hash":"a5ae90304110ccee5e0fa661666ee3bca5a6a07e","modified":1652363292003},{"_id":"themes/next/source/css/lightmode.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648227253728},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1648185750703},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1648185750704},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1648185750704},{"_id":"themes/next/.gitignore","hash":"cdff561cee5ebd8962c19134d3e68c28c7d2e1fa","modified":1648223314720},{"_id":"themes/next/.gitmodules","hash":"5d8e0d1eb36554e53d6e3fa9da9a9bf366820594","modified":1648223349174},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1648185750709},{"_id":"themes/next/README.md","hash":"c8fab0d6caf50be68662a4f9b86b87bde3ae354b","modified":1648185750710},{"_id":"themes/next/_vendors.yml","hash":"519510ce94c6e09ffee76f0ef515b1c9501aaaaf","modified":1648224096267},{"_id":"themes/next/package.json","hash":"196c358209e374cc6abfb76030b394a3f05ef7df","modified":1648185750743},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1648185750710},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1648185750743},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1648185750704},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1648185750704},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1648185750705},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1648185750705},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1648185750707},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1648185750707},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1648185750707},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1648185750707},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1648185750708},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1648185750707},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1648185750711},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1648185750711},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1648185750711},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1648185750713},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1648185750713},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1648185750713},{"_id":"themes/next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1648185750713},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1648185750713},{"_id":"themes/next/.DS_Store","hash":"c751546e22da87172c1cdbaa1fdc5dbea0fdb638","modified":1650743717977},{"_id":"themes/next/_config.yml","hash":"8a257bf51f464f17555225ccc4b8a56619461767","modified":1650335163719},{"_id":"themes/next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1648185750713},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1648185750714},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1648185750714},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1648185750714},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1648185750714},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1648185750715},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1648185750715},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1648185750715},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1648185750715},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1648185750716},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1648185750716},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1648185750716},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1648185750717},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1648185750717},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1648185750717},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1648185750718},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1648185750718},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1648185750719},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1648185750719},{"_id":"themes/next/layout/_layout.njk","hash":"d588f7b11d46fd41ec7c460554d316773ee3d556","modified":1653304663089},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1648185750741},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1648185750741},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1648185750742},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1648185750741},{"_id":"themes/next/languages/zh-CN.yml","hash":"642c70d01ef741a468c0a536cd90a40ff11fe4f4","modified":1648219827974},{"_id":"themes/next/layout/.DS_Store","hash":"fddcfc31de9ec7a3723e0979f5ba78f66524dee7","modified":1648221462962},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1648185750742},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1648185750742},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1648185750793},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1648185750706},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1648185750706},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1648185750706},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1648185750706},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1648185750708},{"_id":"themes/next/source/.DS_Store","hash":"ec49606d6b60c1f04ac1d5e2b174ab01202b2ba4","modified":1650354424542},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1648185750708},{"_id":"themes/next/.github/workflows/linter.yml","hash":"97bca6c7da379dc1136399230820a0687d321cec","modified":1648185750708},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1648185750709},{"_id":"themes/next/.github/workflows/tester.yml","hash":"86e092157a90b6fce6933af69568664fca300798","modified":1648185750709},{"_id":"themes/next/docs/ru/README.md","hash":"7d39204791687179576e22891a1a31766a089171","modified":1648185750711},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1648185750708},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1648185750712},{"_id":"themes/next/docs/zh-CN/README.md","hash":"3d09c345d2e2ae2ab0fca10ff39b3b543b152c09","modified":1648185750712},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1648185750720},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1648185750721},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1648185750721},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1648218649334},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1648185750724},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1648185750712},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1648185750730},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"ba001f0632a0cc02bb91ad89b5eca8eec4f28324","modified":1648221462965},{"_id":"themes/next/layout/_macro/post.njk","hash":"d88b7851ae781febcd043796dbd8e1011b4c2fee","modified":1652415589612},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"172d7cfc3ba60676017d6213dc2dea30f4994a89","modified":1648230983546},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1648185750736},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1648185750737},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1648185750736},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1648185750737},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1648185750738},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1648185750748},{"_id":"themes/next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1648185750743},{"_id":"themes/next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1648185750749},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1648185750748},{"_id":"themes/next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1648185750749},{"_id":"themes/next/scripts/helpers/engine.js","hash":"72d4464cf01f8f34e524f26a1e9b1d063504e92d","modified":1648185750749},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1648185750749},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1648185750750},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1648185750751},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5de208a7ce28db47d133be00d7dcf5275d4505ff","modified":1648225568922},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1648185750751},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1648185750751},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1648185750751},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1648185750752},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1648185750752},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1648185750752},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1648185750752},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1648185750753},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1648185750753},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1648185750753},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1648185750753},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1648185750754},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1648185750754},{"_id":"themes/next/source/css/_colors.styl","hash":"f15b44d30521b5863b5bc3f01a0cbaf4033e7387","modified":1648228499336},{"_id":"themes/next/source/css/_mixins.styl","hash":"67496ecd37ffdbb49aa7d664ac021d59e72ba8e7","modified":1650353183565},{"_id":"themes/next/source/css/darkmode.styl","hash":"0669ce3014289533ae38ae0d264c1e4173f13c04","modified":1648257928216},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1648227078363},{"_id":"themes/next/source/css/.DS_Store","hash":"d3694404f489bd81e7af0ccaa94c14c4e7d6932c","modified":1648223366779},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1648185750781},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648221649585},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1648185750781},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1648185750781},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1648185750781},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1648185750782},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1648185750782},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1648185750782},{"_id":"themes/next/source/images/logo.svg","hash":"f280334038d4e8aa2212cc15a1bb9720120822d2","modified":1650334703595},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1648185750783},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1648185750783},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1648185750783},{"_id":"themes/next/source/images/logo.webp","hash":"b4d7e069ccf4896a09480b68e7000f8658633069","modified":1648221610312},{"_id":"themes/next/source/js/.DS_Store","hash":"bc5e1d0c71924df8f6ff913444d68a30863f47c9","modified":1648223366786},{"_id":"themes/next/source/js/next-boot.js","hash":"52dc9e11b167efd6be68b076a01dd6a3eb0eb644","modified":1650352052764},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1648185750783},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1648185750784},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1648185750784},{"_id":"themes/next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1648185750792},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1648185750792},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1648185750792},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1648185750793},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1648185750793},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1648185750794},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1648185750793},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1648185750794},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1648185750794},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1648185750794},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1648185750795},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1648185750795},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1648185750795},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1648185750795},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1648185750795},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1648185750795},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1648185750722},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1648185750796},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1648185750723},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1648221789351},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1648185750724},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1648185750724},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1648185750724},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1648185750725},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1648185750725},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"8e25c179d54e1c4811706873c1af9ef077f262d5","modified":1650353171185},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"9eeb0a5b959e4322c5fcc24556bf9230927d9e00","modified":1652401029534},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1648185750725},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1648185750726},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1648185750726},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1648185750727},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1648185750727},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1648185750727},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1648185750728},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1648185750729},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1648185750728},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1648185750729},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1648185750726},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1648185750731},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1648185750728},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1648185750731},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"b2ad8efb4cadda3d90569e7e69a6cfb73a075c7c","modified":1648225334950},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1648185750731},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1648185750732},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"fc0266a02b98590e899e62ac24c9dd4e6c6c1976","modified":1648258122722},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1648185750733},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1648185750732},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1648185750734},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1648185750733},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1648185750733},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1648185750734},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1648185750734},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1648185750735},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1648185750735},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1648185750735},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1648185750735},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1648185750736},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1648185750737},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1648185750736},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1648185750737},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1648185750738},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1648185750738},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1648185750739},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1648185750739},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1648185750740},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1648185750740},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1648185750740},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1648185750744},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1648185750741},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1648185750744},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1648185750744},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1648185750744},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":1648185750745},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1648185750745},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1648185750746},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1648185750746},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1648185750746},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1648185750747},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1648185750747},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1648185750747},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1648185750747},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1648185750748},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1648185750748},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1648185750779},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1648185750779},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1648185750780},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1648185750780},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1648185750780},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1648185750784},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1648185750788},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1648185750789},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1648185750789},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1648185750790},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1648185750756},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1648185750756},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1648185750760},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1648185750765},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1648185750764},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1648185750769},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1648185750768},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1648185750769},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1648185750770},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1648185750771},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1648185750770},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1648185750771},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1648185750774},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1648185750775},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"2aa359bf080f4c52a40ad2c44cc16b93fc0a434e","modified":1652415407722},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1648185750775},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1648185750776},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1648185750775},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1648185750709},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1648185750776},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1648185750777},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1648185750777},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1648185750777},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1648185750777},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1648185750778},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1648185750778},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d6419827e799c28459cc42f26658f4620b8eb77e","modified":1650333686295},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1648185750779},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1648185750779},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"c0694dcbd756533c17e6ab4729874b4f764c6749","modified":1650354424414},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1648185750785},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1648185750785},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1648185750785},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1648185750786},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1648185750785},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1648185750786},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1648185750786},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1648185750787},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1648185750787},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1648185750788},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1648185750787},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1648185750788},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1648185750788},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1648185750789},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1648185750789},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1648185750790},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"a8737ff19eeba48654b835129c9cebdf90f758c8","modified":1648185750790},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1648185750790},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1648185750791},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1648185750776},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1648185750791},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1648185750791},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1648185750756},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1648185750756},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1648185750757},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1648185750757},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1648185750758},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1648185750758},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1648185750758},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1648185750759},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1648185750759},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"e27885f5454f3b9e949143b6e15edb5005333b46","modified":1653198538284},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1648185750759},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1648185750760},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1648185750760},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1648185750760},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1648185750761},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1648185750761},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1648185750761},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1648185750761},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1648185750761},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1648185750762},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1648185750762},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1648185750762},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1648185750763},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1648185750763},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1648185750763},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"82f4deba865c7fce1cd82a0ea39b05f143bd0fb1","modified":1650354018919},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d74114e18cd42e1675eed7822fb4e7c251b95e3a","modified":1650333941676},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"accaa214ea94ff36cb6792ebe32ee396d9bde98d","modified":1652415402120},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bce930e5f0565ec6cd6b7b837821846e6d480460","modified":1650353994796},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1648185750765},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1648185750765},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1648185750765},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1648185750766},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1648185750766},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1648185750767},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1648185750766},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1648185750767},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1648185750767},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1648185750768},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1648185750769},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1648185750770},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1648185750771},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1648185750772},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1648185750772},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1648185750772},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1648185750773},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1648185750773},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1648185750773},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1648185750773},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1648185750774},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1648185750757},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1648185750776},{"_id":"public/search.xml","hash":"c343b4d8fbf57fa1e78d41fe61738562dd7deb28","modified":1653305271616},{"_id":"public/categories/index.html","hash":"615ebfb8cec32a113cf74f983b248331c6f62ce6","modified":1653305271616},{"_id":"public/about/index.html","hash":"149bd0b58ba84c01c6176e5ffc7d182efe25f43d","modified":1653305271616},{"_id":"public/tags/index.html","hash":"148fe9ab4a38d9894a645e51c22ac256138f67bd","modified":1653305271616},{"_id":"public/categories/记录/index.html","hash":"3cdc5070b8ddd8488f5784a3e2d9b9e381576a19","modified":1653305271616},{"_id":"public/archives/index.html","hash":"4d323dd238fbc5075aadbd3139cc248802facc7d","modified":1653305271616},{"_id":"public/index.html","hash":"5fd0e02e90076ee74337395a9d0d8bdaf9bd8247","modified":1653305271616},{"_id":"public/archives/2022/index.html","hash":"92c166fc4147f8361ebf7ed94e47c8691e80d560","modified":1653305271616},{"_id":"public/archives/2022/03/index.html","hash":"ff75f739684b3d02381bf2f46a50c850036eef1c","modified":1650293009186},{"_id":"public/tags/hello/index.html","hash":"961fbfe8c5ec49db9b22cdfdea8cbfb37a01f389","modified":1653305271616},{"_id":"public/tags/hi/index.html","hash":"1facdde494b58e3a1536a6df22443f03093dca8e","modified":1653305271616},{"_id":"public/hello.html","hash":"b1e3fe3c7d788819fdbdd12faca965430bedccd0","modified":1650293009186},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1653305271616},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1650293009186},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1650293009186},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1650293009186},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1653305271616},{"_id":"public/images/logo.svg","hash":"f280334038d4e8aa2212cc15a1bb9720120822d2","modified":1653305271616},{"_id":"public/images/logo.webp","hash":"b4d7e069ccf4896a09480b68e7000f8658633069","modified":1653305271616},{"_id":"public/css/lightmode.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653305271616},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1653305271616},{"_id":"public/css/darkmode.css","hash":"d994b718a323ca0d5fb68ad5ac616a421d89c554","modified":1653305271616},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1653305271616},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1653305271616},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1653305271616},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1653305271616},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1653305271616},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1653305271616},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1653305271616},{"_id":"public/js/next-boot.js","hash":"52dc9e11b167efd6be68b076a01dd6a3eb0eb644","modified":1653305271616},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1653305271616},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1653305271616},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1653305271616},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1653305271616},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1653305271616},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1653305271616},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1653305271616},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1653305271616},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1653305271616},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1653305271616},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1653305271616},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1653305271616},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1653305271616},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1653305271616},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1653305271616},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1653305271616},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1653305271616},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1653305271616},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1653305271616},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1653305271616},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1653305271616},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1653305271616},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1653305271616},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1653305271616},{"_id":"public/js/third-party/search/algolia-search.js","hash":"a8737ff19eeba48654b835129c9cebdf90f758c8","modified":1653305271616},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1653305271616},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1653305271616},{"_id":"public/css/main.css","hash":"09034813e2b458ce292755b63a4ccd06fb650541","modified":1653305271616},{"_id":"source/_posts/Atom和SSH客户端连接不上服务器的解决方法.md","hash":"f0015e4b181d2e992111111bfcd9d9d0aecbce13","modified":1652375263650},{"_id":"source/_posts/Linux下echo+tee实现同时追加或者覆盖多个文本文件.md","hash":"20f6c6add2588e4e8a8c7a659accf732d8702f10","modified":1652375287530},{"_id":"source/_posts/New Blog, New Start.md","hash":"62c9adffa2ccaa10bbd1f982d67974ad9da01e66","modified":1652375298151},{"_id":"source/_posts/Linux上用supervisor守护进程.md","hash":"c0e85b7203d7393a87d23ce688f877d8ab0fa0e7","modified":1652375281897},{"_id":"source/_posts/Firewalld的最常见用法.md","hash":"2758b8f461529fe10c0063b7ef78bdae5471f5dd","modified":1653198318560},{"_id":"source/_posts/nginx+lua编译那点事情.md","hash":"36c1450a52d5410d9275e5615a4e48f88c46d408","modified":1652375302952},{"_id":"source/_posts/iOS设备webview弹窗里iframe的可滚动方式.md","hash":"d161e0b9ee72961cd8cc0bd83570bcd4e4e5e7f2","modified":1652375275021},{"_id":"source/_posts/mysql存储emoji表情的麻烦事.md","hash":"aad73e0d0fbf0e338a9d461c0c58f5e7a5b81d70","modified":1652375293618},{"_id":"source/_posts/为Google Chrome安装本地插件.md","hash":"a8a11e7998263b34c63451be3922a1a0b5219223","modified":1652375194355},{"_id":"source/_posts/也来说一说ipset拓展iptables.md","hash":"537cee20b90ddcf1ff66faf7ebf0cf26f926e0fb","modified":1652375222795},{"_id":"source/_posts/也来说说ssh免密码登录Linux.md","hash":"5de4898d80ebc6c5db997f9dda7322675512e2dc","modified":1652375213924},{"_id":"source/_posts/利用inotify+rsync实时同步数据到远程服务器之二.md","hash":"8543e081acc980fab9065220725f9a36b1dcbba7","modified":1652375147586},{"_id":"source/_posts/利用inotify+rsync实时同步数据到远程服务器.md","hash":"f4c243460faa1025819fcaf1afbc482e4cda2813","modified":1652375141269},{"_id":"source/_posts/启用Google Authenticator两步验证登录Linux SSH.md","hash":"cf44d95a2ec603bed21279997f06922c42fcd72e","modified":1652375153269},{"_id":"source/_posts/在centos7上安装OpenCC以及PHP C扩展opencc4php.md","hash":"f5af48a74917d4a8f6b3861c7460ae4926eb58d3","modified":1652375235065},{"_id":"source/_posts/在Centos7上面安装ffmpeg及其开发包ffmpeg-devel.md","hash":"516339d382209cf0a8f72b317a4b7f0f904a963e","modified":1652375243196},{"_id":"source/_posts/在centos7上安装iptables作为防火墙.md","hash":"9020ed6d516f2e31a39cfd95d8d2179154c6d92a","modified":1652375229612},{"_id":"source/_posts/在centos7上面安装Kafka.md","hash":"ecbfa1f5540b7cc660f109428d5922b06f25b33c","modified":1652375248941},{"_id":"source/_posts/在linux上安装rabbitmq.md","hash":"8b26c95b27c5b7ae06040f1a8f0d9f4725f7989c","modified":1652375253763},{"_id":"source/_posts/好用轻量的内网穿透软件NPS.md","hash":"c9db77ab5aa6bdfa8d77d2a014ff5e63e50c3f05","modified":1653198911471},{"_id":"source/_posts/定时开关OpenWRT的LED.md","hash":"6003c284cb21fa95140e9d4465622e7fedd61744","modified":1652492458752},{"_id":"source/_posts/快速清理Docker中的容器和镜像.md","hash":"e3125f3d9ab3eba4da926a07eef9501f0b6d91cc","modified":1652375136443},{"_id":"source/_posts/小型mysql数据库的备份偏方.md","hash":"448be302a5b3c38c6d6ae5a243b1140061aa981c","modified":1652375208791},{"_id":"source/_posts/收到了英文勒索邮件.md","hash":"39a74cdbcadf2a8e582e4ad03af60ce3b35146e2","modified":1653198255595},{"_id":"source/_posts/无聊，顺便说一说Safari的书签删除问题.md","hash":"0381cac157cdd7effe4a70da29f0f9415b1e15fc","modified":1652375201915},{"_id":"source/_posts/给ESXI创建和卸载USB分区.md","hash":"0c59270c9c66dce95c4fe734a8469c5f92c7fc6e","modified":1652375122123},{"_id":"source/_posts/自定义OpenWRT的启动脚本.md","hash":"fe4a4abf3f0b1e7d94b5474c8af5f0dd2528dd92","modified":1652375258532},{"_id":"source/_posts/解除denyhosts黑名单里面的IP.md","hash":"a3dd95787fa44f1548f73afc7092474f85d48484","modified":1652375131169},{"_id":"source/_posts/说一说Leanote的使用体验.md","hash":"8ffa7b80e90c1a49125141be355d73c7965427ae","modified":1652375181445},{"_id":"source/_posts/让电脑和NAS断网后自动关机.md","hash":"3d8d563b989b80c55fa61fda96a83242dc0ef34a","modified":1652375157910},{"_id":"source/_posts/说一说swoole的安装.md","hash":"1489d7fec1ed32f0c1c6d57d0d80f464c1e67592","modified":1652375188208},{"_id":"source/_posts/说一说群晖版本的inotify+rsync同步.md","hash":"3527e85f546c135e86085d1390bd8657531cca49","modified":1652375176341},{"_id":"source/_posts/说说利用frm和ibd以及ibdata1文件恢复mysql数据.md","hash":"2f798efb758968746c6d63e21d3dead017b9932a","modified":1652375169142},{"_id":"source/_posts/Docker和pm2准确的开机启动姿势.md","hash":"43a1061ba2e1ccaec80e5e6bf9ca31906de4e68c","modified":1652375268542},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1652366380479},{"_id":"source/images/b9be3cae2d0a1c308d21909145aebf70.jpeg","hash":"43e2501cb07f9bbd99bfece1eef2382740754253","modified":1653198701393},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1652363495311},{"_id":"source/images/qrcode.jpeg","hash":"ca9f55e55c0096169026413c918b11fcb2acb0aa","modified":1650332245657},{"_id":"source/images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg","hash":"109dd55b08fd74bcec79276265aa30e3b8a30914","modified":1653198027390},{"_id":"source/images/nps3.jpg","hash":"c9b8e7bb106b51498c70a7dc3fa9b4ac8485e857","modified":1583311032000},{"_id":"source/images/nps1.jpg","hash":"9a77d6fbcb2b639bb1a4e96b4b2384b097725a7e","modified":1583310200000},{"_id":"source/images/nps2.jpg","hash":"d49f491b5ff30e39ea86460de9b6ad972e6a57cb","modified":1583310099000},{"_id":"source/_posts/waf防火墙的小更新.md","hash":"4cbd098f72ee9211a9673c2d411b6bdf43b811bf","modified":1652375309998},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"6bc4a65ff953e1a7643e656ca65826dce7d986fd","modified":1650334447567},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"aaef66600bbe15d36bdd2867db4cc0aea5f0fc6f","modified":1650334562820},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"5c2c69ebe3fee831d3dcd35e8f4ff26f8fcdf490","modified":1650334409360},{"_id":"source/images/1617782228929766s.png","hash":"f6e89ee284b62c61362ac406f5211eb3e91fcc36","modified":1653198200081},{"_id":"public/atom.xml","hash":"670e1e86b72d50074317f66c50d42fd6c85e214b","modified":1653305271616},{"_id":"public/new-blog-new-start.html","hash":"bdeecee377919c608f9950cb3cf782f18b84d3cc","modified":1653305271616},{"_id":"public/archives/page/4/index.html","hash":"4fd81fac6a08424122d460453822589057207582","modified":1653305271616},{"_id":"public/archives/2017/index.html","hash":"ceceaa0113caf91115bbf95196d756715a5e12fd","modified":1653305271616},{"_id":"public/archives/2017/11/index.html","hash":"4a44dc7e871fb82d7befce01fd94a0988dc5bdcf","modified":1653305271616},{"_id":"public/archives/2018/page/3/index.html","hash":"f599350cfd217b9c2e59166e32b7e8698905a55f","modified":1653305271616},{"_id":"public/archives/2018/01/index.html","hash":"2281c3d58bdd437e2890e68418f2a5efa9acc20b","modified":1653305271616},{"_id":"public/archives/2018/02/index.html","hash":"8315211ec35e347e7a9e56c9be3c422212a0a7c5","modified":1653305271616},{"_id":"public/archives/2018/03/index.html","hash":"076e6bd5a611c0b5c2ed0824573fff3a35ef313c","modified":1653305271616},{"_id":"public/archives/2018/04/index.html","hash":"5e57bf001004b795b612bb18e47d7164c8610c4d","modified":1653305271616},{"_id":"public/archives/2018/05/index.html","hash":"9d6fc91689762b35418f914d73233a2580935c54","modified":1653305271616},{"_id":"public/archives/2018/06/index.html","hash":"cd0a67126283aa608955f0d1e572ee2b4698b7b0","modified":1653305271616},{"_id":"public/archives/2018/07/index.html","hash":"047fa4384987af9322a5798e7e23b9c233721137","modified":1653305271616},{"_id":"public/archives/2018/08/index.html","hash":"d0ff5425d50c19300735e652341fa060db6126ae","modified":1653305271616},{"_id":"public/archives/2018/09/index.html","hash":"8b246eeab47711aa750559a3682831125b388a48","modified":1653305271616},{"_id":"public/archives/2018/10/index.html","hash":"0b16c1978919692f75f38d531fc7c802d5b8a834","modified":1653305271616},{"_id":"public/archives/2018/11/index.html","hash":"a370a5c871cd04b9b3802a3c7307407a0fe3e4bc","modified":1653305271616},{"_id":"public/archives/2020/index.html","hash":"36a32bf98eed1110a614ec2e24fff3fccdd0e894","modified":1653305271616},{"_id":"public/archives/2020/02/index.html","hash":"3c75aa13d79da145e6096119d67e3a4a27650a59","modified":1653305271616},{"_id":"public/archives/2020/03/index.html","hash":"270ba62b54a6e50dc58f95a258a4b9ea60624d50","modified":1653305271616},{"_id":"public/archives/2022/04/index.html","hash":"e8e816b4f177b2eabf0e55adad61dd277ba56f96","modified":1653305271616},{"_id":"public/archives/2022/05/index.html","hash":"e8a1a631372ccfe16689ad3887d1283ea3a28e4f","modified":1653305271616},{"_id":"public/tags/Atom/index.html","hash":"09714c215b15ed5954a1e7f4575d31388dee932a","modified":1653305271616},{"_id":"public/tags/SSH代理/index.html","hash":"07d40c6612cbf21bf175a7116fba585cc09440ec","modified":1653305271616},{"_id":"public/tags/docker/index.html","hash":"859a036e5c877dd8d47d235429908991930925a9","modified":1653305271616},{"_id":"public/tags/pm2/index.html","hash":"5923646372b9be412894cbc2cf20dd7d1a6e4c77","modified":1653305271616},{"_id":"public/tags/开机自启/index.html","hash":"c8ca7deb3533dedff9f5e1727743dd0c47b862b9","modified":1653305271616},{"_id":"public/tags/Firewalld/index.html","hash":"33fed279f35d82a71e21107ea23a253fa5d72852","modified":1653305271616},{"_id":"public/tags/防火墙/index.html","hash":"e6f75f4f50877deec7b9f894ac68b294eb60cd22","modified":1653305271616},{"_id":"public/tags/ipset/index.html","hash":"f79661a02eb15fd7b15be67e3f1f1a2bb9dd4710","modified":1653305271616},{"_id":"public/tags/网络安全/index.html","hash":"9cfb8c440db763644503a90c118770a94488d1b6","modified":1653305271616},{"_id":"public/tags/supervisor/index.html","hash":"afc5797e4ad2d05efa36c42117875dbc5a164b62","modified":1653305271616},{"_id":"public/tags/守护进程/index.html","hash":"a6456df255b9d293dd42b0e1702021ead4cdc252","modified":1653305271616},{"_id":"public/tags/echo/index.html","hash":"0b50b128a8b4ef4023b804c3c9996ce31eb93d3b","modified":1653305271616},{"_id":"public/tags/tee/index.html","hash":"0f9419864d9a90f3847163370f8648352c8cd80f","modified":1653305271616},{"_id":"public/tags/前端/index.html","hash":"605c24bdc9fbf88d6399a381d76d103d689fcf63","modified":1653305271616},{"_id":"public/tags/iframe/index.html","hash":"8ff63dddd0ef2991711bd520b68c25bd83996821","modified":1653305271616},{"_id":"public/tags/弹窗/index.html","hash":"16ab6bf1bc56be33609a08cce9b76d7f29854553","modified":1653305271616},{"_id":"public/tags/mysql/index.html","hash":"23c7ba1eef4bd9fadc00d8f10e32831466fa4c25","modified":1653305271616},{"_id":"public/tags/emoji/index.html","hash":"9b3faf10c795f406cfab54473d1e482eaaf57ad6","modified":1653305271616},{"_id":"public/tags/nginx/index.html","hash":"8154fee8be00b5647613c63519d5c11cc573e45b","modified":1653305271616},{"_id":"public/tags/lua/index.html","hash":"a68b1497a31f9213cfc39b9c75e64735f072ff40","modified":1653305271616},{"_id":"public/tags/waf/index.html","hash":"a61fd64ed615f5d3b383d13dc4b23cc1e521b74a","modified":1653305271616},{"_id":"public/tags/google-chrome/index.html","hash":"758149c84d609dbae0100ee78a8124159103a4f2","modified":1653305271616},{"_id":"public/tags/iptables/index.html","hash":"7db63ed74093f94d89b7b20e141f5d4a2350b7ad","modified":1653305271616},{"_id":"public/tags/ssh/index.html","hash":"efc6cb4c527fc586e484e60f4cb336b81cd909fe","modified":1653305271616},{"_id":"public/tags/inotify/index.html","hash":"58cc42ad79b826a2fdd63bad2013cd46dc0915ee","modified":1653305271616},{"_id":"public/tags/rsync/index.html","hash":"68255bded0a5e31dd3a2343f57361f3655467284","modified":1653305271616},{"_id":"public/tags/实时同步/index.html","hash":"9805da3faa57b2e562e7663aeca5b3bb53447417","modified":1653305271616},{"_id":"public/tags/SSH安全/index.html","hash":"da08e5db827ce75c39d388f21669b620bf42785a","modified":1653305271616},{"_id":"public/tags/二步验证/index.html","hash":"928529d20477bac6dc1b1307627803e3bedd6915","modified":1653305271616},{"_id":"public/tags/ffmpeg/index.html","hash":"107d3a64a346e2a81e2b370e15404ae58eae3ab7","modified":1653305271616},{"_id":"public/tags/OpenCC/index.html","hash":"bb7a9df7816c136f9e2a4b75080a90abb48557db","modified":1653305271616},{"_id":"public/tags/kafka/index.html","hash":"94bdbcac6cbfba801836fd339cc054c6fc08a38a","modified":1653305271616},{"_id":"public/tags/队列/index.html","hash":"7c23645a7c0262cdd42e3e30d51c2ca7c9d7f9a2","modified":1653305271616},{"_id":"public/tags/rabbitmq/index.html","hash":"28bfa1b114dc7e487d1d365fb72f74e676d25bd0","modified":1653305271616},{"_id":"public/tags/nps/index.html","hash":"88fee391a7c1eac754d8ce93d3c9a8ebc738edd3","modified":1653305271616},{"_id":"public/tags/内网穿透/index.html","hash":"e3e3d156445f577373a30c3023fda050660a17d3","modified":1653305271616},{"_id":"public/tags/软路由/index.html","hash":"08c0effaf1334d97e942da3d759d16875b78be6a","modified":1653305271616},{"_id":"public/tags/OpenWRT/index.html","hash":"3d784971a89cde5e6f501dd29ad9773c081c2174","modified":1653305271616},{"_id":"public/tags/数据库备份/index.html","hash":"dda784b9ee3e2602ce887d1cd3a2dea59f3ad81b","modified":1653305271616},{"_id":"public/tags/Docker/index.html","hash":"d980f51ce025f10a78977bc38b22f8b218a0f6ee","modified":1653305271616},{"_id":"public/tags/账号安全/index.html","hash":"7fe06b7a6dc7d78c555319190b46655c74144021","modified":1653305271616},{"_id":"public/tags/勒索/index.html","hash":"dc462e271f97c627f0b17ee59522a66335d065e3","modified":1653305271616},{"_id":"public/tags/safari/index.html","hash":"c2bd95a5a0468093c58d54d69fc2846325be4a3a","modified":1653305271616},{"_id":"public/tags/esxi/index.html","hash":"1cc2f0e0f719359aa4205b3e79aef361cf50de4c","modified":1653305271616},{"_id":"public/tags/分区/index.html","hash":"9ae68a0a290fb6ccdefd052008d23ecb9e38911b","modified":1653305271616},{"_id":"public/tags/自启动/index.html","hash":"0f5d32ae6f5bd0aa100e5b93ab932c00827add4b","modified":1653305271616},{"_id":"public/tags/denyhosts/index.html","hash":"6c2d99926ded736d053cf03e2f9cd165390b709d","modified":1653305271616},{"_id":"public/the-most-common-usage-firewalld.html","hash":"7e5220da0f49b5452814286e26a067b95074d281","modified":1653305271616},{"_id":"public/ransom-email.html","hash":"f9be5b57d6f51b97585650ccbcca3ade96669e35","modified":1653305271616},{"_id":"public/a-light-weight-network-penetration-tool-nps.html","hash":"a9e95ad7526cb9c261d0dd005fc1f679c8919be7","modified":1653305271616},{"_id":"public/ding-shi-kai-guan-openwrtde-led.html","hash":"82e573689619b30abccae5218cd13f54d399620d","modified":1653305271616},{"_id":"public/zi-ding-yi-openwrtde-qi-dong-jiao-ben.html","hash":"dc396b3d212b831e3ec89b041a2fd5ab4432da9f","modified":1653305271616},{"_id":"public/shuo-yi-shuo-qun-hui-ban-ben-de-inotify-rsynctong-bu.html","hash":"9dc96f10bc73ab6d945f2804ddbdd0319e5d0e2b","modified":1653305271616},{"_id":"public/create-and-remove-use-partition-on-esxi.html","hash":"f4d74051667da60c0ecfbdfc0d3b7a3018aba7c3","modified":1653305271616},{"_id":"public/login-ssh-with-2fa-authentication-by-google-authencator.html","hash":"70ac9cd436abed6701a22960105da2d177ed28aa","modified":1653305271616},{"_id":"public/sync-data-realtime-with-inotify-rsync.html","hash":"a3df42463b4c7fda51e08fde42105e4bdb0448a1","modified":1653305271616},{"_id":"public/quickly-delete-dockers-containtor-and-images.html","hash":"2fd60ce349206f93a3b06e98dde5f451ccf82c11","modified":1653305271616},{"_id":"public/install-google-chrome-local-extensions.html","hash":"4977722e35e44d0e7afdfb82085828bd61e05f95","modified":1653305271616},{"_id":"public/the-right-way-of-startup-to-docker-and-pm2.html","hash":"8885eca2a4a28adb3d3effdb961fae964fc36467","modified":1653305271616},{"_id":"public/operate-many-files-in-echo-and-tee-on-linux.html","hash":"179091b090191759680ac6ad3b1a2dca8fdc5c7f","modified":1653305271616},{"_id":"public/connecting-server-through-said-agent.html","hash":"a37881b21d713d1562a307a9aa67154eefa8c34d","modified":1653305271616},{"_id":"public/the-modification-of-waf-firewall.html","hash":"9e7f69f1b56c6efedcfb15f4ae2f76352d5f4506","modified":1653305271616},{"_id":"public/about-swoole-installtion.html","hash":"583253012d1a4ccdd4393f6daf113f8eba4d2dfb","modified":1653305271616},{"_id":"public/shutdown-after-offline-on-pc-and-nas.html","hash":"3c44317205661785814ab5004ad880faa676a228","modified":1653305271616},{"_id":"public/install-rabbitmq-on-linux.html","hash":"2aa5dc32a84b5b7954c361c1656e2a8709f76185","modified":1653305271616},{"_id":"public/a-backup-method-for-mini-mysql-database.html","hash":"432cdc73fd89e459bb58a2840573f43e265129fa","modified":1653305271616},{"_id":"public/sync-data-realtime-with-inotify-rsync-v2.html","hash":"20c445d3d9ba173d6521d10e01838c8785c1717e","modified":1653305271616},{"_id":"public/run-daemon-process-with-supervisor-on-linux.html","hash":"68eb98a274dceff8a33afbd06d64f897464d8ed0","modified":1653305271616},{"_id":"public/storing-emoji-in-mysql.html","hash":"4d03384ec58d207e9e72dc50a4418f9e8865a9f2","modified":1653305271616},{"_id":"public/install-ffpmeg-and-ffmpeg-devel-on-centos7.html","hash":"1d8124c5abd5788634698a97ebd048659b22b273","modified":1653305271616},{"_id":"public/the-use-of-feelings-on-leanote.html","hash":"1e2cef7662d12cba7dc64c6170e96d26cac5a5ed","modified":1653305271616},{"_id":"public/install-the-php-c-extension-opencc.html","hash":"2792eeee1a0f3b4d9febebfc6a96d513fab642d7","modified":1653305271616},{"_id":"public/recovering-mysql-database-with-frm-ibd-ibdata1.html","hash":"044673678d9c2a727f6a1f4eb6354e56c4ff51e7","modified":1653305271616},{"_id":"public/logining-ssh-without-password-on-linux.html","hash":"6e752c4f1fc245855c4b169a8e6779b1d83369cf","modified":1653305271616},{"_id":"public/delete-all-safari-bookmarks.html","hash":"e19a5f1a720344dca0720ebcc1d8bf0a2cc0b4df","modified":1653305271616},{"_id":"public/install-nginx-and-lua.html","hash":"751290f6b744fd51e305368254550c77d28be72f","modified":1653305271616},{"_id":"public/install-iptables-as-firewall-on-centos7.html","hash":"2b852ffac36c2da36b9ce04a614ab4298425fed9","modified":1653305271616},{"_id":"public/talking-about-iptables-and-ipset.html","hash":"026ab030aed1de57bfe4777cfd18a5262ba00003","modified":1653305271616},{"_id":"public/remove-the-ip-blocked-by-denyhosts.html","hash":"77ee140593f41e9dcf808b1aefdc467d826878f1","modified":1653305271616},{"_id":"public/install-kafka-on-centos-7.html","hash":"2ff9608a210bc5fbf96e8952d91cdce690c1bbae","modified":1653305271616},{"_id":"public/rolling-iframe-webpage-content-in-webview-of-ios.html","hash":"a4e1bae64bf62bada488dfd72c46e32a6073e97d","modified":1653305271616},{"_id":"public/categories/技术/index.html","hash":"2a72cac646890fe6b091ba75d13a293bf246ca77","modified":1653305271616},{"_id":"public/categories/技术/page/2/index.html","hash":"67f39c3d480759b2d206834b93c3c79559e1f10b","modified":1653305271616},{"_id":"public/categories/技术/page/3/index.html","hash":"7a18c35af8ac5b5495ea23185a7e79b286f0876d","modified":1653305271616},{"_id":"public/archives/page/2/index.html","hash":"bac185a93c56fcffd64314561584d2c1624d4bcf","modified":1653305271616},{"_id":"public/archives/page/3/index.html","hash":"efaa9465e636e12693b6d51542ae7ac9b05a54d5","modified":1653305271616},{"_id":"public/archives/2018/index.html","hash":"8855df16946a1132dbe2aec7fea7bacbae3a95be","modified":1653305271616},{"_id":"public/archives/2018/page/2/index.html","hash":"851a6f1f71b74d2de2eab63155845240c88f2d4a","modified":1653305271616},{"_id":"public/tags/ups/index.html","hash":"68598fa3ad5de19cb20e2067d47afddd10b78dff","modified":1653305271616},{"_id":"public/tags/NAS/index.html","hash":"da1fee84d456c077f57059a73700c00538b7d5a3","modified":1653305271616},{"_id":"public/tags/断网自动关机/index.html","hash":"12ad042da368ddf9b3d73fe49995c5ae17f2e5d4","modified":1653305271616},{"_id":"public/tags/Leanote/index.html","hash":"9d9f552aa14e116cd02aa1f8eade4b1b0382b194","modified":1653305271616},{"_id":"public/tags/群晖/index.html","hash":"17982288f915caea8bcbaa0b7d19b2b592b28bee","modified":1653305271616},{"_id":"public/tags/数据恢复/index.html","hash":"4e3b2aa0aec63da9e483393fe4e99dcf176d0d1a","modified":1653305271616},{"_id":"public/tags/swoole/index.html","hash":"732676ebc644d8f05749bc54dc7a2389363b1cfb","modified":1653305271616},{"_id":"public/page/2/index.html","hash":"30fcd04c56e4a62f22735076c6132ffa72d67136","modified":1653305271616},{"_id":"public/page/3/index.html","hash":"493bf97f1ed66e66fc454e6ae7644a9144a8ffef","modified":1653305271616},{"_id":"public/page/4/index.html","hash":"a3b830e9f5f2091294935dddf016608dde34f378","modified":1653305271616},{"_id":"public/images/favicon-16x16.png","hash":"aaef66600bbe15d36bdd2867db4cc0aea5f0fc6f","modified":1653305271616},{"_id":"public/images/favicon-32x32.png","hash":"6bc4a65ff953e1a7643e656ca65826dce7d986fd","modified":1653305271616},{"_id":"public/images/b9be3cae2d0a1c308d21909145aebf70.jpeg","hash":"43e2501cb07f9bbd99bfece1eef2382740754253","modified":1653305271616},{"_id":"public/images/apple-touch-icon.png","hash":"5c2c69ebe3fee831d3dcd35e8f4ff26f8fcdf490","modified":1653305271616},{"_id":"public/images/nps3.jpg","hash":"c9b8e7bb106b51498c70a7dc3fa9b4ac8485e857","modified":1653305271616},{"_id":"public/images/qrcode.jpeg","hash":"ca9f55e55c0096169026413c918b11fcb2acb0aa","modified":1653305271616},{"_id":"public/images/nps1.jpg","hash":"9a77d6fbcb2b639bb1a4e96b4b2384b097725a7e","modified":1653305271616},{"_id":"public/images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg","hash":"109dd55b08fd74bcec79276265aa30e3b8a30914","modified":1653305271616},{"_id":"public/images/nps2.jpg","hash":"d49f491b5ff30e39ea86460de9b6ad972e6a57cb","modified":1653305271616},{"_id":"public/images/1617782228929766s.png","hash":"f6e89ee284b62c61362ac406f5211eb3e91fcc36","modified":1653305271616}],"Category":[{"name":"记录","_id":"cl16op5qv00036itd16gc2ooy"},{"name":"技术","_id":"cl3in6atv0002lvtdaeui7ixh"}],"Data":[],"Page":[{"title":"分类","date":"2022-03-25T13:59:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-03-25 21:59:03\ntype: \"categories\"\n---\n","updated":"2022-03-25T14:00:42.055Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl16op5ql00006itd2mpphkx9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2022-03-25T05:27:31.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-03-25 13:27:31\ntype: tags\n---\n","updated":"2022-03-25T14:00:57.334Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl16op5qt00026itd3bdd4d10","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"关于我","date":"2018-10-28T00:42:30.000Z","type":"about","_content":"\n## 版本1.0\n\n很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！\n\n本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！\n\n朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。女友一个，未来老婆位置被她预定了，如果有哪位美女看上小可，请提前预定下辈子！\n\n## 版本2.0\n\n很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！\n\n本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！\n\n朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。原本是奉行计划结婚、生娃。不曾想，小宝宝有了，还把我计划好的结婚日子大大地向前推进。老婆已经有了，宝宝也准备出生！每日看着胎宝宝的变化，整个人都变了不少……每天都是幸福的！\n\n最后，提醒各位青春靓丽的小姐姐们，我缺个女朋友了！咳咳，招租……这一句，纯属玩笑，一世一人相伴足矣！愿大家都有情人终成眷属！","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-10-28 08:42:30\ntype: about\n---\n\n## 版本1.0\n\n很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！\n\n本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！\n\n朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。女友一个，未来老婆位置被她预定了，如果有哪位美女看上小可，请提前预定下辈子！\n\n## 版本2.0\n\n很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！\n\n本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！\n\n朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。原本是奉行计划结婚、生娃。不曾想，小宝宝有了，还把我计划好的结婚日子大大地向前推进。老婆已经有了，宝宝也准备出生！每日看着胎宝宝的变化，整个人都变了不少……每天都是幸福的！\n\n最后，提醒各位青春靓丽的小姐姐们，我缺个女朋友了！咳咳，招租……这一句，纯属玩笑，一世一人相伴足矣！愿大家都有情人终成眷属！","updated":"2022-05-12T13:48:12.003Z","path":"about/index.html","_id":"cl16op5qx00056itdabqh2m9n","comments":1,"layout":"page","content":"<h2 id=\"版本1-0\"><a href=\"#版本1-0\" class=\"headerlink\" title=\"版本1.0\"></a>版本1.0</h2><p>很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！</p>\n<p>本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！</p>\n<p>朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。女友一个，未来老婆位置被她预定了，如果有哪位美女看上小可，请提前预定下辈子！</p>\n<h2 id=\"版本2-0\"><a href=\"#版本2-0\" class=\"headerlink\" title=\"版本2.0\"></a>版本2.0</h2><p>很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！</p>\n<p>本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！</p>\n<p>朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。原本是奉行计划结婚、生娃。不曾想，小宝宝有了，还把我计划好的结婚日子大大地向前推进。老婆已经有了，宝宝也准备出生！每日看着胎宝宝的变化，整个人都变了不少……每天都是幸福的！</p>\n<p>最后，提醒各位青春靓丽的小姐姐们，我缺个女朋友了！咳咳，招租……这一句，纯属玩笑，一世一人相伴足矣！愿大家都有情人终成眷属！</p>\n","site":{"data":{}},"length":582,"excerpt":"","more":"<h2 id=\"版本1-0\"><a href=\"#版本1-0\" class=\"headerlink\" title=\"版本1.0\"></a>版本1.0</h2><p>很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！</p>\n<p>本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！</p>\n<p>朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。女友一个，未来老婆位置被她预定了，如果有哪位美女看上小可，请提前预定下辈子！</p>\n<h2 id=\"版本2-0\"><a href=\"#版本2-0\" class=\"headerlink\" title=\"版本2.0\"></a>版本2.0</h2><p>很早，我就想，互联网都接触有个好十几年了，是不是应该好好地给自己写一个“关于我”了。想了许久，历经多次本地更新，最终形成了现在的第一个release版本！</p>\n<p>本人姓氏中华，名子孙，虽然有一颗遨游宇宙的自由心，但可惜还在地球表面。喜欢吃，也不过是每日三餐。人格分裂，一边想着过垂钓的蓬户士生活，又一边想着在这社会里留下点印记！</p>\n<p>朋友没别人的多，有知己一个尤为珍视，一个不多，但是难得，也满足了。原本是奉行计划结婚、生娃。不曾想，小宝宝有了，还把我计划好的结婚日子大大地向前推进。老婆已经有了，宝宝也准备出生！每日看着胎宝宝的变化，整个人都变了不少……每天都是幸福的！</p>\n<p>最后，提醒各位青春靓丽的小姐姐们，我缺个女朋友了！咳咳，招租……这一句，纯属玩笑，一世一人相伴足矣！愿大家都有情人终成眷属！</p>\n"}],"Post":[{"title":"Atom和SSH客户端连接不上服务器的解决方法","date":"2018-10-28T00:15:59.000Z","url":"connecting-server-through-said-agent","description":"最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！","_content":"\n> 最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！\n\n## 原因分析\n\n服务器连接不上有各式各样的原因，不过大原因就一个，服务器和本地终端被阻隔了。所以呢，我们要做的就是在服务器和本地客户端之间搭个桥。原本服务器和本地客户端就像是分别在此岸和彼岸的两条路，我们架个桥，就可以把两岸的路连到一起了。知道了原因，我们接下来分步走！\n\n## 代理\n\n安装代理软件，我用的是shadowsocks，也是我推荐的，看自己习惯使用别的也可以（可以开启本地代理才行）。安装了，配置好，连接到服务器，并确保正常使用，这就完成了第一步。我们记住一下本地端口，默认的是1080。当然，这个可以修改。关于具体的使用，我就不多说了，大家可以搜索了解。\n\n## windows实现\n\nwindows平台上面，socks5客户端很多选择，我在windows上面使用的是proxifier，也是我最推荐的一个。安装完成之后，我们启动软件之后，开始配置proxifier规则。我们依次打开proxifier的“配置文件”-“代理服务器”。在打开的代理服务器对话框，点击右边的“添加”按钮，打开另一个对话框。我们在地址一栏输入本地地址，即127.0.0.1，端口填写第一步的本地端口1080，在协议处选择SOCKS\nVersion 5。填好之后，依次保存即可。proxifier是个收费软件，大家可以找找免费的。\n\n## Mac实现\n\nMac上面，我使用的是Proxychains-ng。这里简单说一下两种安装方式。最新的Release版本是4.13，在Github上面的地址是https://github.com/rofl0r/proxychains-ng。\n\n### 编译安装\n\n```\nwget https://github.com/rofl0r/proxychains-ng/archive/v4.13.tar.gz\ntar xzf v4.13.tar.gz\ncd proxychains-ng*\n./configure --prefix=/usr --sysconfdir=/etc\nmake\nmake install\nmake install-config\n```\n\n### homebrew安装\n\n```\nbrew install proxychains-ng\n```\n\n如果没有安装homebrew，自己安装一下。homebrew地址是https://brew.sh。推荐大家安装使用homebrew，是一个非常好的工具。\n\n### 关闭SIP\n\nmacOS 10.11 后有一个功能叫做 SIP（System Integrity Protection）。Proxychains-ng代理需要我们把SIP关闭才能正常使用。关闭步骤如下：\n\n 1. 重启Mac，按⌘ + R进入Recovery模式\n 2. 依次选择顶部菜单的实用工具（Utilities）-> 终端（Terminal）\n 3. 输入命令csrutil disable，并运行\n 4. 重启系统后，终端里输入 csrutil status，如果成功关闭会显示System Integrity Protection\n    status:disabled\n\n### 配置Proxychains-ng\n\n * 编译安装时，配置文件路径是/etc/proxychains.conf\n * homebrew安装时，配置文件路径是/usr/local/etc/proxychains.conf\n\n我们打开配置文件之后，找到[ProxyList]，在下面新添socks5  127.0.0.1 1080即可。\n\n### 通过Proxychains-ng启动程序\n\n```\nproxychains 程序\n```\n\n顺便说一下启动终端启动atom。\n\n```\nln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom\nproxychains atom\n```\n\n其他程序也是一样，平时怎么用程序就怎么用，在命令前面添加proxychains即可。\n\n## Linux实现\n\nLinux上面，推荐的是proxychains。Github地址是https://github.com/haad/proxychains。安装步骤如下：\n\n```\nwget https://github.com/haad/proxychains/archive/proxychains-4.2.0.tar.gz\ncd proxychains-proxychains*\n./configure\nmake\nsudo make install\n```\n\n具体使用类似上面的proxychains-ng，好像proxychains-ng是基于proxychains开发的。这里就不多说了。\n\n## 补充\n\nproxifier有Mac版本，如果银子足够又不想折腾，这个就是最好的选择了！proxifier官网地址是https://www.proxifier.com","source":"_posts/Atom和SSH客户端连接不上服务器的解决方法.md","raw":"---\ntitle: Atom和SSH客户端连接不上服务器的解决方法\ndate: 2018-10-28 08:15:59\ntags: \n  - Atom\n  - SSH代理\ncategories:\n  - 技术\nurl: connecting-server-through-said-agent\ndescription: 最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！\n---\n\n> 最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！\n\n## 原因分析\n\n服务器连接不上有各式各样的原因，不过大原因就一个，服务器和本地终端被阻隔了。所以呢，我们要做的就是在服务器和本地客户端之间搭个桥。原本服务器和本地客户端就像是分别在此岸和彼岸的两条路，我们架个桥，就可以把两岸的路连到一起了。知道了原因，我们接下来分步走！\n\n## 代理\n\n安装代理软件，我用的是shadowsocks，也是我推荐的，看自己习惯使用别的也可以（可以开启本地代理才行）。安装了，配置好，连接到服务器，并确保正常使用，这就完成了第一步。我们记住一下本地端口，默认的是1080。当然，这个可以修改。关于具体的使用，我就不多说了，大家可以搜索了解。\n\n## windows实现\n\nwindows平台上面，socks5客户端很多选择，我在windows上面使用的是proxifier，也是我最推荐的一个。安装完成之后，我们启动软件之后，开始配置proxifier规则。我们依次打开proxifier的“配置文件”-“代理服务器”。在打开的代理服务器对话框，点击右边的“添加”按钮，打开另一个对话框。我们在地址一栏输入本地地址，即127.0.0.1，端口填写第一步的本地端口1080，在协议处选择SOCKS\nVersion 5。填好之后，依次保存即可。proxifier是个收费软件，大家可以找找免费的。\n\n## Mac实现\n\nMac上面，我使用的是Proxychains-ng。这里简单说一下两种安装方式。最新的Release版本是4.13，在Github上面的地址是https://github.com/rofl0r/proxychains-ng。\n\n### 编译安装\n\n```\nwget https://github.com/rofl0r/proxychains-ng/archive/v4.13.tar.gz\ntar xzf v4.13.tar.gz\ncd proxychains-ng*\n./configure --prefix=/usr --sysconfdir=/etc\nmake\nmake install\nmake install-config\n```\n\n### homebrew安装\n\n```\nbrew install proxychains-ng\n```\n\n如果没有安装homebrew，自己安装一下。homebrew地址是https://brew.sh。推荐大家安装使用homebrew，是一个非常好的工具。\n\n### 关闭SIP\n\nmacOS 10.11 后有一个功能叫做 SIP（System Integrity Protection）。Proxychains-ng代理需要我们把SIP关闭才能正常使用。关闭步骤如下：\n\n 1. 重启Mac，按⌘ + R进入Recovery模式\n 2. 依次选择顶部菜单的实用工具（Utilities）-> 终端（Terminal）\n 3. 输入命令csrutil disable，并运行\n 4. 重启系统后，终端里输入 csrutil status，如果成功关闭会显示System Integrity Protection\n    status:disabled\n\n### 配置Proxychains-ng\n\n * 编译安装时，配置文件路径是/etc/proxychains.conf\n * homebrew安装时，配置文件路径是/usr/local/etc/proxychains.conf\n\n我们打开配置文件之后，找到[ProxyList]，在下面新添socks5  127.0.0.1 1080即可。\n\n### 通过Proxychains-ng启动程序\n\n```\nproxychains 程序\n```\n\n顺便说一下启动终端启动atom。\n\n```\nln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom\nproxychains atom\n```\n\n其他程序也是一样，平时怎么用程序就怎么用，在命令前面添加proxychains即可。\n\n## Linux实现\n\nLinux上面，推荐的是proxychains。Github地址是https://github.com/haad/proxychains。安装步骤如下：\n\n```\nwget https://github.com/haad/proxychains/archive/proxychains-4.2.0.tar.gz\ncd proxychains-proxychains*\n./configure\nmake\nsudo make install\n```\n\n具体使用类似上面的proxychains-ng，好像proxychains-ng是基于proxychains开发的。这里就不多说了。\n\n## 补充\n\nproxifier有Mac版本，如果银子足够又不想折腾，这个就是最好的选择了！proxifier官网地址是https://www.proxifier.com","slug":"Atom和SSH客户端连接不上服务器的解决方法","published":1,"updated":"2022-05-12T17:07:43.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6atq0000lvtdg9zkf6jo","content":"<blockquote>\n<p>最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！</p>\n</blockquote>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><p>服务器连接不上有各式各样的原因，不过大原因就一个，服务器和本地终端被阻隔了。所以呢，我们要做的就是在服务器和本地客户端之间搭个桥。原本服务器和本地客户端就像是分别在此岸和彼岸的两条路，我们架个桥，就可以把两岸的路连到一起了。知道了原因，我们接下来分步走！</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>安装代理软件，我用的是shadowsocks，也是我推荐的，看自己习惯使用别的也可以（可以开启本地代理才行）。安装了，配置好，连接到服务器，并确保正常使用，这就完成了第一步。我们记住一下本地端口，默认的是1080。当然，这个可以修改。关于具体的使用，我就不多说了，大家可以搜索了解。</p>\n<h2 id=\"windows实现\"><a href=\"#windows实现\" class=\"headerlink\" title=\"windows实现\"></a>windows实现</h2><p>windows平台上面，socks5客户端很多选择，我在windows上面使用的是proxifier，也是我最推荐的一个。安装完成之后，我们启动软件之后，开始配置proxifier规则。我们依次打开proxifier的“配置文件”-“代理服务器”。在打开的代理服务器对话框，点击右边的“添加”按钮，打开另一个对话框。我们在地址一栏输入本地地址，即127.0.0.1，端口填写第一步的本地端口1080，在协议处选择SOCKS<br>Version 5。填好之后，依次保存即可。proxifier是个收费软件，大家可以找找免费的。</p>\n<h2 id=\"Mac实现\"><a href=\"#Mac实现\" class=\"headerlink\" title=\"Mac实现\"></a>Mac实现</h2><p>Mac上面，我使用的是Proxychains-ng。这里简单说一下两种安装方式。最新的Release版本是4.13，在Github上面的地址是<a href=\"https://github.com/rofl0r/proxychains-ng%E3%80%82\">https://github.com/rofl0r/proxychains-ng。</a></p>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/rofl0r/proxychains-ng/archive/v4.13.tar.gz</span><br><span class=\"line\">tar xzf v4.13.tar.gz</span><br><span class=\"line\">cd proxychains-ng*</span><br><span class=\"line\">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\">make install-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"homebrew安装\"><a href=\"#homebrew安装\" class=\"headerlink\" title=\"homebrew安装\"></a>homebrew安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<p>如果没有安装homebrew，自己安装一下。homebrew地址是<a href=\"https://brew.sh.推荐大家安装使用homebrew,是一个非常好的工具./\">https://brew.sh。推荐大家安装使用homebrew，是一个非常好的工具。</a></p>\n<h3 id=\"关闭SIP\"><a href=\"#关闭SIP\" class=\"headerlink\" title=\"关闭SIP\"></a>关闭SIP</h3><p>macOS 10.11 后有一个功能叫做 SIP（System Integrity Protection）。Proxychains-ng代理需要我们把SIP关闭才能正常使用。关闭步骤如下：</p>\n<ol>\n<li>重启Mac，按⌘ + R进入Recovery模式</li>\n<li>依次选择顶部菜单的实用工具（Utilities）-&gt; 终端（Terminal）</li>\n<li>输入命令csrutil disable，并运行</li>\n<li>重启系统后，终端里输入 csrutil status，如果成功关闭会显示System Integrity Protection<br>status:disabled</li>\n</ol>\n<h3 id=\"配置Proxychains-ng\"><a href=\"#配置Proxychains-ng\" class=\"headerlink\" title=\"配置Proxychains-ng\"></a>配置Proxychains-ng</h3><ul>\n<li>编译安装时，配置文件路径是&#x2F;etc&#x2F;proxychains.conf</li>\n<li>homebrew安装时，配置文件路径是&#x2F;usr&#x2F;local&#x2F;etc&#x2F;proxychains.conf</li>\n</ul>\n<p>我们打开配置文件之后，找到[ProxyList]，在下面新添socks5  127.0.0.1 1080即可。</p>\n<h3 id=\"通过Proxychains-ng启动程序\"><a href=\"#通过Proxychains-ng启动程序\" class=\"headerlink\" title=\"通过Proxychains-ng启动程序\"></a>通过Proxychains-ng启动程序</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains 程序</span><br></pre></td></tr></table></figure>\n\n<p>顺便说一下启动终端启动atom。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom</span><br><span class=\"line\">proxychains atom</span><br></pre></td></tr></table></figure>\n\n<p>其他程序也是一样，平时怎么用程序就怎么用，在命令前面添加proxychains即可。</p>\n<h2 id=\"Linux实现\"><a href=\"#Linux实现\" class=\"headerlink\" title=\"Linux实现\"></a>Linux实现</h2><p>Linux上面，推荐的是proxychains。Github地址是<a href=\"https://github.com/haad/proxychains%E3%80%82%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A\">https://github.com/haad/proxychains。安装步骤如下：</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/haad/proxychains/archive/proxychains-4.2.0.tar.gz</span><br><span class=\"line\">cd proxychains-proxychains*</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>具体使用类似上面的proxychains-ng，好像proxychains-ng是基于proxychains开发的。这里就不多说了。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>proxifier有Mac版本，如果银子足够又不想折腾，这个就是最好的选择了！proxifier官网地址是<a href=\"https://www.proxifier.com/\">https://www.proxifier.com</a></p>\n","site":{"data":{}},"length":2088,"excerpt":"","more":"<blockquote>\n<p>最近，一台服务器连接不上了！服务器不在国内、不在亚洲，在遥远的澳洲。我经常用的Atom，偶尔会用来编辑点小文件，顺便上传到服务器，现在连接不上了！我经常用的Xshell，用来管理服务器，现在也连接不上了！巧了，有个朋友问了我怎么才能连接上连接不上的服务器，所以呢，在我解决了之后，顺便分享一下怎么解决！</p>\n</blockquote>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><p>服务器连接不上有各式各样的原因，不过大原因就一个，服务器和本地终端被阻隔了。所以呢，我们要做的就是在服务器和本地客户端之间搭个桥。原本服务器和本地客户端就像是分别在此岸和彼岸的两条路，我们架个桥，就可以把两岸的路连到一起了。知道了原因，我们接下来分步走！</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>安装代理软件，我用的是shadowsocks，也是我推荐的，看自己习惯使用别的也可以（可以开启本地代理才行）。安装了，配置好，连接到服务器，并确保正常使用，这就完成了第一步。我们记住一下本地端口，默认的是1080。当然，这个可以修改。关于具体的使用，我就不多说了，大家可以搜索了解。</p>\n<h2 id=\"windows实现\"><a href=\"#windows实现\" class=\"headerlink\" title=\"windows实现\"></a>windows实现</h2><p>windows平台上面，socks5客户端很多选择，我在windows上面使用的是proxifier，也是我最推荐的一个。安装完成之后，我们启动软件之后，开始配置proxifier规则。我们依次打开proxifier的“配置文件”-“代理服务器”。在打开的代理服务器对话框，点击右边的“添加”按钮，打开另一个对话框。我们在地址一栏输入本地地址，即127.0.0.1，端口填写第一步的本地端口1080，在协议处选择SOCKS<br>Version 5。填好之后，依次保存即可。proxifier是个收费软件，大家可以找找免费的。</p>\n<h2 id=\"Mac实现\"><a href=\"#Mac实现\" class=\"headerlink\" title=\"Mac实现\"></a>Mac实现</h2><p>Mac上面，我使用的是Proxychains-ng。这里简单说一下两种安装方式。最新的Release版本是4.13，在Github上面的地址是<a href=\"https://github.com/rofl0r/proxychains-ng%E3%80%82\">https://github.com/rofl0r/proxychains-ng。</a></p>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/rofl0r/proxychains-ng/archive/v4.13.tar.gz</span><br><span class=\"line\">tar xzf v4.13.tar.gz</span><br><span class=\"line\">cd proxychains-ng*</span><br><span class=\"line\">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\">make install-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"homebrew安装\"><a href=\"#homebrew安装\" class=\"headerlink\" title=\"homebrew安装\"></a>homebrew安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install proxychains-ng</span><br></pre></td></tr></table></figure>\n\n<p>如果没有安装homebrew，自己安装一下。homebrew地址是<a href=\"https://brew.sh.推荐大家安装使用homebrew,是一个非常好的工具./\">https://brew.sh。推荐大家安装使用homebrew，是一个非常好的工具。</a></p>\n<h3 id=\"关闭SIP\"><a href=\"#关闭SIP\" class=\"headerlink\" title=\"关闭SIP\"></a>关闭SIP</h3><p>macOS 10.11 后有一个功能叫做 SIP（System Integrity Protection）。Proxychains-ng代理需要我们把SIP关闭才能正常使用。关闭步骤如下：</p>\n<ol>\n<li>重启Mac，按⌘ + R进入Recovery模式</li>\n<li>依次选择顶部菜单的实用工具（Utilities）-&gt; 终端（Terminal）</li>\n<li>输入命令csrutil disable，并运行</li>\n<li>重启系统后，终端里输入 csrutil status，如果成功关闭会显示System Integrity Protection<br>status:disabled</li>\n</ol>\n<h3 id=\"配置Proxychains-ng\"><a href=\"#配置Proxychains-ng\" class=\"headerlink\" title=\"配置Proxychains-ng\"></a>配置Proxychains-ng</h3><ul>\n<li>编译安装时，配置文件路径是&#x2F;etc&#x2F;proxychains.conf</li>\n<li>homebrew安装时，配置文件路径是&#x2F;usr&#x2F;local&#x2F;etc&#x2F;proxychains.conf</li>\n</ul>\n<p>我们打开配置文件之后，找到[ProxyList]，在下面新添socks5  127.0.0.1 1080即可。</p>\n<h3 id=\"通过Proxychains-ng启动程序\"><a href=\"#通过Proxychains-ng启动程序\" class=\"headerlink\" title=\"通过Proxychains-ng启动程序\"></a>通过Proxychains-ng启动程序</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains 程序</span><br></pre></td></tr></table></figure>\n\n<p>顺便说一下启动终端启动atom。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom</span><br><span class=\"line\">proxychains atom</span><br></pre></td></tr></table></figure>\n\n<p>其他程序也是一样，平时怎么用程序就怎么用，在命令前面添加proxychains即可。</p>\n<h2 id=\"Linux实现\"><a href=\"#Linux实现\" class=\"headerlink\" title=\"Linux实现\"></a>Linux实现</h2><p>Linux上面，推荐的是proxychains。Github地址是<a href=\"https://github.com/haad/proxychains%E3%80%82%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A\">https://github.com/haad/proxychains。安装步骤如下：</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/haad/proxychains/archive/proxychains-4.2.0.tar.gz</span><br><span class=\"line\">cd proxychains-proxychains*</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>具体使用类似上面的proxychains-ng，好像proxychains-ng是基于proxychains开发的。这里就不多说了。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>proxifier有Mac版本，如果银子足够又不想折腾，这个就是最好的选择了！proxifier官网地址是<a href=\"https://www.proxifier.com/\">https://www.proxifier.com</a></p>\n"},{"title":"Docker和pm2准确的开机启动姿势","date":"2018-10-28T12:08:13.000Z","url":"the-right-way-of-startup-to-docker-and-pm2","description":"Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！","_content":"\n> Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！\n\n## Docker开机自启\n\n很多人说要写docker开机启动脚本啊，要不在init.d里面添加啊，又或者追加到rc.local里面去。其实远没有那么麻烦，因为docker有着自己的方式！\n\n```\ndocker run --restart=always ……\n```\n\n## pm2开机自启\n\npm2的应用，大家都基本知道的。作为nodejs的一个进程管理利器，pm2绝对是足够的强悍了！说到pm2的随机启动，还是会有很多人不清楚。不过，一样的，pm2也有自己的启动方式！\n\n```\npm2 start /home/node/web/pm2.json\npm2 save\npm2 startup\npm2 stop all\npm2 kill\n```\n\n做了上面的步骤之后呢，系统的**/etc/systemd/system**里面会多出一个pm2.service文件。这个自然不必多说，想必大家都知道是干嘛用的。下面我们让pm2.service应用生效即可\n\n```\nsystemctl enable pm2.service\n```\n\n\n## 注意\n\n上面的例子都是以centos7为参照的，centos的其他版本、其他的linux发行版本或者macOS可能有所不同。大家可以多多尝试！\n\n","source":"_posts/Docker和pm2准确的开机启动姿势.md","raw":"---\ntitle: Docker和pm2准确的开机启动姿势\ndate: 2018-10-28 20:08:13\ntags: \n  - docker\n  - pm2\n  - 开机自启\ncategories:\n  - 技术\nurl: the-right-way-of-startup-to-docker-and-pm2\ndescription: Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！\n---\n\n> Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！\n\n## Docker开机自启\n\n很多人说要写docker开机启动脚本啊，要不在init.d里面添加啊，又或者追加到rc.local里面去。其实远没有那么麻烦，因为docker有着自己的方式！\n\n```\ndocker run --restart=always ……\n```\n\n## pm2开机自启\n\npm2的应用，大家都基本知道的。作为nodejs的一个进程管理利器，pm2绝对是足够的强悍了！说到pm2的随机启动，还是会有很多人不清楚。不过，一样的，pm2也有自己的启动方式！\n\n```\npm2 start /home/node/web/pm2.json\npm2 save\npm2 startup\npm2 stop all\npm2 kill\n```\n\n做了上面的步骤之后呢，系统的**/etc/systemd/system**里面会多出一个pm2.service文件。这个自然不必多说，想必大家都知道是干嘛用的。下面我们让pm2.service应用生效即可\n\n```\nsystemctl enable pm2.service\n```\n\n\n## 注意\n\n上面的例子都是以centos7为参照的，centos的其他版本、其他的linux发行版本或者macOS可能有所不同。大家可以多多尝试！\n\n","slug":"Docker和pm2准确的开机启动姿势","published":1,"updated":"2022-05-12T17:07:48.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6atu0001lvtdfh2c3tpa","content":"<blockquote>\n<p>Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！</p>\n</blockquote>\n<h2 id=\"Docker开机自启\"><a href=\"#Docker开机自启\" class=\"headerlink\" title=\"Docker开机自启\"></a>Docker开机自启</h2><p>很多人说要写docker开机启动脚本啊，要不在init.d里面添加啊，又或者追加到rc.local里面去。其实远没有那么麻烦，因为docker有着自己的方式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always ……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pm2开机自启\"><a href=\"#pm2开机自启\" class=\"headerlink\" title=\"pm2开机自启\"></a>pm2开机自启</h2><p>pm2的应用，大家都基本知道的。作为nodejs的一个进程管理利器，pm2绝对是足够的强悍了！说到pm2的随机启动，还是会有很多人不清楚。不过，一样的，pm2也有自己的启动方式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start /home/node/web/pm2.json</span><br><span class=\"line\">pm2 save</span><br><span class=\"line\">pm2 startup</span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\">pm2 kill</span><br></pre></td></tr></table></figure>\n\n<p>做了上面的步骤之后呢，系统的**&#x2F;etc&#x2F;systemd&#x2F;system**里面会多出一个pm2.service文件。这个自然不必多说，想必大家都知道是干嘛用的。下面我们让pm2.service应用生效即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable pm2.service</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>上面的例子都是以centos7为参照的，centos的其他版本、其他的linux发行版本或者macOS可能有所不同。大家可以多多尝试！</p>\n","site":{"data":{}},"length":593,"excerpt":"","more":"<blockquote>\n<p>Docker和pm2是不同的东西，不过都同为新生技术产物。所以，很多东西都还需要时间去摸索和熟悉。想想，Docker和pm2的开机自启就曾经困扰了很多人吧。下面说一下这两个东西的开机自启功能吧！</p>\n</blockquote>\n<h2 id=\"Docker开机自启\"><a href=\"#Docker开机自启\" class=\"headerlink\" title=\"Docker开机自启\"></a>Docker开机自启</h2><p>很多人说要写docker开机启动脚本啊，要不在init.d里面添加啊，又或者追加到rc.local里面去。其实远没有那么麻烦，因为docker有着自己的方式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=always ……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pm2开机自启\"><a href=\"#pm2开机自启\" class=\"headerlink\" title=\"pm2开机自启\"></a>pm2开机自启</h2><p>pm2的应用，大家都基本知道的。作为nodejs的一个进程管理利器，pm2绝对是足够的强悍了！说到pm2的随机启动，还是会有很多人不清楚。不过，一样的，pm2也有自己的启动方式！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start /home/node/web/pm2.json</span><br><span class=\"line\">pm2 save</span><br><span class=\"line\">pm2 startup</span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\">pm2 kill</span><br></pre></td></tr></table></figure>\n\n<p>做了上面的步骤之后呢，系统的**&#x2F;etc&#x2F;systemd&#x2F;system**里面会多出一个pm2.service文件。这个自然不必多说，想必大家都知道是干嘛用的。下面我们让pm2.service应用生效即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable pm2.service</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>上面的例子都是以centos7为参照的，centos的其他版本、其他的linux发行版本或者macOS可能有所不同。大家可以多多尝试！</p>\n"},{"title":"Firewalld的最常见用法","date":"2022-05-21T18:37:38.000Z","photos":["/images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg"],"url":"the-most-common-usage-firewalld","description":"7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。","_content":"\n> 7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。这里以centos8为例子，说一说一些Firewalld用法。\n\n## 启用Firewalld\n\n默认情况下，centos8的Firewalld的服务是处于屏蔽状态。我们需要先将Firewalld服务解除屏蔽，再启用相关服务，最后启动服务。\n\n```\nsystemctl unmask firewalld.service\nsystemctl enable firewalld.service\nsystemctl start firewalld.service\n```\n\n## 查看Firewalld运行状态\n\n```\nfirewall-cmd --state\n```\n\n如果显示“running”，说明Firewalld已经启动。\n\n## 查看Firewalld激活区域\n\n```\nfirewall-cmd --get-active-zone\n```\n\n默认启用了public区域，接下来的例子都是以public区域为例子。\n\n## 添加服务\n\n默认情况下，没有添加http和https服务，所以网站无法正常访问。所以，我们需要手动添加http和https服务。可以一条条地添加，也可以批量添加。\n\n```\nfirewall-cmd --zone=public --add-service=http --permanent\nfirewall-cmd --zone=public --add-service=https --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-service=http --add-service=https --permanent\n```\n\n## 移除服务\n\nipv6 DHCP服务一开始就被添加到服务里面。一般都不需要，可以通过下面的命令移除。还有cockpit，是一个监控软件，也可以删除。\n\n```\nfirewall-cmd --zone=public --remove-service=dhcpv6-client --permanent\nfirewall-cmd --zone=public --remove-service=cockpit --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-service=dhcpv6-client --remove-service=cockpit --permanent\n```\n\n## 添加端口\n\n```\nfirewall-cmd --zone=public --add-port=22222/tcp --permanent\nfirewall-cmd --zone=public --add-port=22223/udp --permanent\nfirewall-cmd --zone=public --add-port=22224-22229/tcp --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-port=22222/tcp --add-port=22223/udp --add-port=22224-22229/tcp --permanent\n```\n\n其中的tcp和udp是协议。\n\n## 移除端口\n\n```\nfirewall-cmd --zone=public --remove-port=22222/tcp --permanent\nfirewall-cmd --zone=public --remove-port=22223/udp --permanent\nfirewall-cmd --zone=public --remove-port=22224-22229/tcp --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-port=22222/tcp --remove-port=22223/udp --remove-port=22224-22229/tcp --permanent\n```\n\n## 添加来源\n\n可以是IP地址，也可以是IP地址范围\n\n```\nfirewall-cmd --zone=public --add-source=10.10.10.1 --permanent\nfirewall-cmd --zone=public --add-source=10.10.10.0/24 --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-source=10.10.10.1 --add-source=10.10.10.0/24 --permanent\n```\n\n## 移除来源\n\n```\nfirewall-cmd --zone=public --remove-source=10.10.10.1 --permanent\nfirewall-cmd --zone=public --remove-source=10.10.10.0/24 --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-source=10.10.10.1 --remove-source=10.10.10.0/24 --permanent\n```\n\n## 添加端口转发\n\n```\n//将tcp协议流量从8080端口转发到内部的22222端口（同一机器）\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222\" --permanent\n//将tcp协议流量从8080端口转发到外部的22222端口（不同机器，转发到10.10.10.2，需要先开启masquerade，伪装流量）\nfirewall-cmd --zone=public --add-masquerade --permanent\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2\" --permanent\n```\n\n## 移除端口转发\n\n```\n//对应上面的同一机器转发\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222\" --permanent\n//对应上面的不同机器转发\nfirewall-cmd --zone=public --remove-forward-port=\"port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2\" --permanent\nfirewall-cmd --zone=public --remove-masquerade --permanent\n```\n\n## ipset\n\n```\n//新增一个名称为leochan，hash:ip类型的ipset\nfirewall-cmd --permanent --new-ipset=leochan --type='hash:ip'\n//新增一个名称为leochan，hash:ip类型的ipset，IP是ipv6\nfirewall-cmd --permanent --new-ipset=leochan --type='hash:ip' --option='family=inet6'\n//查看ipset支持的类型\nfirewall-cmd --get-ipset-types\n//移除掉名称为leochan的ipset\nfirewall-cmd --permanent --delete-ipset=leochan\n//显示名称为leochan的ipset对应的文件\nfirewall-cmd --permanent --path-ipset=leochan\n//往名称为leochan的ipset添加10.10.10.10\nfirewall-cmd --permanent --ipset=leochan --add-entry=10.10.10.10\n//从名称为leochan的ipset移除10.10.10.10\nfirewall-cmd --permanent --ipset=leochan --remove-entry=10.10.10.10\n//在名称为leochan的ipset查询10.10.10.10是否存在其中\nfirewall-cmd --permanent --ipset=leochan --query-entry=10.10.10.10\n```\n\nipset类型说明\n\nhash:ip 可以存储IP地址\nhash:ip,mark 可以存储IP地址和网络掩码对\nhash:ip,port 可以存储IP地址和端口号对\nhash:ip,port,ip 可以存储IP地址、端口号和IP地址三元组\nhash:ip,port,net 可以存储IP地址、端口号和网络号三元组\nhash:mac 可以存储MAC地址\nhash:net 可以存储网络号\nhash:net,iface 可以存储网络号和网络接口对\nhash:net,net 可以存储网络号和网络号对\nhash:net,port 可以存储网络号和端口号对\nhash:net,port,net 可以存储网络号、端口号和网络号三元组\n\n## 添加富规则\n\n注意不同机器端口转发前，必须启用流量伪装\n\n```\nfirewall-cmd --zone=public --add-masquerade --permanent\n```\n\n```\n//允许来自10.10.10.10的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" accept' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//拒绝来自10.10.10.10请求22222端口tcp协议的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到22223端口（同一机器内转发）\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" accept' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到10.10.10.3的22223端口（不同机器内转发）\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" to-addr=\"10.10.10.3\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端访问ssh服务\nfirewall-cmd --zone=public --add-rich-rule='rule source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端，通过ipv4访问ssh服务\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//允许存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//阻止存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n```\n\n## 移除富规则\n\n下面的移除命令和上面的添加命令一一对应\n\n```\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" to-addr=\"10.10.10.3\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n```\n\n## 结束语\n\n富规则里面的accept可以不填写，不填写的情况下默认通过。reject可以替换成drop，区别在于reject规范，可以便于诊断和调试网络/防火墙所产生的问题。ipset可以配合定时任务添加或者删除黑名单的IP、MAC等。","source":"_posts/Firewalld的最常见用法.md","raw":"---\ntitle: Firewalld的最常见用法\ndate: 2022-05-22 02:37:38\ntags: \n  - Firewalld\n  - 防火墙\n  - ipset\n  - 网络安全\ncategories:\n  - 技术\nphotos:\n  - \"/images/9644d159a79fb11b4a8416cc72a1bdc44fcb718c-fp-2000-500-0-0.jpeg\"\nurl: the-most-common-usage-firewalld\ndescription: 7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。\n---\n\n> 7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。这里以centos8为例子，说一说一些Firewalld用法。\n\n## 启用Firewalld\n\n默认情况下，centos8的Firewalld的服务是处于屏蔽状态。我们需要先将Firewalld服务解除屏蔽，再启用相关服务，最后启动服务。\n\n```\nsystemctl unmask firewalld.service\nsystemctl enable firewalld.service\nsystemctl start firewalld.service\n```\n\n## 查看Firewalld运行状态\n\n```\nfirewall-cmd --state\n```\n\n如果显示“running”，说明Firewalld已经启动。\n\n## 查看Firewalld激活区域\n\n```\nfirewall-cmd --get-active-zone\n```\n\n默认启用了public区域，接下来的例子都是以public区域为例子。\n\n## 添加服务\n\n默认情况下，没有添加http和https服务，所以网站无法正常访问。所以，我们需要手动添加http和https服务。可以一条条地添加，也可以批量添加。\n\n```\nfirewall-cmd --zone=public --add-service=http --permanent\nfirewall-cmd --zone=public --add-service=https --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-service=http --add-service=https --permanent\n```\n\n## 移除服务\n\nipv6 DHCP服务一开始就被添加到服务里面。一般都不需要，可以通过下面的命令移除。还有cockpit，是一个监控软件，也可以删除。\n\n```\nfirewall-cmd --zone=public --remove-service=dhcpv6-client --permanent\nfirewall-cmd --zone=public --remove-service=cockpit --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-service=dhcpv6-client --remove-service=cockpit --permanent\n```\n\n## 添加端口\n\n```\nfirewall-cmd --zone=public --add-port=22222/tcp --permanent\nfirewall-cmd --zone=public --add-port=22223/udp --permanent\nfirewall-cmd --zone=public --add-port=22224-22229/tcp --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-port=22222/tcp --add-port=22223/udp --add-port=22224-22229/tcp --permanent\n```\n\n其中的tcp和udp是协议。\n\n## 移除端口\n\n```\nfirewall-cmd --zone=public --remove-port=22222/tcp --permanent\nfirewall-cmd --zone=public --remove-port=22223/udp --permanent\nfirewall-cmd --zone=public --remove-port=22224-22229/tcp --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-port=22222/tcp --remove-port=22223/udp --remove-port=22224-22229/tcp --permanent\n```\n\n## 添加来源\n\n可以是IP地址，也可以是IP地址范围\n\n```\nfirewall-cmd --zone=public --add-source=10.10.10.1 --permanent\nfirewall-cmd --zone=public --add-source=10.10.10.0/24 --permanent\n//可以批量添加\nfirewall-cmd --zone=public --add-source=10.10.10.1 --add-source=10.10.10.0/24 --permanent\n```\n\n## 移除来源\n\n```\nfirewall-cmd --zone=public --remove-source=10.10.10.1 --permanent\nfirewall-cmd --zone=public --remove-source=10.10.10.0/24 --permanent\n//可以批量移除\nfirewall-cmd --zone=public --remove-source=10.10.10.1 --remove-source=10.10.10.0/24 --permanent\n```\n\n## 添加端口转发\n\n```\n//将tcp协议流量从8080端口转发到内部的22222端口（同一机器）\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222\" --permanent\n//将tcp协议流量从8080端口转发到外部的22222端口（不同机器，转发到10.10.10.2，需要先开启masquerade，伪装流量）\nfirewall-cmd --zone=public --add-masquerade --permanent\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2\" --permanent\n```\n\n## 移除端口转发\n\n```\n//对应上面的同一机器转发\nfirewall-cmd --zone=public --add-forward-port=\"port=8080:proto=tcp:toport=22222\" --permanent\n//对应上面的不同机器转发\nfirewall-cmd --zone=public --remove-forward-port=\"port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2\" --permanent\nfirewall-cmd --zone=public --remove-masquerade --permanent\n```\n\n## ipset\n\n```\n//新增一个名称为leochan，hash:ip类型的ipset\nfirewall-cmd --permanent --new-ipset=leochan --type='hash:ip'\n//新增一个名称为leochan，hash:ip类型的ipset，IP是ipv6\nfirewall-cmd --permanent --new-ipset=leochan --type='hash:ip' --option='family=inet6'\n//查看ipset支持的类型\nfirewall-cmd --get-ipset-types\n//移除掉名称为leochan的ipset\nfirewall-cmd --permanent --delete-ipset=leochan\n//显示名称为leochan的ipset对应的文件\nfirewall-cmd --permanent --path-ipset=leochan\n//往名称为leochan的ipset添加10.10.10.10\nfirewall-cmd --permanent --ipset=leochan --add-entry=10.10.10.10\n//从名称为leochan的ipset移除10.10.10.10\nfirewall-cmd --permanent --ipset=leochan --remove-entry=10.10.10.10\n//在名称为leochan的ipset查询10.10.10.10是否存在其中\nfirewall-cmd --permanent --ipset=leochan --query-entry=10.10.10.10\n```\n\nipset类型说明\n\nhash:ip 可以存储IP地址\nhash:ip,mark 可以存储IP地址和网络掩码对\nhash:ip,port 可以存储IP地址和端口号对\nhash:ip,port,ip 可以存储IP地址、端口号和IP地址三元组\nhash:ip,port,net 可以存储IP地址、端口号和网络号三元组\nhash:mac 可以存储MAC地址\nhash:net 可以存储网络号\nhash:net,iface 可以存储网络号和网络接口对\nhash:net,net 可以存储网络号和网络号对\nhash:net,port 可以存储网络号和端口号对\nhash:net,port,net 可以存储网络号、端口号和网络号三元组\n\n## 添加富规则\n\n注意不同机器端口转发前，必须启用流量伪装\n\n```\nfirewall-cmd --zone=public --add-masquerade --permanent\n```\n\n```\n//允许来自10.10.10.10的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" accept' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//拒绝来自10.10.10.10请求22222端口tcp协议的ipv4流量\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到22223端口（同一机器内转发）\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" accept' --permanent\n//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到10.10.10.3的22223端口（不同机器内转发）\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" to-addr=\"10.10.10.3\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端访问ssh服务\nfirewall-cmd --zone=public --add-rich-rule='rule source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端，通过ipv4访问ssh服务\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//允许从mac为00:11:22:33:44:55的客户端，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//允许存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\n//阻止存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议\nfirewall-cmd --zone=public --add-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n```\n\n## 移除富规则\n\n下面的移除命令和上面的添加命令一一对应\n\n```\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source address=\"10.10.10.10\" forward-port port=\"22222\" protocol=\"tcp\" to-port=\"22223\" to-addr=\"10.10.10.3\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" service name=\"ssh\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source mac=\"00:11:22:33:44:55\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" accept' --permanent\nfirewall-cmd --zone=public --remove-rich-rule='rule family=\"ipv4\" source ipset=\"leochan\" port port=\"22222\" protocol=\"tcp\" reject' --permanent\n```\n\n## 结束语\n\n富规则里面的accept可以不填写，不填写的情况下默认通过。reject可以替换成drop，区别在于reject规范，可以便于诊断和调试网络/防火墙所产生的问题。ipset可以配合定时任务添加或者删除黑名单的IP、MAC等。","slug":"Firewalld的最常见用法","published":1,"updated":"2022-05-22T05:45:18.560Z","comments":1,"layout":"post","link":"","_id":"cl3in6atx0004lvtdcle9f4b9","content":"<blockquote>\n<p>7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。这里以centos8为例子，说一说一些Firewalld用法。</p>\n</blockquote>\n<h2 id=\"启用Firewalld\"><a href=\"#启用Firewalld\" class=\"headerlink\" title=\"启用Firewalld\"></a>启用Firewalld</h2><p>默认情况下，centos8的Firewalld的服务是处于屏蔽状态。我们需要先将Firewalld服务解除屏蔽，再启用相关服务，最后启动服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl unmask firewalld.service</span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看Firewalld运行状态\"><a href=\"#查看Firewalld运行状态\" class=\"headerlink\" title=\"查看Firewalld运行状态\"></a>查看Firewalld运行状态</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --state</span><br></pre></td></tr></table></figure>\n\n<p>如果显示“running”，说明Firewalld已经启动。</p>\n<h2 id=\"查看Firewalld激活区域\"><a href=\"#查看Firewalld激活区域\" class=\"headerlink\" title=\"查看Firewalld激活区域\"></a>查看Firewalld激活区域</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --get-active-zone</span><br></pre></td></tr></table></figure>\n\n<p>默认启用了public区域，接下来的例子都是以public区域为例子。</p>\n<h2 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h2><p>默认情况下，没有添加http和https服务，所以网站无法正常访问。所以，我们需要手动添加http和https服务。可以一条条地添加，也可以批量添加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-service=http --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-service=https --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-service=http --add-service=https --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除服务\"><a href=\"#移除服务\" class=\"headerlink\" title=\"移除服务\"></a>移除服务</h2><p>ipv6 DHCP服务一开始就被添加到服务里面。一般都不需要，可以通过下面的命令移除。还有cockpit，是一个监控软件，也可以删除。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-service=dhcpv6-client --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=cockpit --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=dhcpv6-client --remove-service=cockpit --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加端口\"><a href=\"#添加端口\" class=\"headerlink\" title=\"添加端口\"></a>添加端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=22222/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22223/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22224-22229/tcp --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22222/tcp --add-port=22223/udp --add-port=22224-22229/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<p>其中的tcp和udp是协议。</p>\n<h2 id=\"移除端口\"><a href=\"#移除端口\" class=\"headerlink\" title=\"移除端口\"></a>移除端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-port=22222/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22223/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22224-22229/tcp --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22222/tcp --remove-port=22223/udp --remove-port=22224-22229/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加来源\"><a href=\"#添加来源\" class=\"headerlink\" title=\"添加来源\"></a>添加来源</h2><p>可以是IP地址，也可以是IP地址范围</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.1 --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.0/24 --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.1 --add-source=10.10.10.0/24 --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除来源\"><a href=\"#移除来源\" class=\"headerlink\" title=\"移除来源\"></a>移除来源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.1 --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.0/24 --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.1 --remove-source=10.10.10.0/24 --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加端口转发\"><a href=\"#添加端口转发\" class=\"headerlink\" title=\"添加端口转发\"></a>添加端口转发</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将tcp协议流量从8080端口转发到内部的22222端口（同一机器）</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222&quot; --permanent</span><br><span class=\"line\">//将tcp协议流量从8080端口转发到外部的22222端口（不同机器，转发到10.10.10.2，需要先开启masquerade，伪装流量）</span><br><span class=\"line\">firewall-cmd --zone=public --add-masquerade --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2&quot; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除端口转发\"><a href=\"#移除端口转发\" class=\"headerlink\" title=\"移除端口转发\"></a>移除端口转发</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对应上面的同一机器转发</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222&quot; --permanent</span><br><span class=\"line\">//对应上面的不同机器转发</span><br><span class=\"line\">firewall-cmd --zone=public --remove-forward-port=&quot;port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2&quot; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-masquerade --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ipset\"><a href=\"#ipset\" class=\"headerlink\" title=\"ipset\"></a>ipset</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增一个名称为leochan，hash:ip类型的ipset</span><br><span class=\"line\">firewall-cmd --permanent --new-ipset=leochan --type=&#x27;hash:ip&#x27;</span><br><span class=\"line\">//新增一个名称为leochan，hash:ip类型的ipset，IP是ipv6</span><br><span class=\"line\">firewall-cmd --permanent --new-ipset=leochan --type=&#x27;hash:ip&#x27; --option=&#x27;family=inet6&#x27;</span><br><span class=\"line\">//查看ipset支持的类型</span><br><span class=\"line\">firewall-cmd --get-ipset-types</span><br><span class=\"line\">//移除掉名称为leochan的ipset</span><br><span class=\"line\">firewall-cmd --permanent --delete-ipset=leochan</span><br><span class=\"line\">//显示名称为leochan的ipset对应的文件</span><br><span class=\"line\">firewall-cmd --permanent --path-ipset=leochan</span><br><span class=\"line\">//往名称为leochan的ipset添加10.10.10.10</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --add-entry=10.10.10.10</span><br><span class=\"line\">//从名称为leochan的ipset移除10.10.10.10</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --remove-entry=10.10.10.10</span><br><span class=\"line\">//在名称为leochan的ipset查询10.10.10.10是否存在其中</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --query-entry=10.10.10.10</span><br></pre></td></tr></table></figure>\n\n<p>ipset类型说明</p>\n<p>hash:ip 可以存储IP地址<br>hash:ip,mark 可以存储IP地址和网络掩码对<br>hash:ip,port 可以存储IP地址和端口号对<br>hash:ip,port,ip 可以存储IP地址、端口号和IP地址三元组<br>hash:ip,port,net 可以存储IP地址、端口号和网络号三元组<br>hash:mac 可以存储MAC地址<br>hash:net 可以存储网络号<br>hash:net,iface 可以存储网络号和网络接口对<br>hash:net,net 可以存储网络号和网络号对<br>hash:net,port 可以存储网络号和端口号对<br>hash:net,port,net 可以存储网络号、端口号和网络号三元组</p>\n<h2 id=\"添加富规则\"><a href=\"#添加富规则\" class=\"headerlink\" title=\"添加富规则\"></a>添加富规则</h2><p>注意不同机器端口转发前，必须启用流量伪装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-masquerade --permanent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//允许来自10.10.10.10的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//拒绝来自10.10.10.10请求22222端口tcp协议的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到22223端口（同一机器内转发）</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到10.10.10.3的22223端口（不同机器内转发）</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; to-addr=&quot;10.10.10.3&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端访问ssh服务</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端，通过ipv4访问ssh服务</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//阻止存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除富规则\"><a href=\"#移除富规则\" class=\"headerlink\" title=\"移除富规则\"></a>移除富规则</h2><p>下面的移除命令和上面的添加命令一一对应</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; to-addr=&quot;10.10.10.3&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>富规则里面的accept可以不填写，不填写的情况下默认通过。reject可以替换成drop，区别在于reject规范，可以便于诊断和调试网络&#x2F;防火墙所产生的问题。ipset可以配合定时任务添加或者删除黑名单的IP、MAC等。</p>\n","site":{"data":{}},"length":8608,"excerpt":"","more":"<blockquote>\n<p>7.0之后，centos自带Firewalld作为默认的防火墙软件。而常见的Linux服务器操作系统里面也有不小比例的发行版本也自带了Firewalld作为防火墙软件。所以呢，对Firewalld有些基本了解还是需要的。这里以centos8为例子，说一说一些Firewalld用法。</p>\n</blockquote>\n<h2 id=\"启用Firewalld\"><a href=\"#启用Firewalld\" class=\"headerlink\" title=\"启用Firewalld\"></a>启用Firewalld</h2><p>默认情况下，centos8的Firewalld的服务是处于屏蔽状态。我们需要先将Firewalld服务解除屏蔽，再启用相关服务，最后启动服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl unmask firewalld.service</span><br><span class=\"line\">systemctl enable firewalld.service</span><br><span class=\"line\">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看Firewalld运行状态\"><a href=\"#查看Firewalld运行状态\" class=\"headerlink\" title=\"查看Firewalld运行状态\"></a>查看Firewalld运行状态</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --state</span><br></pre></td></tr></table></figure>\n\n<p>如果显示“running”，说明Firewalld已经启动。</p>\n<h2 id=\"查看Firewalld激活区域\"><a href=\"#查看Firewalld激活区域\" class=\"headerlink\" title=\"查看Firewalld激活区域\"></a>查看Firewalld激活区域</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --get-active-zone</span><br></pre></td></tr></table></figure>\n\n<p>默认启用了public区域，接下来的例子都是以public区域为例子。</p>\n<h2 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h2><p>默认情况下，没有添加http和https服务，所以网站无法正常访问。所以，我们需要手动添加http和https服务。可以一条条地添加，也可以批量添加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-service=http --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-service=https --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-service=http --add-service=https --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除服务\"><a href=\"#移除服务\" class=\"headerlink\" title=\"移除服务\"></a>移除服务</h2><p>ipv6 DHCP服务一开始就被添加到服务里面。一般都不需要，可以通过下面的命令移除。还有cockpit，是一个监控软件，也可以删除。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-service=dhcpv6-client --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=cockpit --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-service=dhcpv6-client --remove-service=cockpit --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加端口\"><a href=\"#添加端口\" class=\"headerlink\" title=\"添加端口\"></a>添加端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=22222/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22223/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22224-22229/tcp --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=22222/tcp --add-port=22223/udp --add-port=22224-22229/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<p>其中的tcp和udp是协议。</p>\n<h2 id=\"移除端口\"><a href=\"#移除端口\" class=\"headerlink\" title=\"移除端口\"></a>移除端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-port=22222/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22223/udp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22224-22229/tcp --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-port=22222/tcp --remove-port=22223/udp --remove-port=22224-22229/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加来源\"><a href=\"#添加来源\" class=\"headerlink\" title=\"添加来源\"></a>添加来源</h2><p>可以是IP地址，也可以是IP地址范围</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.1 --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.0/24 --permanent</span><br><span class=\"line\">//可以批量添加</span><br><span class=\"line\">firewall-cmd --zone=public --add-source=10.10.10.1 --add-source=10.10.10.0/24 --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除来源\"><a href=\"#移除来源\" class=\"headerlink\" title=\"移除来源\"></a>移除来源</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.1 --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.0/24 --permanent</span><br><span class=\"line\">//可以批量移除</span><br><span class=\"line\">firewall-cmd --zone=public --remove-source=10.10.10.1 --remove-source=10.10.10.0/24 --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加端口转发\"><a href=\"#添加端口转发\" class=\"headerlink\" title=\"添加端口转发\"></a>添加端口转发</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将tcp协议流量从8080端口转发到内部的22222端口（同一机器）</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222&quot; --permanent</span><br><span class=\"line\">//将tcp协议流量从8080端口转发到外部的22222端口（不同机器，转发到10.10.10.2，需要先开启masquerade，伪装流量）</span><br><span class=\"line\">firewall-cmd --zone=public --add-masquerade --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2&quot; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除端口转发\"><a href=\"#移除端口转发\" class=\"headerlink\" title=\"移除端口转发\"></a>移除端口转发</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对应上面的同一机器转发</span><br><span class=\"line\">firewall-cmd --zone=public --add-forward-port=&quot;port=8080:proto=tcp:toport=22222&quot; --permanent</span><br><span class=\"line\">//对应上面的不同机器转发</span><br><span class=\"line\">firewall-cmd --zone=public --remove-forward-port=&quot;port=8080:proto=tcp:toport=22222:toaddr=10.10.10.2&quot; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-masquerade --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ipset\"><a href=\"#ipset\" class=\"headerlink\" title=\"ipset\"></a>ipset</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增一个名称为leochan，hash:ip类型的ipset</span><br><span class=\"line\">firewall-cmd --permanent --new-ipset=leochan --type=&#x27;hash:ip&#x27;</span><br><span class=\"line\">//新增一个名称为leochan，hash:ip类型的ipset，IP是ipv6</span><br><span class=\"line\">firewall-cmd --permanent --new-ipset=leochan --type=&#x27;hash:ip&#x27; --option=&#x27;family=inet6&#x27;</span><br><span class=\"line\">//查看ipset支持的类型</span><br><span class=\"line\">firewall-cmd --get-ipset-types</span><br><span class=\"line\">//移除掉名称为leochan的ipset</span><br><span class=\"line\">firewall-cmd --permanent --delete-ipset=leochan</span><br><span class=\"line\">//显示名称为leochan的ipset对应的文件</span><br><span class=\"line\">firewall-cmd --permanent --path-ipset=leochan</span><br><span class=\"line\">//往名称为leochan的ipset添加10.10.10.10</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --add-entry=10.10.10.10</span><br><span class=\"line\">//从名称为leochan的ipset移除10.10.10.10</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --remove-entry=10.10.10.10</span><br><span class=\"line\">//在名称为leochan的ipset查询10.10.10.10是否存在其中</span><br><span class=\"line\">firewall-cmd --permanent --ipset=leochan --query-entry=10.10.10.10</span><br></pre></td></tr></table></figure>\n\n<p>ipset类型说明</p>\n<p>hash:ip 可以存储IP地址<br>hash:ip,mark 可以存储IP地址和网络掩码对<br>hash:ip,port 可以存储IP地址和端口号对<br>hash:ip,port,ip 可以存储IP地址、端口号和IP地址三元组<br>hash:ip,port,net 可以存储IP地址、端口号和网络号三元组<br>hash:mac 可以存储MAC地址<br>hash:net 可以存储网络号<br>hash:net,iface 可以存储网络号和网络接口对<br>hash:net,net 可以存储网络号和网络号对<br>hash:net,port 可以存储网络号和端口号对<br>hash:net,port,net 可以存储网络号、端口号和网络号三元组</p>\n<h2 id=\"添加富规则\"><a href=\"#添加富规则\" class=\"headerlink\" title=\"添加富规则\"></a>添加富规则</h2><p>注意不同机器端口转发前，必须启用流量伪装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-masquerade --permanent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//允许来自10.10.10.10的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//拒绝来自10.10.10.10请求22222端口tcp协议的ipv4流量</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到22223端口（同一机器内转发）</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许来自10.10.10.10请求22222端口tcp协议的ipv4流量，并将其转发到10.10.10.3的22223端口（不同机器内转发）</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; to-addr=&quot;10.10.10.3&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端访问ssh服务</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端，通过ipv4访问ssh服务</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许从mac为00:11:22:33:44:55的客户端，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//允许存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">//阻止存储在名称为leochan的ipset里面的机器，通过ipv4请求22222端口tcp协议</span><br><span class=\"line\">firewall-cmd --zone=public --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移除富规则\"><a href=\"#移除富规则\" class=\"headerlink\" title=\"移除富规则\"></a>移除富规则</h2><p>下面的移除命令和上面的添加命令一一对应</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.10.10.10&quot; forward-port port=&quot;22222&quot; protocol=&quot;tcp&quot; to-port=&quot;22223&quot; to-addr=&quot;10.10.10.3&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; service name=&quot;ssh&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source mac=&quot;00:11:22:33:44:55&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; accept&#x27; --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --remove-rich-rule=&#x27;rule family=&quot;ipv4&quot; source ipset=&quot;leochan&quot; port port=&quot;22222&quot; protocol=&quot;tcp&quot; reject&#x27; --permanent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>富规则里面的accept可以不填写，不填写的情况下默认通过。reject可以替换成drop，区别在于reject规范，可以便于诊断和调试网络&#x2F;防火墙所产生的问题。ipset可以配合定时任务添加或者删除黑名单的IP、MAC等。</p>\n"},{"title":"Linux上用supervisor守护进程","date":"2018-06-01T23:53:00.000Z","url":"run-daemon-process-with-supervisor-on-linux","description":"很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！","_content":"\n> 很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！\n\n\n## 环境说明\n\n我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。\n\n## 安装supervisor\n\n按照官网说明，安装supervisor可以通过四种方式安装。简单说明一下，请客官们自己选择最适合自己的安装方式！\n\n### 联网使用setuptools安装\n\n联网情况下使用setuptools安装。这里用到的是easy_install。easy_install\n是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python包。当然了，安装了setuptools和联网都是必备条件！\n\n```\neasy_install supervisor\n```\n\n### 联网不用setuptools安装\n\n首先需要下载supervisor的源码包。supervisor在pypi上的托管地址是pypi.python.org/pypi/supervisor\n。当然了，也可以从其他渠道获取supervisor源码包。下载完成后，解压安装。\n\n```\nwget https://files.pythonhosted.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz\ntar xzf supervisor-3.3.4.tar.gz\ncd supervisor*\npython setup.py install\n```\n\n### 无网络情况下安装\n\n有些Linux发行版会自带supervisor分发包，虽然这些supervisor的版本可能远低于官网的。不过，聊胜于无，也是没办法的情况下的方式。首先需要确定的是有没有携带supervisor包，直接启动使用即可！\n\n```\nyum info supervisor\n```\n\n如果是ubuntu\n\n```\napt-cache show supervisor\n```\n\n如果确定有，可直接通过supervisord尝试启动！\n\n### pip安装方式\n\npip是一个python的软件包管理系统，使用起来是非常666的！\n\n```\npip install supervisor\n```\n\n## 生成配置\n\nsupervisor提供了一个很好的工具echo_supervisord_conf来初始化配置。\n\n```\necho_supervisord_conf > /etc/supervisord.conf\n```\n\n如果执行上面的命令没有反应或者报错，请尝试使用root账号或者sudo权限尝试！如果使用了root账号或者sudo权限还是不行，可更换配置文件目录！\n\n## 组件\n\nsupervisor提供了supervisord和supervisorctl两个可执行程序。supervisord负责管理我们添加上去的程序。按其说法是，supervisord是把我们添加上去的程序以子进程形式运行管理的。而supervisorctl负责调度supervisord。\n\n启动supervisord\n\n```\nsupervisord\n```\n\nsupervisord的配置默认存放路径是/etc/supervisord.conf。如果在生成配置的时候，修改了配置路径，就需要通过-c命令行参数指定配置文件路径。\n\n```\nsupervisord -c supervisord.conf\n```\n\nsupervisord命令行参数\n参数参数说明-c FILE, --configuration=FILE指定supervisor配置文件路径，FILE是配置文件绝对路径-n,\n--nodaemon前台运行，不以守护方式运行-h, --help显示帮助信息-u USER,\n--user=USER指定运行用户，Unix用户名或者用户ID-m OCTAL, --umask=OCTAL掩码-d PATH,\n--directory=PATH当supervisord以daemon（守护进程）方式运行时候，在守护进程之前会切换到这个目录-l FILE,\n--logfile=FILE指定supervisord活动日志的绝对路径-y BYTES,\n--logfile_maxbytes=BYTES指定日志切割大小，可携带单位，例如1MB或者1GB-y NUM,\n--logfile_backups=NUM保留日志数量，多出的部分将会被清除-e LEVEL, --loglevel=LEVEL日志级别，可选的有trace,\ndebug, info, warn, error以及critical-j FILE,\n--pidfile=FILE指定PID文件绝对路径，daemon运行程序时候会自动创建-i STRING,\n--identifier=STRING指定一个标识符，标注实例-q PATH,\n--childlogdir=PATH指定子进程的默认日志目录，目录必须已经存在-k, --nocleanup终端退出时候，不退出supervisord-a\nNUM, --minfds=NUM指定最小的文件描述符数量-t, --strip_ansi从所有子日志进程中剥离ANSI转义序列-v,\n--version输出supervisord版本号--profile_options=LIST性能分析器，可支持的有cumulative, calls,\ncallers，可同时支持多个，用半角逗号隔开--minprocs=NUM最小的进程数量\n\nsupervisorctl使用\nsupervisorctl执行的命令都是一次性的，没有可持续性。可以把supervisorctl当成类似于systemctl的一个工具，但又不尽相同。\n\nsupervisorctl命令行参数\n参数参数说明-c, --configuration指定配置文件路径，后面必须加上文件的绝对路径-h, --help显示帮助信息-i,\n--interactive交互模式-s, --serverurl URL指定supervisord服务器地址，默认是\nhttp://localhost:9001-u, --username指定supervisord用户名-p,\n--password指定supervisord用户密码-r, --history-file保存readline历史文件（readline可用的前提下）\n\n上面的配置是临时性地指定supervisord配置，可以用在一些临时情况下。例如，想尝试用另一个配置运行supervisord测试。\n\nsupervisorct子命令（action）\n命令命令说明help显示所有可用的子命令help 显示某一个子命令的帮助信息add  [...]更新某一个进程/分组的配置文件remove\n [...]移除某一个进程/分组的配置文件update重载配置文件，然后增删变更的配置（可能会重启程序）clear 清除某个进程的日志clear\n 清除多个进程的日志clear all清除所有进程的日志fg 前台模式连接某个进程，按CTRL+C退出前台模式pid获取supervisord的进程IDpid\n获取某个子进程的进程IDpid all获取所有子进程的进程ID，一行一个reread重载daemon配置文件，不会添加/移除配置信息（也不会重启）restart\n重启某个进程，不会自动读取最新配置，必须先通过update/reread处理restart :*重启某个分组的所有进程restart\n 重启多个进程，或者多个分组对应的所有进程restart all重启全部进程signal信号start 启动某个进程start\n:*启动某个分组的所有进程start  启动多个进程，或者多个分组对应的所有进程start all启动所有进程status获取所有进程信息status\n获取某个进程信息status  获取多个进程信息stop 停止某个进程stop :*停止某个分组的所有进程stop  停止多个进程stop\nall停止所有进程tail [-f]  [stdout/stderr]实时输出某个进程日志\n\n## 守护supervisord进程\n\n官方提供了守护进程例子托管在github上面，地址是https://github.com/Supervisor/initscripts\n\n```\n[Unit]\nDescription=Supervisor daemon\n[Service]\nType=forking\nExecStart=/usr/bin/supervisord -c /etc/supervisord.conf\nExecStop=/usr/bin/supervisorctl $OPTIONS shutdown\nExecReload=/usr/bin/supervisorctl $OPTIONS reload\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n[Install]\nWantedBy=multi-user.target\n```\n\n上面的是centos的systemctl守护进程服务脚本。\n\n## supervisord配置文件说明\n\nsupervisor配置文件会分成几个部分，每个部分都是用[]区分\n\n```\n[unix_http_server]\nfile=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用\n;chmod=0700                 ;socket文件的mode，默认是0700\n;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid\n\n;[inet_http_server]         ;HTTP服务器，提供web管理界面\n;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性\n;username=user              ;登录管理后台的用户名\n;password=123               ;登录管理后台的密码\n\n[supervisord]\nlogfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log\nlogfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小\nlogfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份\nloglevel=info                ;日志级别，默认info，其它: debug,warn,trace\npidfile=/tmp/supervisord.pid ;pid 文件\nnodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动\nminfds=1024                  ;可以打开的文件描述符的最小值，默认 1024\nminprocs=200                 ;可以打开的进程数的最小值，默认 200\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致\n;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord\n\n; [program:xx]是被管理的进程配置参数，xx是进程的名称\n[program:xx]\ncommand=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令\nautostart=true       ; 在supervisord启动的时候也自动启动\nstartsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\nautorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启\nstartretries=3       ; 启动失败自动重试次数，默认是3\nuser=tomcat          ; 用哪个用户启动进程，默认是root\npriority=999         ; 进程启动优先级，默认999，值小的优先启动\nredirect_stderr=true ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB\nstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out\nstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\nkillasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程\n\n;[eventlistener:theeventlistenername] ;侦听器\n;command=/bin/eventlistener    ; 侦听器路径\n;process_name=%(program_name)s ; 进程名称\n;numprocs=1                    ; 进程初始化数量\n;events=EVENT                  ; 订阅的事件类型\n;buffer_size=10                ; 事件缓冲大小\n;directory=/tmp                ; exec之前要打开的目录\n;umask=022                     ; 进程掩码\n;priority=-1                   ; 启动优先权\n;autostart=true                ; 是否跟随supervisord启动\n;startsecs=1                   ; # 判断启动成功需要的侦听时间长度\n;startretries=3                ; 最大尝试启动次数\n;autorestart=unexpected        ; 自动重启情况（正常退出也会重启）\n;exitcodes=0,2                 ; 'expected'（异常）退出码\n;stopsignal=QUIT               ; 停止信号\n;stopwaitsecs=10               ; 停止前等待时长\n;stopasgroup=false             ; 发送停止信号给进程组\n;killasgroup=false             ; 停止进程组信号\n;user=chrism                   ; 运行侦听器用户\n;redirect_stderr=false         ; redirect_stderr=true时不使用侦听器\n;stdout_logfile=/a/path        ; stdout日志路径，默认AUTO\n;stdout_logfile_maxbytes=1MB   ;  logfile切割大小，默认最大50MB\n;stdout_logfile_backups=10     ;  stdout保留日志数量\n;stdout_events_enabled=false   ; stdout写日志时候广播\n;stderr_logfile=/a/path        ; stderr日志路径，默认AUTO\n;stderr_logfile_maxbytes=1MB   ; logfile切割大小，默认最大50MB\n;stderr_logfile_backups=10     ; stderr保留日志数量\n;stderr_events_enabled=false   ; stderr写入时广播事件\n;environment=A=\"1\",B=\"2\"       ; 进程环境附加参数\n;serverurl=AUTO                ; 覆盖前面的serverurl\n\n;[group:thegroupname] ;分组\n;programs=progname1,progname2  ; 分组里面的程序名，用半角逗号隔开\n;priority=999                  ; 优先权限\n\n;包含其它配置文件,一般情况下，我们会新建一个目录来专门存放服务的配置文件，然后在此文件中将其include包含进来。\n[include]\nfiles = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件\n```","source":"_posts/Linux上用supervisor守护进程.md","raw":"---\ntitle: Linux上用supervisor守护进程\ndate: 2018-06-02 07:53:00\ntags: \n  - supervisor\n  - 守护进程\ncategories:\n  - 技术\nurl: run-daemon-process-with-supervisor-on-linux\ndescription: 很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！\n---\n\n> 很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！\n\n\n## 环境说明\n\n我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。\n\n## 安装supervisor\n\n按照官网说明，安装supervisor可以通过四种方式安装。简单说明一下，请客官们自己选择最适合自己的安装方式！\n\n### 联网使用setuptools安装\n\n联网情况下使用setuptools安装。这里用到的是easy_install。easy_install\n是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python包。当然了，安装了setuptools和联网都是必备条件！\n\n```\neasy_install supervisor\n```\n\n### 联网不用setuptools安装\n\n首先需要下载supervisor的源码包。supervisor在pypi上的托管地址是pypi.python.org/pypi/supervisor\n。当然了，也可以从其他渠道获取supervisor源码包。下载完成后，解压安装。\n\n```\nwget https://files.pythonhosted.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz\ntar xzf supervisor-3.3.4.tar.gz\ncd supervisor*\npython setup.py install\n```\n\n### 无网络情况下安装\n\n有些Linux发行版会自带supervisor分发包，虽然这些supervisor的版本可能远低于官网的。不过，聊胜于无，也是没办法的情况下的方式。首先需要确定的是有没有携带supervisor包，直接启动使用即可！\n\n```\nyum info supervisor\n```\n\n如果是ubuntu\n\n```\napt-cache show supervisor\n```\n\n如果确定有，可直接通过supervisord尝试启动！\n\n### pip安装方式\n\npip是一个python的软件包管理系统，使用起来是非常666的！\n\n```\npip install supervisor\n```\n\n## 生成配置\n\nsupervisor提供了一个很好的工具echo_supervisord_conf来初始化配置。\n\n```\necho_supervisord_conf > /etc/supervisord.conf\n```\n\n如果执行上面的命令没有反应或者报错，请尝试使用root账号或者sudo权限尝试！如果使用了root账号或者sudo权限还是不行，可更换配置文件目录！\n\n## 组件\n\nsupervisor提供了supervisord和supervisorctl两个可执行程序。supervisord负责管理我们添加上去的程序。按其说法是，supervisord是把我们添加上去的程序以子进程形式运行管理的。而supervisorctl负责调度supervisord。\n\n启动supervisord\n\n```\nsupervisord\n```\n\nsupervisord的配置默认存放路径是/etc/supervisord.conf。如果在生成配置的时候，修改了配置路径，就需要通过-c命令行参数指定配置文件路径。\n\n```\nsupervisord -c supervisord.conf\n```\n\nsupervisord命令行参数\n参数参数说明-c FILE, --configuration=FILE指定supervisor配置文件路径，FILE是配置文件绝对路径-n,\n--nodaemon前台运行，不以守护方式运行-h, --help显示帮助信息-u USER,\n--user=USER指定运行用户，Unix用户名或者用户ID-m OCTAL, --umask=OCTAL掩码-d PATH,\n--directory=PATH当supervisord以daemon（守护进程）方式运行时候，在守护进程之前会切换到这个目录-l FILE,\n--logfile=FILE指定supervisord活动日志的绝对路径-y BYTES,\n--logfile_maxbytes=BYTES指定日志切割大小，可携带单位，例如1MB或者1GB-y NUM,\n--logfile_backups=NUM保留日志数量，多出的部分将会被清除-e LEVEL, --loglevel=LEVEL日志级别，可选的有trace,\ndebug, info, warn, error以及critical-j FILE,\n--pidfile=FILE指定PID文件绝对路径，daemon运行程序时候会自动创建-i STRING,\n--identifier=STRING指定一个标识符，标注实例-q PATH,\n--childlogdir=PATH指定子进程的默认日志目录，目录必须已经存在-k, --nocleanup终端退出时候，不退出supervisord-a\nNUM, --minfds=NUM指定最小的文件描述符数量-t, --strip_ansi从所有子日志进程中剥离ANSI转义序列-v,\n--version输出supervisord版本号--profile_options=LIST性能分析器，可支持的有cumulative, calls,\ncallers，可同时支持多个，用半角逗号隔开--minprocs=NUM最小的进程数量\n\nsupervisorctl使用\nsupervisorctl执行的命令都是一次性的，没有可持续性。可以把supervisorctl当成类似于systemctl的一个工具，但又不尽相同。\n\nsupervisorctl命令行参数\n参数参数说明-c, --configuration指定配置文件路径，后面必须加上文件的绝对路径-h, --help显示帮助信息-i,\n--interactive交互模式-s, --serverurl URL指定supervisord服务器地址，默认是\nhttp://localhost:9001-u, --username指定supervisord用户名-p,\n--password指定supervisord用户密码-r, --history-file保存readline历史文件（readline可用的前提下）\n\n上面的配置是临时性地指定supervisord配置，可以用在一些临时情况下。例如，想尝试用另一个配置运行supervisord测试。\n\nsupervisorct子命令（action）\n命令命令说明help显示所有可用的子命令help 显示某一个子命令的帮助信息add  [...]更新某一个进程/分组的配置文件remove\n [...]移除某一个进程/分组的配置文件update重载配置文件，然后增删变更的配置（可能会重启程序）clear 清除某个进程的日志clear\n 清除多个进程的日志clear all清除所有进程的日志fg 前台模式连接某个进程，按CTRL+C退出前台模式pid获取supervisord的进程IDpid\n获取某个子进程的进程IDpid all获取所有子进程的进程ID，一行一个reread重载daemon配置文件，不会添加/移除配置信息（也不会重启）restart\n重启某个进程，不会自动读取最新配置，必须先通过update/reread处理restart :*重启某个分组的所有进程restart\n 重启多个进程，或者多个分组对应的所有进程restart all重启全部进程signal信号start 启动某个进程start\n:*启动某个分组的所有进程start  启动多个进程，或者多个分组对应的所有进程start all启动所有进程status获取所有进程信息status\n获取某个进程信息status  获取多个进程信息stop 停止某个进程stop :*停止某个分组的所有进程stop  停止多个进程stop\nall停止所有进程tail [-f]  [stdout/stderr]实时输出某个进程日志\n\n## 守护supervisord进程\n\n官方提供了守护进程例子托管在github上面，地址是https://github.com/Supervisor/initscripts\n\n```\n[Unit]\nDescription=Supervisor daemon\n[Service]\nType=forking\nExecStart=/usr/bin/supervisord -c /etc/supervisord.conf\nExecStop=/usr/bin/supervisorctl $OPTIONS shutdown\nExecReload=/usr/bin/supervisorctl $OPTIONS reload\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n[Install]\nWantedBy=multi-user.target\n```\n\n上面的是centos的systemctl守护进程服务脚本。\n\n## supervisord配置文件说明\n\nsupervisor配置文件会分成几个部分，每个部分都是用[]区分\n\n```\n[unix_http_server]\nfile=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用\n;chmod=0700                 ;socket文件的mode，默认是0700\n;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid\n\n;[inet_http_server]         ;HTTP服务器，提供web管理界面\n;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性\n;username=user              ;登录管理后台的用户名\n;password=123               ;登录管理后台的密码\n\n[supervisord]\nlogfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log\nlogfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小\nlogfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份\nloglevel=info                ;日志级别，默认info，其它: debug,warn,trace\npidfile=/tmp/supervisord.pid ;pid 文件\nnodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动\nminfds=1024                  ;可以打开的文件描述符的最小值，默认 1024\nminprocs=200                 ;可以打开的进程数的最小值，默认 200\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致\n;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord\n\n; [program:xx]是被管理的进程配置参数，xx是进程的名称\n[program:xx]\ncommand=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令\nautostart=true       ; 在supervisord启动的时候也自动启动\nstartsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒\nautorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启\nstartretries=3       ; 启动失败自动重试次数，默认是3\nuser=tomcat          ; 用哪个用户启动进程，默认是root\npriority=999         ; 进程启动优先级，默认999，值小的优先启动\nredirect_stderr=true ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB\nstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out\nstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程\nkillasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程\n\n;[eventlistener:theeventlistenername] ;侦听器\n;command=/bin/eventlistener    ; 侦听器路径\n;process_name=%(program_name)s ; 进程名称\n;numprocs=1                    ; 进程初始化数量\n;events=EVENT                  ; 订阅的事件类型\n;buffer_size=10                ; 事件缓冲大小\n;directory=/tmp                ; exec之前要打开的目录\n;umask=022                     ; 进程掩码\n;priority=-1                   ; 启动优先权\n;autostart=true                ; 是否跟随supervisord启动\n;startsecs=1                   ; # 判断启动成功需要的侦听时间长度\n;startretries=3                ; 最大尝试启动次数\n;autorestart=unexpected        ; 自动重启情况（正常退出也会重启）\n;exitcodes=0,2                 ; 'expected'（异常）退出码\n;stopsignal=QUIT               ; 停止信号\n;stopwaitsecs=10               ; 停止前等待时长\n;stopasgroup=false             ; 发送停止信号给进程组\n;killasgroup=false             ; 停止进程组信号\n;user=chrism                   ; 运行侦听器用户\n;redirect_stderr=false         ; redirect_stderr=true时不使用侦听器\n;stdout_logfile=/a/path        ; stdout日志路径，默认AUTO\n;stdout_logfile_maxbytes=1MB   ;  logfile切割大小，默认最大50MB\n;stdout_logfile_backups=10     ;  stdout保留日志数量\n;stdout_events_enabled=false   ; stdout写日志时候广播\n;stderr_logfile=/a/path        ; stderr日志路径，默认AUTO\n;stderr_logfile_maxbytes=1MB   ; logfile切割大小，默认最大50MB\n;stderr_logfile_backups=10     ; stderr保留日志数量\n;stderr_events_enabled=false   ; stderr写入时广播事件\n;environment=A=\"1\",B=\"2\"       ; 进程环境附加参数\n;serverurl=AUTO                ; 覆盖前面的serverurl\n\n;[group:thegroupname] ;分组\n;programs=progname1,progname2  ; 分组里面的程序名，用半角逗号隔开\n;priority=999                  ; 优先权限\n\n;包含其它配置文件,一般情况下，我们会新建一个目录来专门存放服务的配置文件，然后在此文件中将其include包含进来。\n[include]\nfiles = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件\n```","slug":"Linux上用supervisor守护进程","published":1,"updated":"2022-05-12T17:08:01.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aty0005lvtd2d4l01yv","content":"<blockquote>\n<p>很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！</p>\n</blockquote>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。</p>\n<h2 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h2><p>按照官网说明，安装supervisor可以通过四种方式安装。简单说明一下，请客官们自己选择最适合自己的安装方式！</p>\n<h3 id=\"联网使用setuptools安装\"><a href=\"#联网使用setuptools安装\" class=\"headerlink\" title=\"联网使用setuptools安装\"></a>联网使用setuptools安装</h3><p>联网情况下使用setuptools安装。这里用到的是easy_install。easy_install<br>是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python包。当然了，安装了setuptools和联网都是必备条件！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easy_install supervisor</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联网不用setuptools安装\"><a href=\"#联网不用setuptools安装\" class=\"headerlink\" title=\"联网不用setuptools安装\"></a>联网不用setuptools安装</h3><p>首先需要下载supervisor的源码包。supervisor在pypi上的托管地址是pypi.python.org&#x2F;pypi&#x2F;supervisor<br>。当然了，也可以从其他渠道获取supervisor源码包。下载完成后，解压安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://files.pythonhosted.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz</span><br><span class=\"line\">tar xzf supervisor-3.3.4.tar.gz</span><br><span class=\"line\">cd supervisor*</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无网络情况下安装\"><a href=\"#无网络情况下安装\" class=\"headerlink\" title=\"无网络情况下安装\"></a>无网络情况下安装</h3><p>有些Linux发行版会自带supervisor分发包，虽然这些supervisor的版本可能远低于官网的。不过，聊胜于无，也是没办法的情况下的方式。首先需要确定的是有没有携带supervisor包，直接启动使用即可！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info supervisor</span><br></pre></td></tr></table></figure>\n\n<p>如果是ubuntu</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache show supervisor</span><br></pre></td></tr></table></figure>\n\n<p>如果确定有，可直接通过supervisord尝试启动！</p>\n<h3 id=\"pip安装方式\"><a href=\"#pip安装方式\" class=\"headerlink\" title=\"pip安装方式\"></a>pip安装方式</h3><p>pip是一个python的软件包管理系统，使用起来是非常666的！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成配置\"><a href=\"#生成配置\" class=\"headerlink\" title=\"生成配置\"></a>生成配置</h2><p>supervisor提供了一个很好的工具echo_supervisord_conf来初始化配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>如果执行上面的命令没有反应或者报错，请尝试使用root账号或者sudo权限尝试！如果使用了root账号或者sudo权限还是不行，可更换配置文件目录！</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>supervisor提供了supervisord和supervisorctl两个可执行程序。supervisord负责管理我们添加上去的程序。按其说法是，supervisord是把我们添加上去的程序以子进程形式运行管理的。而supervisorctl负责调度supervisord。</p>\n<p>启动supervisord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord</span><br></pre></td></tr></table></figure>\n\n<p>supervisord的配置默认存放路径是&#x2F;etc&#x2F;supervisord.conf。如果在生成配置的时候，修改了配置路径，就需要通过-c命令行参数指定配置文件路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>supervisord命令行参数<br>参数参数说明-c FILE, –configuration&#x3D;FILE指定supervisor配置文件路径，FILE是配置文件绝对路径-n,<br>–nodaemon前台运行，不以守护方式运行-h, –help显示帮助信息-u USER,<br>–user&#x3D;USER指定运行用户，Unix用户名或者用户ID-m OCTAL, –umask&#x3D;OCTAL掩码-d PATH,<br>–directory&#x3D;PATH当supervisord以daemon（守护进程）方式运行时候，在守护进程之前会切换到这个目录-l FILE,<br>–logfile&#x3D;FILE指定supervisord活动日志的绝对路径-y BYTES,<br>–logfile_maxbytes&#x3D;BYTES指定日志切割大小，可携带单位，例如1MB或者1GB-y NUM,<br>–logfile_backups&#x3D;NUM保留日志数量，多出的部分将会被清除-e LEVEL, –loglevel&#x3D;LEVEL日志级别，可选的有trace,<br>debug, info, warn, error以及critical-j FILE,<br>–pidfile&#x3D;FILE指定PID文件绝对路径，daemon运行程序时候会自动创建-i STRING,<br>–identifier&#x3D;STRING指定一个标识符，标注实例-q PATH,<br>–childlogdir&#x3D;PATH指定子进程的默认日志目录，目录必须已经存在-k, –nocleanup终端退出时候，不退出supervisord-a<br>NUM, –minfds&#x3D;NUM指定最小的文件描述符数量-t, –strip_ansi从所有子日志进程中剥离ANSI转义序列-v,<br>–version输出supervisord版本号–profile_options&#x3D;LIST性能分析器，可支持的有cumulative, calls,<br>callers，可同时支持多个，用半角逗号隔开–minprocs&#x3D;NUM最小的进程数量</p>\n<p>supervisorctl使用<br>supervisorctl执行的命令都是一次性的，没有可持续性。可以把supervisorctl当成类似于systemctl的一个工具，但又不尽相同。</p>\n<p>supervisorctl命令行参数<br>参数参数说明-c, –configuration指定配置文件路径，后面必须加上文件的绝对路径-h, –help显示帮助信息-i,<br>–interactive交互模式-s, –serverurl URL指定supervisord服务器地址，默认是<br><a href=\"http://localhost:9001-u\">http://localhost:9001-u</a>, –username指定supervisord用户名-p,<br>–password指定supervisord用户密码-r, –history-file保存readline历史文件（readline可用的前提下）</p>\n<p>上面的配置是临时性地指定supervisord配置，可以用在一些临时情况下。例如，想尝试用另一个配置运行supervisord测试。</p>\n<p>supervisorct子命令（action）<br>命令命令说明help显示所有可用的子命令help 显示某一个子命令的帮助信息add  […]更新某一个进程&#x2F;分组的配置文件remove<br> […]移除某一个进程&#x2F;分组的配置文件update重载配置文件，然后增删变更的配置（可能会重启程序）clear 清除某个进程的日志clear<br> 清除多个进程的日志clear all清除所有进程的日志fg 前台模式连接某个进程，按CTRL+C退出前台模式pid获取supervisord的进程IDpid<br>获取某个子进程的进程IDpid all获取所有子进程的进程ID，一行一个reread重载daemon配置文件，不会添加&#x2F;移除配置信息（也不会重启）restart<br>重启某个进程，不会自动读取最新配置，必须先通过update&#x2F;reread处理restart :*重启某个分组的所有进程restart<br> 重启多个进程，或者多个分组对应的所有进程restart all重启全部进程signal信号start 启动某个进程start<br>:*启动某个分组的所有进程start  启动多个进程，或者多个分组对应的所有进程start all启动所有进程status获取所有进程信息status<br>获取某个进程信息status  获取多个进程信息stop 停止某个进程stop :*停止某个分组的所有进程stop  停止多个进程stop<br>all停止所有进程tail [-f]  [stdout&#x2F;stderr]实时输出某个进程日志</p>\n<h2 id=\"守护supervisord进程\"><a href=\"#守护supervisord进程\" class=\"headerlink\" title=\"守护supervisord进程\"></a>守护supervisord进程</h2><p>官方提供了守护进程例子托管在github上面，地址是<a href=\"https://github.com/Supervisor/initscripts\">https://github.com/Supervisor/initscripts</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Supervisor daemon</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">ExecStop=/usr/bin/supervisorctl $OPTIONS shutdown</span><br><span class=\"line\">ExecReload=/usr/bin/supervisorctl $OPTIONS reload</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=42s</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>上面的是centos的systemctl守护进程服务脚本。</p>\n<h2 id=\"supervisord配置文件说明\"><a href=\"#supervisord配置文件说明\" class=\"headerlink\" title=\"supervisord配置文件说明\"></a>supervisord配置文件说明</h2><p>supervisor配置文件会分成几个部分，每个部分都是用[]区分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class=\"line\">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class=\"line\">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class=\"line\"></span><br><span class=\"line\">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class=\"line\">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class=\"line\">;username=user              ;登录管理后台的用户名</span><br><span class=\"line\">;password=123               ;登录管理后台的密码</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]</span><br><span class=\"line\">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class=\"line\">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class=\"line\">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class=\"line\">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class=\"line\">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class=\"line\">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class=\"line\">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]</span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class=\"line\">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class=\"line\"></span><br><span class=\"line\">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class=\"line\">[program:xx]</span><br><span class=\"line\">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class=\"line\">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class=\"line\">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class=\"line\">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class=\"line\">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class=\"line\">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class=\"line\">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class=\"line\">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class=\"line\">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class=\"line\">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class=\"line\">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class=\"line\">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class=\"line\"></span><br><span class=\"line\">;[eventlistener:theeventlistenername] ;侦听器</span><br><span class=\"line\">;command=/bin/eventlistener    ; 侦听器路径</span><br><span class=\"line\">;process_name=%(program_name)s ; 进程名称</span><br><span class=\"line\">;numprocs=1                    ; 进程初始化数量</span><br><span class=\"line\">;events=EVENT                  ; 订阅的事件类型</span><br><span class=\"line\">;buffer_size=10                ; 事件缓冲大小</span><br><span class=\"line\">;directory=/tmp                ; exec之前要打开的目录</span><br><span class=\"line\">;umask=022                     ; 进程掩码</span><br><span class=\"line\">;priority=-1                   ; 启动优先权</span><br><span class=\"line\">;autostart=true                ; 是否跟随supervisord启动</span><br><span class=\"line\">;startsecs=1                   ; # 判断启动成功需要的侦听时间长度</span><br><span class=\"line\">;startretries=3                ; 最大尝试启动次数</span><br><span class=\"line\">;autorestart=unexpected        ; 自动重启情况（正常退出也会重启）</span><br><span class=\"line\">;exitcodes=0,2                 ; &#x27;expected&#x27;（异常）退出码</span><br><span class=\"line\">;stopsignal=QUIT               ; 停止信号</span><br><span class=\"line\">;stopwaitsecs=10               ; 停止前等待时长</span><br><span class=\"line\">;stopasgroup=false             ; 发送停止信号给进程组</span><br><span class=\"line\">;killasgroup=false             ; 停止进程组信号</span><br><span class=\"line\">;user=chrism                   ; 运行侦听器用户</span><br><span class=\"line\">;redirect_stderr=false         ; redirect_stderr=true时不使用侦听器</span><br><span class=\"line\">;stdout_logfile=/a/path        ; stdout日志路径，默认AUTO</span><br><span class=\"line\">;stdout_logfile_maxbytes=1MB   ;  logfile切割大小，默认最大50MB</span><br><span class=\"line\">;stdout_logfile_backups=10     ;  stdout保留日志数量</span><br><span class=\"line\">;stdout_events_enabled=false   ; stdout写日志时候广播</span><br><span class=\"line\">;stderr_logfile=/a/path        ; stderr日志路径，默认AUTO</span><br><span class=\"line\">;stderr_logfile_maxbytes=1MB   ; logfile切割大小，默认最大50MB</span><br><span class=\"line\">;stderr_logfile_backups=10     ; stderr保留日志数量</span><br><span class=\"line\">;stderr_events_enabled=false   ; stderr写入时广播事件</span><br><span class=\"line\">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; 进程环境附加参数</span><br><span class=\"line\">;serverurl=AUTO                ; 覆盖前面的serverurl</span><br><span class=\"line\"></span><br><span class=\"line\">;[group:thegroupname] ;分组</span><br><span class=\"line\">;programs=progname1,progname2  ; 分组里面的程序名，用半角逗号隔开</span><br><span class=\"line\">;priority=999                  ; 优先权限</span><br><span class=\"line\"></span><br><span class=\"line\">;包含其它配置文件,一般情况下，我们会新建一个目录来专门存放服务的配置文件，然后在此文件中将其include包含进来。</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":6725,"excerpt":"","more":"<blockquote>\n<p>很多时候，需要在后台长期、随机启动运行一些，而且还得保证服务器稳定和可靠。所以，就出现了很多进程管理系统，而supervisor就是众多软件中的佼佼者！</p>\n</blockquote>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。</p>\n<h2 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h2><p>按照官网说明，安装supervisor可以通过四种方式安装。简单说明一下，请客官们自己选择最适合自己的安装方式！</p>\n<h3 id=\"联网使用setuptools安装\"><a href=\"#联网使用setuptools安装\" class=\"headerlink\" title=\"联网使用setuptools安装\"></a>联网使用setuptools安装</h3><p>联网情况下使用setuptools安装。这里用到的是easy_install。easy_install<br>是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python包。当然了，安装了setuptools和联网都是必备条件！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easy_install supervisor</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联网不用setuptools安装\"><a href=\"#联网不用setuptools安装\" class=\"headerlink\" title=\"联网不用setuptools安装\"></a>联网不用setuptools安装</h3><p>首先需要下载supervisor的源码包。supervisor在pypi上的托管地址是pypi.python.org&#x2F;pypi&#x2F;supervisor<br>。当然了，也可以从其他渠道获取supervisor源码包。下载完成后，解压安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://files.pythonhosted.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz</span><br><span class=\"line\">tar xzf supervisor-3.3.4.tar.gz</span><br><span class=\"line\">cd supervisor*</span><br><span class=\"line\">python setup.py install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无网络情况下安装\"><a href=\"#无网络情况下安装\" class=\"headerlink\" title=\"无网络情况下安装\"></a>无网络情况下安装</h3><p>有些Linux发行版会自带supervisor分发包，虽然这些supervisor的版本可能远低于官网的。不过，聊胜于无，也是没办法的情况下的方式。首先需要确定的是有没有携带supervisor包，直接启动使用即可！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum info supervisor</span><br></pre></td></tr></table></figure>\n\n<p>如果是ubuntu</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache show supervisor</span><br></pre></td></tr></table></figure>\n\n<p>如果确定有，可直接通过supervisord尝试启动！</p>\n<h3 id=\"pip安装方式\"><a href=\"#pip安装方式\" class=\"headerlink\" title=\"pip安装方式\"></a>pip安装方式</h3><p>pip是一个python的软件包管理系统，使用起来是非常666的！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成配置\"><a href=\"#生成配置\" class=\"headerlink\" title=\"生成配置\"></a>生成配置</h2><p>supervisor提供了一个很好的工具echo_supervisord_conf来初始化配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>如果执行上面的命令没有反应或者报错，请尝试使用root账号或者sudo权限尝试！如果使用了root账号或者sudo权限还是不行，可更换配置文件目录！</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>supervisor提供了supervisord和supervisorctl两个可执行程序。supervisord负责管理我们添加上去的程序。按其说法是，supervisord是把我们添加上去的程序以子进程形式运行管理的。而supervisorctl负责调度supervisord。</p>\n<p>启动supervisord</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord</span><br></pre></td></tr></table></figure>\n\n<p>supervisord的配置默认存放路径是&#x2F;etc&#x2F;supervisord.conf。如果在生成配置的时候，修改了配置路径，就需要通过-c命令行参数指定配置文件路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>supervisord命令行参数<br>参数参数说明-c FILE, –configuration&#x3D;FILE指定supervisor配置文件路径，FILE是配置文件绝对路径-n,<br>–nodaemon前台运行，不以守护方式运行-h, –help显示帮助信息-u USER,<br>–user&#x3D;USER指定运行用户，Unix用户名或者用户ID-m OCTAL, –umask&#x3D;OCTAL掩码-d PATH,<br>–directory&#x3D;PATH当supervisord以daemon（守护进程）方式运行时候，在守护进程之前会切换到这个目录-l FILE,<br>–logfile&#x3D;FILE指定supervisord活动日志的绝对路径-y BYTES,<br>–logfile_maxbytes&#x3D;BYTES指定日志切割大小，可携带单位，例如1MB或者1GB-y NUM,<br>–logfile_backups&#x3D;NUM保留日志数量，多出的部分将会被清除-e LEVEL, –loglevel&#x3D;LEVEL日志级别，可选的有trace,<br>debug, info, warn, error以及critical-j FILE,<br>–pidfile&#x3D;FILE指定PID文件绝对路径，daemon运行程序时候会自动创建-i STRING,<br>–identifier&#x3D;STRING指定一个标识符，标注实例-q PATH,<br>–childlogdir&#x3D;PATH指定子进程的默认日志目录，目录必须已经存在-k, –nocleanup终端退出时候，不退出supervisord-a<br>NUM, –minfds&#x3D;NUM指定最小的文件描述符数量-t, –strip_ansi从所有子日志进程中剥离ANSI转义序列-v,<br>–version输出supervisord版本号–profile_options&#x3D;LIST性能分析器，可支持的有cumulative, calls,<br>callers，可同时支持多个，用半角逗号隔开–minprocs&#x3D;NUM最小的进程数量</p>\n<p>supervisorctl使用<br>supervisorctl执行的命令都是一次性的，没有可持续性。可以把supervisorctl当成类似于systemctl的一个工具，但又不尽相同。</p>\n<p>supervisorctl命令行参数<br>参数参数说明-c, –configuration指定配置文件路径，后面必须加上文件的绝对路径-h, –help显示帮助信息-i,<br>–interactive交互模式-s, –serverurl URL指定supervisord服务器地址，默认是<br><a href=\"http://localhost:9001-u\">http://localhost:9001-u</a>, –username指定supervisord用户名-p,<br>–password指定supervisord用户密码-r, –history-file保存readline历史文件（readline可用的前提下）</p>\n<p>上面的配置是临时性地指定supervisord配置，可以用在一些临时情况下。例如，想尝试用另一个配置运行supervisord测试。</p>\n<p>supervisorct子命令（action）<br>命令命令说明help显示所有可用的子命令help 显示某一个子命令的帮助信息add  […]更新某一个进程&#x2F;分组的配置文件remove<br> […]移除某一个进程&#x2F;分组的配置文件update重载配置文件，然后增删变更的配置（可能会重启程序）clear 清除某个进程的日志clear<br> 清除多个进程的日志clear all清除所有进程的日志fg 前台模式连接某个进程，按CTRL+C退出前台模式pid获取supervisord的进程IDpid<br>获取某个子进程的进程IDpid all获取所有子进程的进程ID，一行一个reread重载daemon配置文件，不会添加&#x2F;移除配置信息（也不会重启）restart<br>重启某个进程，不会自动读取最新配置，必须先通过update&#x2F;reread处理restart :*重启某个分组的所有进程restart<br> 重启多个进程，或者多个分组对应的所有进程restart all重启全部进程signal信号start 启动某个进程start<br>:*启动某个分组的所有进程start  启动多个进程，或者多个分组对应的所有进程start all启动所有进程status获取所有进程信息status<br>获取某个进程信息status  获取多个进程信息stop 停止某个进程stop :*停止某个分组的所有进程stop  停止多个进程stop<br>all停止所有进程tail [-f]  [stdout&#x2F;stderr]实时输出某个进程日志</p>\n<h2 id=\"守护supervisord进程\"><a href=\"#守护supervisord进程\" class=\"headerlink\" title=\"守护supervisord进程\"></a>守护supervisord进程</h2><p>官方提供了守护进程例子托管在github上面，地址是<a href=\"https://github.com/Supervisor/initscripts\">https://github.com/Supervisor/initscripts</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Supervisor daemon</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">ExecStop=/usr/bin/supervisorctl $OPTIONS shutdown</span><br><span class=\"line\">ExecReload=/usr/bin/supervisorctl $OPTIONS reload</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=42s</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>上面的是centos的systemctl守护进程服务脚本。</p>\n<h2 id=\"supervisord配置文件说明\"><a href=\"#supervisord配置文件说明\" class=\"headerlink\" title=\"supervisord配置文件说明\"></a>supervisord配置文件说明</h2><p>supervisor配置文件会分成几个部分，每个部分都是用[]区分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class=\"line\">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class=\"line\">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class=\"line\"></span><br><span class=\"line\">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class=\"line\">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class=\"line\">;username=user              ;登录管理后台的用户名</span><br><span class=\"line\">;password=123               ;登录管理后台的密码</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]</span><br><span class=\"line\">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class=\"line\">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class=\"line\">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class=\"line\">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class=\"line\">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class=\"line\">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class=\"line\">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]</span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class=\"line\">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class=\"line\"></span><br><span class=\"line\">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class=\"line\">[program:xx]</span><br><span class=\"line\">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class=\"line\">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class=\"line\">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class=\"line\">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class=\"line\">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class=\"line\">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class=\"line\">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class=\"line\">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class=\"line\">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class=\"line\">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class=\"line\">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class=\"line\">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class=\"line\"></span><br><span class=\"line\">;[eventlistener:theeventlistenername] ;侦听器</span><br><span class=\"line\">;command=/bin/eventlistener    ; 侦听器路径</span><br><span class=\"line\">;process_name=%(program_name)s ; 进程名称</span><br><span class=\"line\">;numprocs=1                    ; 进程初始化数量</span><br><span class=\"line\">;events=EVENT                  ; 订阅的事件类型</span><br><span class=\"line\">;buffer_size=10                ; 事件缓冲大小</span><br><span class=\"line\">;directory=/tmp                ; exec之前要打开的目录</span><br><span class=\"line\">;umask=022                     ; 进程掩码</span><br><span class=\"line\">;priority=-1                   ; 启动优先权</span><br><span class=\"line\">;autostart=true                ; 是否跟随supervisord启动</span><br><span class=\"line\">;startsecs=1                   ; # 判断启动成功需要的侦听时间长度</span><br><span class=\"line\">;startretries=3                ; 最大尝试启动次数</span><br><span class=\"line\">;autorestart=unexpected        ; 自动重启情况（正常退出也会重启）</span><br><span class=\"line\">;exitcodes=0,2                 ; &#x27;expected&#x27;（异常）退出码</span><br><span class=\"line\">;stopsignal=QUIT               ; 停止信号</span><br><span class=\"line\">;stopwaitsecs=10               ; 停止前等待时长</span><br><span class=\"line\">;stopasgroup=false             ; 发送停止信号给进程组</span><br><span class=\"line\">;killasgroup=false             ; 停止进程组信号</span><br><span class=\"line\">;user=chrism                   ; 运行侦听器用户</span><br><span class=\"line\">;redirect_stderr=false         ; redirect_stderr=true时不使用侦听器</span><br><span class=\"line\">;stdout_logfile=/a/path        ; stdout日志路径，默认AUTO</span><br><span class=\"line\">;stdout_logfile_maxbytes=1MB   ;  logfile切割大小，默认最大50MB</span><br><span class=\"line\">;stdout_logfile_backups=10     ;  stdout保留日志数量</span><br><span class=\"line\">;stdout_events_enabled=false   ; stdout写日志时候广播</span><br><span class=\"line\">;stderr_logfile=/a/path        ; stderr日志路径，默认AUTO</span><br><span class=\"line\">;stderr_logfile_maxbytes=1MB   ; logfile切割大小，默认最大50MB</span><br><span class=\"line\">;stderr_logfile_backups=10     ; stderr保留日志数量</span><br><span class=\"line\">;stderr_events_enabled=false   ; stderr写入时广播事件</span><br><span class=\"line\">;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; 进程环境附加参数</span><br><span class=\"line\">;serverurl=AUTO                ; 覆盖前面的serverurl</span><br><span class=\"line\"></span><br><span class=\"line\">;[group:thegroupname] ;分组</span><br><span class=\"line\">;programs=progname1,progname2  ; 分组里面的程序名，用半角逗号隔开</span><br><span class=\"line\">;priority=999                  ; 优先权限</span><br><span class=\"line\"></span><br><span class=\"line\">;包含其它配置文件,一般情况下，我们会新建一个目录来专门存放服务的配置文件，然后在此文件中将其include包含进来。</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure>"},{"title":"Linux下echo+tee实现同时追加或者覆盖多个文本文件","date":"2018-10-28T01:44:46.000Z","url":"operate-many-files-in-echo-and-tee-on-linux","description":"Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。","_content":"\n> Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。\n\n\n向文件里面追加或者覆盖一些文本内容，我们最容易想到也是最容易选择到的命令是echo命令。\n\n ## echo追加内容\n\n```\necho 'test' >> test.txt\n```\n\n\n ## echo覆盖内容\n\n```\necho 'test' > test.txt\n```\n\n确实很简单好用，也没有什么繁复的参数。前提是一个文件，如果要求同时向多个文件追加相同的内容呢？echo命令就会显得力不从心！！而利用echo+tee命令就可以完成同时追加或者覆盖相同内容到多个文件的需求！\n\n### echo+tee同时追加\n\n```\necho 'test' | tee -a file1 file2 file3\n```\n\n\n## echo+tee同时覆盖\n\n```\necho 'test' | tee file1 file2 file3\n```\n\n\necho+tee命令的妙用就在于，可以输出的同时，一次性同时追加或者覆盖相同的文本内容到不同的文件。如果你也有这样的需求，不妨试试看看！！","source":"_posts/Linux下echo+tee实现同时追加或者覆盖多个文本文件.md","raw":"---\ntitle: Linux下echo+tee实现同时追加或者覆盖多个文本文件\ndate: 2018-10-28 09:44:46\ntags: \n  - echo\n  - tee\ncategories:\n  - 技术\nurl: operate-many-files-in-echo-and-tee-on-linux\ndescription: Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。\n---\n\n> Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。\n\n\n向文件里面追加或者覆盖一些文本内容，我们最容易想到也是最容易选择到的命令是echo命令。\n\n ## echo追加内容\n\n```\necho 'test' >> test.txt\n```\n\n\n ## echo覆盖内容\n\n```\necho 'test' > test.txt\n```\n\n确实很简单好用，也没有什么繁复的参数。前提是一个文件，如果要求同时向多个文件追加相同的内容呢？echo命令就会显得力不从心！！而利用echo+tee命令就可以完成同时追加或者覆盖相同内容到多个文件的需求！\n\n### echo+tee同时追加\n\n```\necho 'test' | tee -a file1 file2 file3\n```\n\n\n## echo+tee同时覆盖\n\n```\necho 'test' | tee file1 file2 file3\n```\n\n\necho+tee命令的妙用就在于，可以输出的同时，一次性同时追加或者覆盖相同的文本内容到不同的文件。如果你也有这样的需求，不妨试试看看！！","slug":"Linux下echo+tee实现同时追加或者覆盖多个文本文件","published":1,"updated":"2022-05-12T17:08:07.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6atz0006lvtdhslsbhtr","content":"<blockquote>\n<p>Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。</p>\n</blockquote>\n<p>向文件里面追加或者覆盖一些文本内容，我们最容易想到也是最容易选择到的命令是echo命令。</p>\n<h2 id=\"echo追加内容\"><a href=\"#echo追加内容\" class=\"headerlink\" title=\"echo追加内容\"></a>echo追加内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; &gt;&gt; test.txt</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"echo覆盖内容\"><a href=\"#echo覆盖内容\" class=\"headerlink\" title=\"echo覆盖内容\"></a>echo覆盖内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; &gt; test.txt</span><br></pre></td></tr></table></figure>\n\n<p>确实很简单好用，也没有什么繁复的参数。前提是一个文件，如果要求同时向多个文件追加相同的内容呢？echo命令就会显得力不从心！！而利用echo+tee命令就可以完成同时追加或者覆盖相同内容到多个文件的需求！</p>\n<h3 id=\"echo-tee同时追加\"><a href=\"#echo-tee同时追加\" class=\"headerlink\" title=\"echo+tee同时追加\"></a>echo+tee同时追加</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; | tee -a file1 file2 file3</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"echo-tee同时覆盖\"><a href=\"#echo-tee同时覆盖\" class=\"headerlink\" title=\"echo+tee同时覆盖\"></a>echo+tee同时覆盖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; | tee file1 file2 file3</span><br></pre></td></tr></table></figure>\n\n\n<p>echo+tee命令的妙用就在于，可以输出的同时，一次性同时追加或者覆盖相同的文本内容到不同的文件。如果你也有这样的需求，不妨试试看看！！</p>\n","site":{"data":{}},"length":491,"excerpt":"","more":"<blockquote>\n<p>Linux是个美妙的操作系统，它高效、它安全、它简洁，它还有着神秘的魅力！不同于Windows的图形化的直白，Linux和macOS的美妙之处总是需要大伙去用心去发现。</p>\n</blockquote>\n<p>向文件里面追加或者覆盖一些文本内容，我们最容易想到也是最容易选择到的命令是echo命令。</p>\n<h2 id=\"echo追加内容\"><a href=\"#echo追加内容\" class=\"headerlink\" title=\"echo追加内容\"></a>echo追加内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; &gt;&gt; test.txt</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"echo覆盖内容\"><a href=\"#echo覆盖内容\" class=\"headerlink\" title=\"echo覆盖内容\"></a>echo覆盖内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; &gt; test.txt</span><br></pre></td></tr></table></figure>\n\n<p>确实很简单好用，也没有什么繁复的参数。前提是一个文件，如果要求同时向多个文件追加相同的内容呢？echo命令就会显得力不从心！！而利用echo+tee命令就可以完成同时追加或者覆盖相同内容到多个文件的需求！</p>\n<h3 id=\"echo-tee同时追加\"><a href=\"#echo-tee同时追加\" class=\"headerlink\" title=\"echo+tee同时追加\"></a>echo+tee同时追加</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; | tee -a file1 file2 file3</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"echo-tee同时覆盖\"><a href=\"#echo-tee同时覆盖\" class=\"headerlink\" title=\"echo+tee同时覆盖\"></a>echo+tee同时覆盖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;test&#x27; | tee file1 file2 file3</span><br></pre></td></tr></table></figure>\n\n\n<p>echo+tee命令的妙用就在于，可以输出的同时，一次性同时追加或者覆盖相同的文本内容到不同的文件。如果你也有这样的需求，不妨试试看看！！</p>\n"},{"title":"New Blog, New Start","date":"2017-11-10T06:13:00.000Z","url":"new-blog-new-start","description":"很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！","_content":"\n> 很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！\n\n## 过去\n\n玩过托管博客、wordpress、ghost，如今从这个新的nodejs开始吧！以前的博客都太重，不大喜欢！许是老了，人都喜欢简单点的东西呢。当然，传说中的hexo，我一直没有用过，据说很简洁，简洁到没有写作的web\nui，我又实在不怎么喜欢，不想去手动去生成静态文件。\n\n这个是个新的开始，就此记录吧！\n\n## 更新\n\n终于还是用上了hexo，真香！！","source":"_posts/New Blog, New Start.md","raw":"---\ntitle: New Blog, New Start\ndate: 2017-11-10 14:13:00\nurl: new-blog-new-start\ntags: \n  - hello\n  - hi\ncategories:\n  - 记录\ndescription: 很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！\n---\n\n> 很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！\n\n## 过去\n\n玩过托管博客、wordpress、ghost，如今从这个新的nodejs开始吧！以前的博客都太重，不大喜欢！许是老了，人都喜欢简单点的东西呢。当然，传说中的hexo，我一直没有用过，据说很简洁，简洁到没有写作的web\nui，我又实在不怎么喜欢，不想去手动去生成静态文件。\n\n这个是个新的开始，就此记录吧！\n\n## 更新\n\n终于还是用上了hexo，真香！！","slug":"New Blog, New Start","published":1,"updated":"2022-05-12T17:08:18.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au20009lvtd3uyx113d","content":"<blockquote>\n<p>很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！</p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>玩过托管博客、wordpress、ghost，如今从这个新的nodejs开始吧！以前的博客都太重，不大喜欢！许是老了，人都喜欢简单点的东西呢。当然，传说中的hexo，我一直没有用过，据说很简洁，简洁到没有写作的web<br>ui，我又实在不怎么喜欢，不想去手动去生成静态文件。</p>\n<p>这个是个新的开始，就此记录吧！</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>终于还是用上了hexo，真香！！</p>\n","site":{"data":{}},"length":227,"excerpt":"","more":"<blockquote>\n<p>很久没有写博客了，想起来，至少也有两年多了吧！之所以再开通博客，纯粹只是为了有时间之余，记录点自己内心的点点滴滴吧！</p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>玩过托管博客、wordpress、ghost，如今从这个新的nodejs开始吧！以前的博客都太重，不大喜欢！许是老了，人都喜欢简单点的东西呢。当然，传说中的hexo，我一直没有用过，据说很简洁，简洁到没有写作的web<br>ui，我又实在不怎么喜欢，不想去手动去生成静态文件。</p>\n<p>这个是个新的开始，就此记录吧！</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>终于还是用上了hexo，真香！！</p>\n"},{"title":"iOS设备webview弹窗里iframe的可滚动方式","date":"2017-11-17T00:20:00.000Z","url":"rolling-iframe-webpage-content-in-webview-of-ios","description":"最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！","_content":"\n> 最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！\n\n\n## 样式化iframe父级容器\n\n弹窗里面的iframe必须有一个div外层包住，并给其样式如下：\n\n```\nwidth:100%;height:258px;overflow:auto!important; -webkit-overflow-scrolling:touch!important;\n```\n\n\n当然，具体的样式还得自己调！不过呢，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！\n\n## 样式化iframe\n\niframe的样式化是必须的了，iframe样式化的样式如下：\n\n```\nwidth:100%;height:258px;display:block;overflow:scroll;-webkit-overflow-scrolling:touch;\n```\n\n\n和上面的父级容器一样，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！所不同的是权限，这个得看清楚。\n\n## iframe内容样式化\n\niframe里面内容并不需要什么特殊的样式化，只需要设置高和宽都是100%即可！\n\n## 结语\n\n有时候，iOS也是可以坑死人的，是不是？所以，记一下，还是必要的！\n\n","source":"_posts/iOS设备webview弹窗里iframe的可滚动方式.md","raw":"---\ntitle: iOS设备webview弹窗里iframe的可滚动方式\ndate: 2017-11-17 08:20:00\ntags: \n  - 前端\n  - iframe\n  - 弹窗\ncategories:\n  - 技术\nurl: rolling-iframe-webpage-content-in-webview-of-ios\ndescription: 最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！\n---\n\n> 最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！\n\n\n## 样式化iframe父级容器\n\n弹窗里面的iframe必须有一个div外层包住，并给其样式如下：\n\n```\nwidth:100%;height:258px;overflow:auto!important; -webkit-overflow-scrolling:touch!important;\n```\n\n\n当然，具体的样式还得自己调！不过呢，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！\n\n## 样式化iframe\n\niframe的样式化是必须的了，iframe样式化的样式如下：\n\n```\nwidth:100%;height:258px;display:block;overflow:scroll;-webkit-overflow-scrolling:touch;\n```\n\n\n和上面的父级容器一样，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！所不同的是权限，这个得看清楚。\n\n## iframe内容样式化\n\niframe里面内容并不需要什么特殊的样式化，只需要设置高和宽都是100%即可！\n\n## 结语\n\n有时候，iOS也是可以坑死人的，是不是？所以，记一下，还是必要的！\n\n","slug":"iOS设备webview弹窗里iframe的可滚动方式","published":1,"updated":"2022-05-12T17:07:55.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au3000alvtd17vg7h3r","content":"<blockquote>\n<p>最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！</p>\n</blockquote>\n<h2 id=\"样式化iframe父级容器\"><a href=\"#样式化iframe父级容器\" class=\"headerlink\" title=\"样式化iframe父级容器\"></a>样式化iframe父级容器</h2><p>弹窗里面的iframe必须有一个div外层包住，并给其样式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:100%;height:258px;overflow:auto!important; -webkit-overflow-scrolling:touch!important;</span><br></pre></td></tr></table></figure>\n\n\n<p>当然，具体的样式还得自己调！不过呢，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！</p>\n<h2 id=\"样式化iframe\"><a href=\"#样式化iframe\" class=\"headerlink\" title=\"样式化iframe\"></a>样式化iframe</h2><p>iframe的样式化是必须的了，iframe样式化的样式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:100%;height:258px;display:block;overflow:scroll;-webkit-overflow-scrolling:touch;</span><br></pre></td></tr></table></figure>\n\n\n<p>和上面的父级容器一样，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！所不同的是权限，这个得看清楚。</p>\n<h2 id=\"iframe内容样式化\"><a href=\"#iframe内容样式化\" class=\"headerlink\" title=\"iframe内容样式化\"></a>iframe内容样式化</h2><p>iframe里面内容并不需要什么特殊的样式化，只需要设置高和宽都是100%即可！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>有时候，iOS也是可以坑死人的，是不是？所以，记一下，还是必要的！</p>\n","site":{"data":{}},"length":584,"excerpt":"","more":"<blockquote>\n<p>最近公司休假，所以为了方便，公司的网站需要搞一个公告，用以提醒网站会员。而为了美观，我选择了弹窗里面嵌入iframe的方式作为展示公告的方式。我原以为很简单的，却没想到，我花了几个小时才处理好这个原本预期10分钟可以解决的问题。所以，把这个坑记一下！</p>\n</blockquote>\n<h2 id=\"样式化iframe父级容器\"><a href=\"#样式化iframe父级容器\" class=\"headerlink\" title=\"样式化iframe父级容器\"></a>样式化iframe父级容器</h2><p>弹窗里面的iframe必须有一个div外层包住，并给其样式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:100%;height:258px;overflow:auto!important; -webkit-overflow-scrolling:touch!important;</span><br></pre></td></tr></table></figure>\n\n\n<p>当然，具体的样式还得自己调！不过呢，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！</p>\n<h2 id=\"样式化iframe\"><a href=\"#样式化iframe\" class=\"headerlink\" title=\"样式化iframe\"></a>样式化iframe</h2><p>iframe的样式化是必须的了，iframe样式化的样式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:100%;height:258px;display:block;overflow:scroll;-webkit-overflow-scrolling:touch;</span><br></pre></td></tr></table></figure>\n\n\n<p>和上面的父级容器一样，这里的每一项都必须明确，且除了高宽，其他的都必须是现在对应的值！所不同的是权限，这个得看清楚。</p>\n<h2 id=\"iframe内容样式化\"><a href=\"#iframe内容样式化\" class=\"headerlink\" title=\"iframe内容样式化\"></a>iframe内容样式化</h2><p>iframe里面内容并不需要什么特殊的样式化，只需要设置高和宽都是100%即可！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>有时候，iOS也是可以坑死人的，是不是？所以，记一下，还是必要的！</p>\n"},{"title":"mysql存储emoji表情的麻烦事","date":"2018-05-09T23:45:00.000Z","url":"storing-emoji-in-mysql","description":"最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！","_content":"\n> 最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！\n\n## emoji的由来\n\nemoji这玩意，“很不幸”地被日本发明，最初是日本在无线通信中所使用的视觉情感符号。作为国际范，emoji已经像空气一样充满整个世界，它在中国有一个贴切的中文名叫做“小黄脸”。这玩意无处不在了，支持它是不存在争议的！\n\n## emoji的编码\n\nemoji表情对应的Unicode编码在mysql数据库里面，需要用到的字符集是utf8mb4。unicode.org\n专门整理了一个完整的emoji的编码表。具体地址：<https://unicode.org/emoji/charts/full-emoji-list.html>\n\n## 存储emoji\n\n回到正题，如果要在mysql数据库里面存储emoji，就需要用到utf8mb4字符集。而且注意的是，必须是数据库默认字符集、数据表默认字符集以及存储它的具体字段字符集也是utf8mb4。\n\n```\nmysql -u root -p\n```\n\n输入正确的密码，进入mysql命令行模式。\n\n```\nmysql> use leo;\nmysql> alter database leo default charset = utf8mb4;\nmysql> alter table leo_table default charset = utf8mb4;\nmysql> alter table leo_table change table_emoji table_emoji VARCHAR(128) character set utf8mb4 collate utf8mb4_general_ci;\n```\n\n上面的leo是数据库名称，leo_table是数据表，table_emoji是数据库字段。（mysql>只是为了表示是mysql命令行模式下执行，无作用）。依次作用如下：\n\n1. 切换数据库;\n2. 更改数据库字符集；\n3. 更改数据表字符集；\n4. 更改字段字符集；\n\n需要特别注意的是最后的更改字符集，一定要确定字段的类型、长度等定义。\n\n## 修改mysql配置文件my.cnf\n\n```\n[client]  \ndefault-character-set = utf8mb4  \n  \n[mysql]  \ndefault-character-set = utf8mb4  \n  \n[mysqld]  \ncharacter-set-client-handshake = FALSE  \ncharacter-set-server = utf8mb4  \ncollation-server = utf8mb4_unicode_ci  \ninit_connect='SET NAMES utf8mb4' \n```\n\n注意对比，没有的就新增，存在的修改即可！\n\n## 最后\n\n补充一下，字符集utf8mb4是在mysql5.5.3以上版本后才出现的，所以要确保mysql版本不能太低。重启一下mysql服务，就可以愉快地存储这可爱的emoji表情了。","source":"_posts/mysql存储emoji表情的麻烦事.md","raw":"---\ntitle: mysql存储emoji表情的麻烦事\ndate: 2018-05-10 07:45:00\ntags: \n  - mysql\n  - emoji\ncategories:\n  - 技术\nurl: storing-emoji-in-mysql\ndescription: 最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！\n---\n\n> 最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！\n\n## emoji的由来\n\nemoji这玩意，“很不幸”地被日本发明，最初是日本在无线通信中所使用的视觉情感符号。作为国际范，emoji已经像空气一样充满整个世界，它在中国有一个贴切的中文名叫做“小黄脸”。这玩意无处不在了，支持它是不存在争议的！\n\n## emoji的编码\n\nemoji表情对应的Unicode编码在mysql数据库里面，需要用到的字符集是utf8mb4。unicode.org\n专门整理了一个完整的emoji的编码表。具体地址：<https://unicode.org/emoji/charts/full-emoji-list.html>\n\n## 存储emoji\n\n回到正题，如果要在mysql数据库里面存储emoji，就需要用到utf8mb4字符集。而且注意的是，必须是数据库默认字符集、数据表默认字符集以及存储它的具体字段字符集也是utf8mb4。\n\n```\nmysql -u root -p\n```\n\n输入正确的密码，进入mysql命令行模式。\n\n```\nmysql> use leo;\nmysql> alter database leo default charset = utf8mb4;\nmysql> alter table leo_table default charset = utf8mb4;\nmysql> alter table leo_table change table_emoji table_emoji VARCHAR(128) character set utf8mb4 collate utf8mb4_general_ci;\n```\n\n上面的leo是数据库名称，leo_table是数据表，table_emoji是数据库字段。（mysql>只是为了表示是mysql命令行模式下执行，无作用）。依次作用如下：\n\n1. 切换数据库;\n2. 更改数据库字符集；\n3. 更改数据表字符集；\n4. 更改字段字符集；\n\n需要特别注意的是最后的更改字符集，一定要确定字段的类型、长度等定义。\n\n## 修改mysql配置文件my.cnf\n\n```\n[client]  \ndefault-character-set = utf8mb4  \n  \n[mysql]  \ndefault-character-set = utf8mb4  \n  \n[mysqld]  \ncharacter-set-client-handshake = FALSE  \ncharacter-set-server = utf8mb4  \ncollation-server = utf8mb4_unicode_ci  \ninit_connect='SET NAMES utf8mb4' \n```\n\n注意对比，没有的就新增，存在的修改即可！\n\n## 最后\n\n补充一下，字符集utf8mb4是在mysql5.5.3以上版本后才出现的，所以要确保mysql版本不能太低。重启一下mysql服务，就可以愉快地存储这可爱的emoji表情了。","slug":"mysql存储emoji表情的麻烦事","published":1,"updated":"2022-05-12T17:08:13.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au5000flvtdg2zu9w43","content":"<blockquote>\n<p>最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！</p>\n</blockquote>\n<h2 id=\"emoji的由来\"><a href=\"#emoji的由来\" class=\"headerlink\" title=\"emoji的由来\"></a>emoji的由来</h2><p>emoji这玩意，“很不幸”地被日本发明，最初是日本在无线通信中所使用的视觉情感符号。作为国际范，emoji已经像空气一样充满整个世界，它在中国有一个贴切的中文名叫做“小黄脸”。这玩意无处不在了，支持它是不存在争议的！</p>\n<h2 id=\"emoji的编码\"><a href=\"#emoji的编码\" class=\"headerlink\" title=\"emoji的编码\"></a>emoji的编码</h2><p>emoji表情对应的Unicode编码在mysql数据库里面，需要用到的字符集是utf8mb4。unicode.org<br>专门整理了一个完整的emoji的编码表。具体地址：<a href=\"https://unicode.org/emoji/charts/full-emoji-list.html\">https://unicode.org/emoji/charts/full-emoji-list.html</a></p>\n<h2 id=\"存储emoji\"><a href=\"#存储emoji\" class=\"headerlink\" title=\"存储emoji\"></a>存储emoji</h2><p>回到正题，如果要在mysql数据库里面存储emoji，就需要用到utf8mb4字符集。而且注意的是，必须是数据库默认字符集、数据表默认字符集以及存储它的具体字段字符集也是utf8mb4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>输入正确的密码，进入mysql命令行模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use leo;</span><br><span class=\"line\">mysql&gt; alter database leo default charset = utf8mb4;</span><br><span class=\"line\">mysql&gt; alter table leo_table default charset = utf8mb4;</span><br><span class=\"line\">mysql&gt; alter table leo_table change table_emoji table_emoji VARCHAR(128) character set utf8mb4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>\n\n<p>上面的leo是数据库名称，leo_table是数据表，table_emoji是数据库字段。（mysql&gt;只是为了表示是mysql命令行模式下执行，无作用）。依次作用如下：</p>\n<ol>\n<li>切换数据库;</li>\n<li>更改数据库字符集；</li>\n<li>更改数据表字符集；</li>\n<li>更改字段字符集；</li>\n</ol>\n<p>需要特别注意的是最后的更改字符集，一定要确定字段的类型、长度等定义。</p>\n<h2 id=\"修改mysql配置文件my-cnf\"><a href=\"#修改mysql配置文件my-cnf\" class=\"headerlink\" title=\"修改mysql配置文件my.cnf\"></a>修改mysql配置文件my.cnf</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]  </span><br><span class=\"line\">default-character-set = utf8mb4  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysql]  </span><br><span class=\"line\">default-character-set = utf8mb4  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysqld]  </span><br><span class=\"line\">character-set-client-handshake = FALSE  </span><br><span class=\"line\">character-set-server = utf8mb4  </span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci  </span><br><span class=\"line\">init_connect=&#x27;SET NAMES utf8mb4&#x27; </span><br></pre></td></tr></table></figure>\n\n<p>注意对比，没有的就新增，存在的修改即可！</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>补充一下，字符集utf8mb4是在mysql5.5.3以上版本后才出现的，所以要确保mysql版本不能太低。重启一下mysql服务，就可以愉快地存储这可爱的emoji表情了。</p>\n","site":{"data":{}},"length":1223,"excerpt":"","more":"<blockquote>\n<p>最近都在和微信相关的平台打交道，微信的有些用户用emoji表情作为昵称的一部分或者全部，那真的是很可爱。可是就是看起来很可爱的emoji，处理起来是一点都不可爱！</p>\n</blockquote>\n<h2 id=\"emoji的由来\"><a href=\"#emoji的由来\" class=\"headerlink\" title=\"emoji的由来\"></a>emoji的由来</h2><p>emoji这玩意，“很不幸”地被日本发明，最初是日本在无线通信中所使用的视觉情感符号。作为国际范，emoji已经像空气一样充满整个世界，它在中国有一个贴切的中文名叫做“小黄脸”。这玩意无处不在了，支持它是不存在争议的！</p>\n<h2 id=\"emoji的编码\"><a href=\"#emoji的编码\" class=\"headerlink\" title=\"emoji的编码\"></a>emoji的编码</h2><p>emoji表情对应的Unicode编码在mysql数据库里面，需要用到的字符集是utf8mb4。unicode.org<br>专门整理了一个完整的emoji的编码表。具体地址：<a href=\"https://unicode.org/emoji/charts/full-emoji-list.html\">https://unicode.org/emoji/charts/full-emoji-list.html</a></p>\n<h2 id=\"存储emoji\"><a href=\"#存储emoji\" class=\"headerlink\" title=\"存储emoji\"></a>存储emoji</h2><p>回到正题，如果要在mysql数据库里面存储emoji，就需要用到utf8mb4字符集。而且注意的是，必须是数据库默认字符集、数据表默认字符集以及存储它的具体字段字符集也是utf8mb4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>输入正确的密码，进入mysql命令行模式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use leo;</span><br><span class=\"line\">mysql&gt; alter database leo default charset = utf8mb4;</span><br><span class=\"line\">mysql&gt; alter table leo_table default charset = utf8mb4;</span><br><span class=\"line\">mysql&gt; alter table leo_table change table_emoji table_emoji VARCHAR(128) character set utf8mb4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>\n\n<p>上面的leo是数据库名称，leo_table是数据表，table_emoji是数据库字段。（mysql&gt;只是为了表示是mysql命令行模式下执行，无作用）。依次作用如下：</p>\n<ol>\n<li>切换数据库;</li>\n<li>更改数据库字符集；</li>\n<li>更改数据表字符集；</li>\n<li>更改字段字符集；</li>\n</ol>\n<p>需要特别注意的是最后的更改字符集，一定要确定字段的类型、长度等定义。</p>\n<h2 id=\"修改mysql配置文件my-cnf\"><a href=\"#修改mysql配置文件my-cnf\" class=\"headerlink\" title=\"修改mysql配置文件my.cnf\"></a>修改mysql配置文件my.cnf</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]  </span><br><span class=\"line\">default-character-set = utf8mb4  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysql]  </span><br><span class=\"line\">default-character-set = utf8mb4  </span><br><span class=\"line\">  </span><br><span class=\"line\">[mysqld]  </span><br><span class=\"line\">character-set-client-handshake = FALSE  </span><br><span class=\"line\">character-set-server = utf8mb4  </span><br><span class=\"line\">collation-server = utf8mb4_unicode_ci  </span><br><span class=\"line\">init_connect=&#x27;SET NAMES utf8mb4&#x27; </span><br></pre></td></tr></table></figure>\n\n<p>注意对比，没有的就新增，存在的修改即可！</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>补充一下，字符集utf8mb4是在mysql5.5.3以上版本后才出现的，所以要确保mysql版本不能太低。重启一下mysql服务，就可以愉快地存储这可爱的emoji表情了。</p>\n"},{"title":"nginx+lua编译那点事情","date":"2018-01-31T23:19:00.000Z","url":"install-nginx-and-lua","description":"nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。","_content":"\n> nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。\n\n## 准备\n\n首先，我们需要下载nginx1.12.0、luajit2.0.5以及lua-nginx-modulev0.10.9rc8，并把他们都存放在/root/src目录里面。他们在github上面的网址分别是https://github.com/nginx/nginx  、https://github.com/LuaJIT/LuaJIT  以及 \nhttps://github.com/openresty/lua-nginx-module\n\n```\nmkdir -p /root/src\ncd /root/src\nwget https://github.com/nginx/nginx/archive/release-1.12.0.tar.gz\nwget https://github.com/LuaJIT/LuaJIT/archive/v2.0.5.tar.gz\nwget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc8.tar.gz\n```\n\n## 全部解压他们\n\n```\nls *.tar.gz | xargs -n1 tar xzvf\n```\n\n## 安装luajit\n\n```\ncd LuaJIT-2.0.5\nmake\nmake install PREFIX=/usr/local/luajit\n```\n\n## 编译安装nginx\n\n```\ncd nginx-1.12.0\nexport LUAJIT_LIB=/usr/local/luajit/lib\nexport LUAJIT_INC=/usr/local/luajit/include/luajit-2.0\n./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module --add-module=/root/src/lua-nginx-module-0.10.9rc8\nmake\nmake install\n```\n\n## 错误\n\n编译安装nginx后，启动nginx的时候，可能会出现类似libluajit-5.1.so.2: cannot open shared object file的错误提示。那是因为系统找不到libluajit-5.1.so.2的原因，建立个软连接即可。\n\n```\nln -s /usr/local/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\n```","source":"_posts/nginx+lua编译那点事情.md","raw":"---\ntitle: nginx+lua编译那点事情\ndate: 2018-02-01 07:19:00\ntags: \n  - nginx\n  - lua\n  - 防火墙\ncategories:\n  - 技术\nurl: install-nginx-and-lua\ndescription: nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。\n---\n\n> nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。\n\n## 准备\n\n首先，我们需要下载nginx1.12.0、luajit2.0.5以及lua-nginx-modulev0.10.9rc8，并把他们都存放在/root/src目录里面。他们在github上面的网址分别是https://github.com/nginx/nginx  、https://github.com/LuaJIT/LuaJIT  以及 \nhttps://github.com/openresty/lua-nginx-module\n\n```\nmkdir -p /root/src\ncd /root/src\nwget https://github.com/nginx/nginx/archive/release-1.12.0.tar.gz\nwget https://github.com/LuaJIT/LuaJIT/archive/v2.0.5.tar.gz\nwget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc8.tar.gz\n```\n\n## 全部解压他们\n\n```\nls *.tar.gz | xargs -n1 tar xzvf\n```\n\n## 安装luajit\n\n```\ncd LuaJIT-2.0.5\nmake\nmake install PREFIX=/usr/local/luajit\n```\n\n## 编译安装nginx\n\n```\ncd nginx-1.12.0\nexport LUAJIT_LIB=/usr/local/luajit/lib\nexport LUAJIT_INC=/usr/local/luajit/include/luajit-2.0\n./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module --add-module=/root/src/lua-nginx-module-0.10.9rc8\nmake\nmake install\n```\n\n## 错误\n\n编译安装nginx后，启动nginx的时候，可能会出现类似libluajit-5.1.so.2: cannot open shared object file的错误提示。那是因为系统找不到libluajit-5.1.so.2的原因，建立个软连接即可。\n\n```\nln -s /usr/local/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\n```","slug":"nginx+lua编译那点事情","published":1,"updated":"2022-05-12T17:08:22.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au6000ilvtddzs83rvb","content":"<blockquote>\n<p>nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>首先，我们需要下载nginx1.12.0、luajit2.0.5以及lua-nginx-modulev0.10.9rc8，并把他们都存放在&#x2F;root&#x2F;src目录里面。他们在github上面的网址分别是<a href=\"https://github.com/nginx/nginx\">https://github.com/nginx/nginx</a>  、<a href=\"https://github.com/LuaJIT/LuaJIT\">https://github.com/LuaJIT/LuaJIT</a>  以及<br><a href=\"https://github.com/openresty/lua-nginx-module\">https://github.com/openresty/lua-nginx-module</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/src</span><br><span class=\"line\">cd /root/src</span><br><span class=\"line\">wget https://github.com/nginx/nginx/archive/release-1.12.0.tar.gz</span><br><span class=\"line\">wget https://github.com/LuaJIT/LuaJIT/archive/v2.0.5.tar.gz</span><br><span class=\"line\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc8.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全部解压他们\"><a href=\"#全部解压他们\" class=\"headerlink\" title=\"全部解压他们\"></a>全部解压他们</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls *.tar.gz | xargs -n1 tar xzvf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装luajit\"><a href=\"#安装luajit\" class=\"headerlink\" title=\"安装luajit\"></a>安装luajit</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd LuaJIT-2.0.5</span><br><span class=\"line\">make</span><br><span class=\"line\">make install PREFIX=/usr/local/luajit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装nginx\"><a href=\"#编译安装nginx\" class=\"headerlink\" title=\"编译安装nginx\"></a>编译安装nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.12.0</span><br><span class=\"line\">export LUAJIT_LIB=/usr/local/luajit/lib</span><br><span class=\"line\">export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module --add-module=/root/src/lua-nginx-module-0.10.9rc8</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>编译安装nginx后，启动nginx的时候，可能会出现类似libluajit-5.1.so.2: cannot open shared object file的错误提示。那是因为系统找不到libluajit-5.1.so.2的原因，建立个软连接即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1195,"excerpt":"","more":"<blockquote>\n<p>nginx嘛，自不必说了，最好使的服务器软件之一。lua的特点，想必很多人也是心知肚明的。而OpenResty给我们看到了一种nginx的新玩法，那就是nginx+lua。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>首先，我们需要下载nginx1.12.0、luajit2.0.5以及lua-nginx-modulev0.10.9rc8，并把他们都存放在&#x2F;root&#x2F;src目录里面。他们在github上面的网址分别是<a href=\"https://github.com/nginx/nginx\">https://github.com/nginx/nginx</a>  、<a href=\"https://github.com/LuaJIT/LuaJIT\">https://github.com/LuaJIT/LuaJIT</a>  以及<br><a href=\"https://github.com/openresty/lua-nginx-module\">https://github.com/openresty/lua-nginx-module</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /root/src</span><br><span class=\"line\">cd /root/src</span><br><span class=\"line\">wget https://github.com/nginx/nginx/archive/release-1.12.0.tar.gz</span><br><span class=\"line\">wget https://github.com/LuaJIT/LuaJIT/archive/v2.0.5.tar.gz</span><br><span class=\"line\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc8.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全部解压他们\"><a href=\"#全部解压他们\" class=\"headerlink\" title=\"全部解压他们\"></a>全部解压他们</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls *.tar.gz | xargs -n1 tar xzvf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装luajit\"><a href=\"#安装luajit\" class=\"headerlink\" title=\"安装luajit\"></a>安装luajit</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd LuaJIT-2.0.5</span><br><span class=\"line\">make</span><br><span class=\"line\">make install PREFIX=/usr/local/luajit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装nginx\"><a href=\"#编译安装nginx\" class=\"headerlink\" title=\"编译安装nginx\"></a>编译安装nginx</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.12.0</span><br><span class=\"line\">export LUAJIT_LIB=/usr/local/luajit/lib</span><br><span class=\"line\">export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module --with-http_realip_module --add-module=/root/src/lua-nginx-module-0.10.9rc8</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><p>编译安装nginx后，启动nginx的时候，可能会出现类似libluajit-5.1.so.2: cannot open shared object file的错误提示。那是因为系统找不到libluajit-5.1.so.2的原因，建立个软连接即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span><br></pre></td></tr></table></figure>"},{"title":"waf防火墙的小更新","date":"2018-09-12T00:10:00.000Z","url":"the-modification-of-waf-firewall","description":"lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。","_content":"\n> lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。\n\n## 一点絮叨\n\n很早就开始用waf，用的是ngx_lua_waf，是某位大牛开源出来的。地址是https://github.com/loveshell/ngx_lua_waf\n，感兴趣的大牛、中牛、年轻人都可以去看看。用的过程遇到过一些问题，因为长期的忙忙忙，所以，也没什么时间去多看看。最近一个项目因为要求比较严，所以，我又翻了翻ngx_lua_waf的github页面。这才发现了虽然项目已经停止更新有一段时间，还有不少的Pull\nrequests，甚至于最近的Pull requests是9天前的。把Pull requests筛选了一遍，就有了这次的小更新！\n\n## waf.lua\n\n```\nlocal content_length=tonumber(ngx.req.get_headers()['content-length'])\nlocal method=ngx.req.get_method()\n--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。\nlocal ngxmatch=ngx.re.match\n--local ngxmatch=ngx.re.find\nif whiteip() then\nelseif whiteurl() then\nelseif blockip() then\n--检测攻击ip是否被拦截。\nelseif denyhackip(1) then\nelseif denycc() then\nelseif ngx.var.http_Acunetix_Aspect then\n    ngx.exit(444)\nelseif ngx.var.http_X_Scan_Memo then\n    ngx.exit(444)\nelseif ua() then\nelseif url() then\nelseif args() then\nelseif cookie() then\nelseif PostCheck then\n    if method==\"POST\" then\n            local boundary = get_boundary()\n\t    if boundary then\n\t    local len = string.len\n            local sock, err = ngx.req.socket()\n    \t    if not sock then\n\t\t\t\t\treturn\n            end\n\t    ngx.req.init_body(128 * 1024)\n            sock:settimeout(0)\n\t    local content_length = nil\n    \t    content_length=tonumber(ngx.req.get_headers()['content-length'])\n    \t    local chunk_size = 4096\n            if content_length < chunk_size then\n\t\t\t\t\tchunk_size = content_length\n\t    end\n            local size = 0\n\t    while size < content_length do\n\t\tlocal data, err, partial = sock:receive(chunk_size)\n\t\tdata = data or partial\n\t\tif not data then\n\t\t\treturn\n\t\tend\n\t\tngx.req.append_body(data)\n        \tif body(data) then\n\t   \t        return true\n    \t    \tend\n\t\tsize = size + len(data)\n\t\tlocal m = ngxmatch(data,[[Content-Disposition: form-data;(.+)filename=\"(.+)\\.(.*)\"]],'ijo')\n        \tif m then\n            \t\tfileExtCheck(m[3])\n            \t\tfiletranslate = true\n        \telse\n            \t\tif ngxmatch(data,\"Content-Disposition:\",'isjo') then\n                \t\tfiletranslate = false\n            \t\tend\n            \t\tif filetranslate==false then\n            \t\t\tif body(data) then\n                    \t\t\treturn true\n                \t\tend\n            \t\tend\n        \tend\n\t\tlocal less = content_length - size\n\t\tif less < chunk_size then\n\t\t\tchunk_size = less\n\t\tend\n\t end\n\t ngx.req.finish_body()\n    else\n\t\t\tngx.req.read_body()\n\t\t\tlocal args = ngx.req.get_post_args()\n\t\t\tif not args then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tfor key, val in pairs(args) do\n\t\t\t\tif type(val) == \"table\" then\n\t\t\t\t\tif type(val[1]) == \"boolean\" then\n\t\t\t\t\t\treturn\n\t\t\t\t\tend\n\t\t\t\t\tdata=table.concat(val, \", \")\n\t\t\t\telse\n\t\t\t\t\tdata=val\n\t\t\t\tend\n\t\t\t\tif data and type(data) ~= \"boolean\" and body(data) then\n                \t\t\tbody(key)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tend\n\nelse\n    return\nend\n```\n\n## socket.lua\n\n```\n-- Copyright (C) 2013-2014 Jiale Zhi (calio), CloudFlare Inc.\n--require \"luacov\"\n\nlocal concat                = table.concat\nlocal tcp                   = ngx.socket.tcp\nlocal udp                   = ngx.socket.udp\nlocal timer_at              = ngx.timer.at\nlocal ngx_log               = ngx.log\nlocal ngx_sleep             = ngx.sleep\nlocal type                  = type\nlocal pairs                 = pairs\nlocal tostring              = tostring\nlocal debug                 = ngx.config.debug\n\nlocal DEBUG                 = ngx.DEBUG\nlocal CRIT                  = ngx.CRIT\n\nlocal MAX_PORT              = 65535\n\n\n-- table.new(narr, nrec)\nlocal succ, new_tab = pcall(require, \"table.new\")\nif not succ then\n    new_tab = function () return {} end\nend\n\nlocal _M = new_tab(0, 5)\n\nlocal is_exiting\n\nif not ngx.config or not ngx.config.ngx_lua_version\n    or ngx.config.ngx_lua_version < 9003 then\n\n    is_exiting = function() return false end\n\n    ngx_log(CRIT, \"We strongly recommend you to update your ngx_lua module to \"\n            .. \"0.9.3 or above. lua-resty-logger-socket will lose some log \"\n            .. \"messages when Nginx reloads if it works with ngx_lua module \"\n            .. \"below 0.9.3\")\nelse\n    is_exiting = ngx.worker.exiting\nend\n\n\n_M._VERSION = '0.03'\n\n-- user config\nlocal flush_limit           = 4096         -- 4KB\nlocal drop_limit            = 1048576      -- 1MB\nlocal timeout               = 1000         -- 1 sec\nlocal host\nlocal port\nlocal ssl                   = false\nlocal ssl_verify            = true\nlocal sni_host\nlocal path\nlocal max_buffer_reuse      = 10000        -- reuse buffer for at most 10000\n                                           -- times\nlocal periodic_flush        = nil\nlocal need_periodic_flush   = nil\nlocal sock_type             = 'tcp'\n\n-- internal variables\nlocal buffer_size           = 0\n-- 2nd level buffer, it stores logs ready to be sent out\nlocal send_buffer           = \"\"\n-- 1st level buffer, it stores incoming logs\nlocal log_buffer_data       = new_tab(20000, 0)\n-- number of log lines in current 1st level buffer, starts from 0\nlocal log_buffer_index      = 0\n\nlocal last_error\n\nlocal connecting\nlocal connected\nlocal exiting\nlocal retry_connect         = 0\nlocal retry_send            = 0\nlocal max_retry_times       = 3\nlocal retry_interval        = 100         -- 0.1s\nlocal pool_size             = 10\nlocal flushing\nlocal logger_initted\nlocal counter               = 0\nlocal ssl_session\n\nlocal function _write_error(msg)\n    last_error = msg\nend\n\nlocal function _do_connect()\n    local ok, err, sock\n\n    if not connected then\n        if (sock_type == 'udp') then\n            sock, err = udp()\n        else\n            sock, err = tcp()\n        end\n\n        if not sock then\n            _write_error(err)\n            return nil, err\n        end\n\n        sock:settimeout(timeout)\n    end\n\n    -- \"host\"/\"port\" and \"path\" have already been checked in init()\n    if host and port then\n        if (sock_type == 'udp') then\n            ok, err = sock:setpeername(host, port)\n        else\n            ok, err = sock:connect(host, port)\n        end\n    elseif path then\n        ok, err = sock:connect(\"unix:\" .. path)\n    end\n\n    if not ok then\n        return nil, err\n    end\n\n    return sock\nend\n\nlocal function _do_handshake(sock)\n    if not ssl then\n        return sock\n    end\n\n    local session, err = sock:sslhandshake(ssl_session, sni_host or host,\n                                           ssl_verify)\n    if not session then\n        return nil, err\n    end\n\n    ssl_session = session\n    return sock\nend\n\nlocal function _connect()\n    local err, sock\n\n    if connecting then\n        if debug then\n            ngx_log(DEBUG, \"previous connection not finished\")\n        end\n        return nil, \"previous connection not finished\"\n    end\n\n    connected = false\n    connecting = true\n\n    retry_connect = 0\n\n    while retry_connect <= max_retry_times do\n        sock, err = _do_connect()\n\n        if sock then\n            sock, err = _do_handshake(sock)\n            if sock then\n                connected = true\n                break\n            end\n        end\n\n        if debug then\n            ngx_log(DEBUG, \"reconnect to the log server: \", err)\n        end\n\n        -- ngx.sleep time is in seconds\n        if not exiting then\n            ngx_sleep(retry_interval / 1000)\n        end\n\n        retry_connect = retry_connect + 1\n    end\n\n    connecting = false\n    if not connected then\n        return nil, \"try to connect to the log server failed after \"\n                    .. max_retry_times .. \" retries: \" .. err\n    end\n\n    return sock\nend\n\nlocal function _prepare_stream_buffer()\n    local packet = concat(log_buffer_data, \"\", 1, log_buffer_index)\n    send_buffer = send_buffer .. packet\n\n    log_buffer_index = 0\n    counter = counter + 1\n    if counter > max_buffer_reuse then\n        log_buffer_data = new_tab(20000, 0)\n        counter = 0\n        if debug then\n            ngx_log(DEBUG, \"log buffer reuse limit (\" .. max_buffer_reuse\n                    .. \") reached, create a new \\\"log_buffer_data\\\"\")\n        end\n    end\nend\n\nlocal function _do_flush()\n    local ok, err, sock, bytes\n    local packet = send_buffer\n\n    sock, err = _connect()\n    if not sock then\n        return nil, err\n    end\n\n    bytes, err = sock:send(packet)\n    if not bytes then\n        -- \"sock:send\" always closes current connection on error\n        return nil, err\n    end\n\n    if debug then\n        ngx.update_time()\n        ngx_log(DEBUG, ngx.now(), \":log flush:\" .. bytes .. \":\" .. packet)\n    end\n\n    if (sock_type ~= 'udp') then\n        ok, err = sock:setkeepalive(0, pool_size)\n        if not ok then\n            return nil, err\n        end\n    end\n\n    return bytes\nend\n\nlocal function _need_flush()\n    if buffer_size > 0 then\n        return true\n    end\n\n    return false\nend\n\nlocal function _flush_lock()\n    if not flushing then\n        if debug then\n            ngx_log(DEBUG, \"flush lock acquired\")\n        end\n        flushing = true\n        return true\n    end\n    return false\nend\n\nlocal function _flush_unlock()\n    if debug then\n        ngx_log(DEBUG, \"flush lock released\")\n    end\n    flushing = false\nend\n\nlocal function _flush()\n    local err\n\n    -- pre check\n    if not _flush_lock() then\n        if debug then\n            ngx_log(DEBUG, \"previous flush not finished\")\n        end\n        -- do this later\n        return true\n    end\n\n    if not _need_flush() then\n        if debug then\n            ngx_log(DEBUG, \"no need to flush:\", log_buffer_index)\n        end\n        _flush_unlock()\n        return true\n    end\n\n    -- start flushing\n    retry_send = 0\n    if debug then\n        ngx_log(DEBUG, \"start flushing\")\n    end\n\n    local bytes\n    while retry_send <= max_retry_times do\n        if log_buffer_index > 0 then\n            _prepare_stream_buffer()\n        end\n\n        bytes, err = _do_flush()\n\n        if bytes then\n            break\n        end\n\n        if debug then\n            ngx_log(DEBUG, \"resend log messages to the log server: \", err)\n        end\n\n        -- ngx.sleep time is in seconds\n        if not exiting then\n            ngx_sleep(retry_interval / 1000)\n        end\n\n        retry_send = retry_send + 1\n    end\n\n    _flush_unlock()\n\n    if not bytes then\n        local err_msg = \"try to send log messages to the log server \"\n                        .. \"failed after \" .. max_retry_times .. \" retries: \"\n                        .. err\n        _write_error(err_msg)\n        return nil, err_msg\n    else\n        if debug then\n            ngx_log(DEBUG, \"send \" .. bytes .. \" bytes\")\n        end\n    end\n\n    buffer_size = buffer_size - #send_buffer\n    send_buffer = \"\"\n\n    return bytes\nend\n\nlocal function _periodic_flush(premature)\n    if premature then\n        exiting = true\n    end\n\n    if need_periodic_flush or exiting then\n        -- no regular flush happened after periodic flush timer had been set\n        if debug then\n            ngx_log(DEBUG, \"performing periodic flush\")\n        end\n        _flush()\n    else\n        if debug then\n            ngx_log(DEBUG, \"no need to perform periodic flush: regular flush \"\n                    .. \"happened before\")\n        end\n        need_periodic_flush = true\n    end\n\n    timer_at(periodic_flush, _periodic_flush)\nend\n\nlocal function _flush_buffer()\n    local ok, err = timer_at(0, _flush)\n\n    need_periodic_flush = false\n\n    if not ok then\n        _write_error(err)\n        return nil, err\n    end\nend\n\nlocal function _write_buffer(msg, len)\n    log_buffer_index = log_buffer_index + 1\n    log_buffer_data[log_buffer_index] = msg\n\n    buffer_size = buffer_size + len\n\n\n    return buffer_size\nend\n\nfunction _M.init(user_config)\n    if (type(user_config) ~= \"table\") then\n        return nil, \"user_config must be a table\"\n    end\n\n    for k, v in pairs(user_config) do\n        if k == \"host\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"host\" must be a string'\n            end\n            host = v\n        elseif k == \"port\" then\n            if type(v) ~= \"number\" then\n                return nil, '\"port\" must be a number'\n            end\n            if v < 0 or v > MAX_PORT then\n                return nil, ('\"port\" out of range 0~%s'):format(MAX_PORT)\n            end\n            port = v\n        elseif k == \"path\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"path\" must be a string'\n            end\n            path = v\n        elseif k == \"sock_type\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"sock_type\" must be a string'\n            end\n            if v ~= \"tcp\" and v ~= \"udp\" then\n                return nil, '\"sock_type\" must be \"tcp\" or \"udp\"'\n            end\n            sock_type = v\n        elseif k == \"flush_limit\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"flush_limit\"'\n            end\n            flush_limit = v\n        elseif k == \"drop_limit\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"drop_limit\"'\n            end\n            drop_limit = v\n        elseif k == \"timeout\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"timeout\"'\n            end\n            timeout = v\n        elseif k == \"max_retry_times\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"max_retry_times\"'\n            end\n            max_retry_times = v\n        elseif k == \"retry_interval\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"retry_interval\"'\n            end\n            -- ngx.sleep time is in seconds\n            retry_interval = v\n        elseif k == \"pool_size\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"pool_size\"'\n            end\n            pool_size = v\n        elseif k == \"max_buffer_reuse\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"max_buffer_reuse\"'\n            end\n            max_buffer_reuse = v\n        elseif k == \"periodic_flush\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"periodic_flush\"'\n            end\n            periodic_flush = v\n        elseif k == \"ssl\" then\n            if type(v) ~= \"boolean\" then\n                return nil, '\"ssl\" must be a boolean value'\n            end\n            ssl = v\n        elseif k == \"ssl_verify\" then\n            if type(v) ~= \"boolean\" then\n                return nil, '\"ssl_verify\" must be a boolean value'\n            end\n            ssl_verify = v\n        elseif k == \"sni_host\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"sni_host\" must be a string'\n            end\n            sni_host = v\n        end\n    end\n\n    if not (host and port) and not path then\n        return nil, \"no logging server configured. \\\"host\\\"/\\\"port\\\" or \"\n                .. \"\\\"path\\\" is required.\"\n    end\n\n\n    if (flush_limit >= drop_limit) then\n        return nil, \"\\\"flush_limit\\\" should be < \\\"drop_limit\\\"\"\n    end\n\n    flushing = false\n    exiting = false\n    connecting = false\n\n    connected = false\n    retry_connect = 0\n    retry_send = 0\n\n    logger_initted = true\n\n    if periodic_flush then\n        if debug then\n            ngx_log(DEBUG, \"periodic flush enabled for every \"\n                    .. periodic_flush .. \" seconds\")\n        end\n        need_periodic_flush = true\n        timer_at(periodic_flush, _periodic_flush)\n    end\n\n    return logger_initted\nend\n\nfunction _M.log(msg)\n    if not logger_initted then\n        return nil, \"not initialized\"\n    end\n\n    local bytes\n\n    if type(msg) ~= \"string\" then\n        msg = tostring(msg)\n    end\n\n    local msg_len = #msg\n\n    if (debug) then\n        ngx.update_time()\n        ngx_log(DEBUG, ngx.now(), \":log message length: \" .. msg_len)\n    end\n\n    -- response of \"_flush_buffer\" is not checked, because it writes\n    -- error buffer\n    if (is_exiting()) then\n        exiting = true\n        _write_buffer(msg, msg_len)\n        _flush_buffer()\n        if (debug) then\n            ngx_log(DEBUG, \"Nginx worker is exiting\")\n        end\n        bytes = 0\n    elseif (msg_len + buffer_size < flush_limit) then\n        _write_buffer(msg, msg_len)\n        bytes = msg_len\n    elseif (msg_len + buffer_size <= drop_limit) then\n        _write_buffer(msg, msg_len)\n        _flush_buffer()\n        bytes = msg_len\n    else\n        _flush_buffer()\n        if (debug) then\n            ngx_log(DEBUG, \"logger buffer is full, this log message will be \"\n                    .. \"dropped\")\n        end\n        bytes = 0\n        --- this log message doesn't fit in buffer, drop it\n    end\n\n    if last_error then\n        local err = last_error\n        last_error = nil\n        return bytes, err\n    end\n\n    return bytes\nend\n\nfunction _M.initted()\n    return logger_initted\nend\n\n_M.flush = _flush\n\nreturn _M\n```\n\n## init.lua\n\n```\nrequire 'config'\nlocal match = string.match\n--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。\n--因nginx和lua一起的关系，正则表达式使用\\d\\w\\s会出问题，\n--local ngxmatch=ngx.re.match\nlocal ngxmatch=ngx.re.find\nlocal unescape=ngx.unescape_uri\nlocal get_headers = ngx.req.get_headers\nlocal optionIsOn = function (options) return options == \"on\" and true or false end\nloghack=optionIsOn(loghack)\n--载入socket.lua用于发送log到独立syslog服务器。\nlocal logger = require \"socket\"\nif loghack then\n\n\n\tif not logger.initted() then\n          local ok, err = logger.init{\n              --host = '192.168.0.1',\n              host = 'logserver.local',\n              port = 514,\n              sock_type = \"udp\", --udp协议\n              flush_limit = 1,\t--立即发送\n              --drop_limit = 5678,\n              pool_size = 100,--连接池大小\n          }\n          if not ok then\n              ngx.log(ngx.ERR, \"failed to initialize the logger: \",\n                      err)\n              return\n          end\n end\nend\n\n\nlogpath = logdir\nrulepath = RulePath\nlogtofile = optionIsOn(logtofile)\nlogtoserver = optionIsOn(logtoserver)\nUrlDeny = optionIsOn(UrlDeny)\nPostCheck = optionIsOn(postMatch)\nCookieCheck = optionIsOn(cookieMatch)\nWhiteCheck = optionIsOn(whiteModule)\nPathInfoFix = optionIsOn(PathInfoFix)\nattacklog = optionIsOn(attacklog)\nhackipdeny = optionIsOn(hackipdeny)\nCCDeny = optionIsOn(CCDeny)\nRedirect=optionIsOn(Redirect)\nlocal file = io.open('config')\n\nfunction getClientIp()\n        IP  = ngx.var.remote_addr\n        if IP == nil then\n                IP  = \"unknown\"\n        end\n        return IP\nend\nfunction write(logfile,msg)\n    local fd = io.open(logfile,\"ab\")\n    if fd == nil then return end\n    fd:write(msg)\n    fd:flush()\n    fd:close()\nend\n\nfunction swrite(msg)\n      --保存警告等级要高于nginx error_log的默认等级。\n\t\t\tngx.log(ngx.CRIT,msg)\n\n\n\nend\n\nfunction log(method,url,data,ruletag)\n    if attacklog then\n        local realIp = getClientIp()\n        local ua = ngx.var.http_user_agent\n        if ua == nil then\n        \tua=\"null\"\n        end\n        local servername=ngx.var.host\n        local time=ngx.localtime()\n        if logtofile then\n        local filename = logpath..'/'..servername..\"_\"..ngx.today()..\"_sec.log\"\n        line=realIp..\" [\"..time..\"]\"..\"\\\"\"..method..\" \"..servername..url..\"\\\"\"..data..\"\\\"\"..ua..\"\\\"\"..ruletag..\"\\\"\"..\"\\n\"\n        write(filename,line)\n        end\n        if logtoserver then\n        line=realIp..\"\\\"\"..method..\" \"..servername..url..\"\\\"\"..data..\"\\\"\"..ua..\"\\\"\"..ruletag..\"\\\"\"\n        --line=\"lua_waf:\"..line\n        swrite(line)\n        end\n    --发送ip到独立syslog服务器。\n    if loghack then  local bytes, err = logger.log(getClientIp()) end\n\t\t--只要log记录，说明被攻击，利用denyhackip将ip记录。\n\t\tif hackipdeny then  denyhackip(0) end\n    end\nend\n------------------------------------规则读取函数-------------------------------------------------------------------\nfunction read_rule(var)\n    file = io.open(rulepath..'/'..var,\"r\")\n    if file==nil then\n        return\n    end\n    t = {}\n    for line in file:lines() do\n        table.insert(t,line)\n    end\n    file:close()\n    return(t)\nend\n\nurlrules=read_rule('url')\nargsrules=read_rule('args')\nuarules=read_rule('user-agent')\nwturlrules=read_rule('whiteurl')\npostrules=read_rule('post')\nckrules=read_rule('cookie')\n\n\nfunction say_html()\n    if Redirect then\n        ngx.header.content_type = \"text/html\"\n        ngx.status = ngx.HTTP_FORBIDDEN\n        ngx.say(html)\n        ngx.exit(ngx.status)\n    end\nend\n\nfunction whiteurl()\n    if WhiteCheck then\n        if wturlrules ~=nil then\n\t\t\t\t\t\tlocal urlpath = string.gsub(ngx.var.request_uri, \"?.*\", \"\")\n            for _,rule in pairs(wturlrules) do\n            --针对site:开始的进行域名匹配。增加白名单用处。\n\t            local sitemod,_=string.find(rule,\"site:\")\n\t        \t\tif sitemod==1 then\n\t        \t\t\trule=string.gsub(rule,\"site:\",\"\",1)\n\t        \t\t\t--调试whiteurl\n\t        \t\t\t--if ngx.var.host=='domino.cqhrss.gov.cn' then\n\t        \t\t\t--\tlog('debug',ngx.var.uri,\"\",rule)\n\t        \t\t\t--end\n\t        \t\t\tif ngxmatch(ngx.var.host..ngx.var.uri,rule,\"isjo\") then\n                    return true\n                end\n\t        \t\telse\n            \t\tif ngxmatch(ngx.var.uri,rule,\"isjo\") then\n                    return true\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tlocal pathmod,_=string.find(rule,\"path:\")\n\t\t\t        \t\tif pathmod==1 then\n\t\t\t        \t\t\trule=string.gsub(rule,\"path:\",\"\",1)\n\t\t\t        \t\t\tif urlpath==rule then\n\t\t                    return true\n\t\t                end\n\t\t\t\t\t\t\t\t\tend\n                end\n            \tend\n            end\n        end\n    end\n    return false\nend\n\nfunction fileExtCheck(ext)\n    local items = Set(black_fileExt)\n    ext=string.lower(ext)\n    if ext then\n        for rule,_ in pairs(items) do\n            if ngxmatch(ext,rule,\"isjo\") then\n            log('POST',ngx.var.request_uri,\"-\",\"file attack with ext \"..ext)\n            say_html()\n            end\n        end\n    end\n    return false\nend\nfunction Set (list)\n  local set = {}\n  for _, l in ipairs(list) do set[l] = true end\n  return set\nend\nfunction args()\n    for _,rule in pairs(argsrules) do\n        local args = ngx.req.get_uri_args()\n        for key, val in pairs(args) do\n            if type(val)=='table' then\n                 local t={}\n                 for k,v in pairs(val) do\n                    if v == true then\n                        v=\"\"\n                    end\n                    table.insert(t,v)\n                end\n                data=table.concat(t, \" \")\n            else\n                data=val\n            end\n            if data and type(data) ~= \"boolean\" and rule ~=\"\" and ngxmatch(unescape(data),rule,\"isjo\") then\n                log('GET',ngx.var.request_uri,\"-\",rule)\n                say_html()\n                return true\n            end\n        end\n    end\n    return false\nend\n\n\nfunction url()\n    if UrlDeny then\n        for _,rule in pairs(urlrules) do\n            if rule ~=\"\" and ngxmatch(ngx.var.request_uri,rule,\"isjo\") then\n                log('GET',ngx.var.request_uri,\"-\",rule)\n                say_html()\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunction ua()\n    local ua = ngx.var.http_user_agent\n    if ua ~= nil then\n        for _,rule in pairs(uarules) do\n            if rule ~=\"\" and ngxmatch(ua,rule,\"isjo\") then\n                log('UA',ngx.var.request_uri,\"-\",rule)\n                say_html()\n            return true\n            end\n        end\n    end\n    return false\nend\nfunction body(data)\n    for _,rule in pairs(postrules) do\n        if rule ~=\"\" and data~=\"\" and ngxmatch(unescape(data),rule,\"isjo\") then\n            log('POST',ngx.var.request_uri,data,rule)\n            say_html()\n            return true\n        end\n    end\n    return false\nend\nfunction cookie()\n    local ck = ngx.var.http_cookie\n    if CookieCheck and ck then\n        for _,rule in pairs(ckrules) do\n            if rule ~=\"\" and ngxmatch(ck,rule,\"isjo\") then\n                log('Cookie',ngx.var.request_uri,\"-\",rule)\n                say_html()\n            return true\n            end\n        end\n    end\n    return false\nend\n\nfunction denycc()\n    if CCDeny then\n        local uri=ngx.var.uri\n      \tlocal m, err = ngx.re.match(CCrate,'([0-9]+)/([0-9]+)/([0-9]+)')\n      \tlocal CCcount=tonumber(m[1]) --计数器上限\n        local CCseconds=tonumber(m[2]) --计时器\n        local CClimits=tonumber(m[3]) --阻止访问时间\n        local token = getClientIp()..uri\n        local limit = ngx.shared.limit\n        local req,_=limit:get(token) --计数器当前值\n\n        if req then\n            if req > CCcount then\n                ngx.exit(404)\n                return true\n            else\n            \t\tif req == CCcount then    limit:set(token,CCcount+1,CClimits)  end\n\n                limit:incr(token,1)\n\t\t\t\t\t\t\t\t--调试在syslog日志中查看\n\t\t\t\t\t\t\t\t--swrite('计数器:'..token..'当前计数器'..req..'阻止访问时间:'..CClimits)\n\n            end\n        else\n            limit:set(token,1,CCseconds)\n        end\n    end\n    return false\nend\n\n--chk为1表示检测值，不增加，不创建，返回检测结果。\nfunction denyhackip(chk)\n    if hackipdeny then\n\n       local m, err = ngx.re.match(hackrate,'([0-9]+)/([0-9]+)/([0-9]+)')\n      \tlocal hicount=tonumber(m[1]) --计数器上限\n        local hiseconds=tonumber(m[2]) --计时器\n        local hilimits=tonumber(m[3]) --阻止访问时间\n        local token = \"hackip\"..getClientIp()\n        local limit = ngx.shared.limit\n        local req,_=limit:get(token) --计数器当前值\n        if req then\n            if req > hicount then\n                ngx.exit(404)\n                return true\n            else\n\n            \t\tif req == hicount then\n            \t\t\t\tlimit:set(token,hicount+1,hilimits)\n            \t\t\t\tswrite(\"ip:\"..getClientIp()..\"因攻击被暂停访问\"..hilimits..\"秒。\")\n            \t\t\t\tend\n                 if chk ~=1 then limit:incr(token,1)      end\n                --调试在syslog日志中查看\n                --swrite(\"计数器:\"..token..\"检测状态:\"..chk..\"当前计数器\"..req..\"阻止访问时间:\"..hilimits)\n\n\n            end\n        else\n        \t\tif chk ~=1 then limit:set(token,1,hiseconds) \tend\n\n        end\n    end\n    return false\nend\n\nfunction get_boundary()\n    local header = get_headers()[\"content-type\"]\n    if not header then\n        return nil\n    end\n\n    if type(header) == \"table\" then\n        header = header[1]\n    end\n\n    local m = match(header, \";%s*boundary=\\\"([^\\\"]+)\\\"\")\n    if m then\n        return m\n    end\n\n    return match(header, \";%s*boundary=([^\\\",;]+)\")\nend\n\nfunction whiteip()\n    if next(ipWhitelist) ~= nil then\n        for _,ip in pairs(ipWhitelist) do\n            if getClientIp()==ip then\n                return true\n            end\n        end\n    end\n        return false\nend\n\nfunction blockip()\n     if next(ipBlocklist) ~= nil then\n         for _,ip in pairs(ipBlocklist) do\n             if getClientIp()==ip then\n                 ngx.exit(403)\n                 return true\n             end\n         end\n     end\n         return false\nend\n```\n\n## config.lua\n\n```\nRulePath = \"/usr/local/nginx/conf/waf/wafconf/\"\nattacklog = \"on\"\n--保存日志到文件\nlogtofile = \"on\"\nlogdir = \"/site/wwwlogs/waf/\"\n--保存日志到syslog,采用nginx设置\nlogtoserver = \"off\"\n--通过syslog日志方式提交hack_ip记录到日志服务器\nloghack=\"off\"\nUrlDeny=\"on\"\nRedirect=\"on\"\nCookieMatch=\"on\"\npostMatch=\"on\"\nwhiteModule=\"on\"\nblack_fileExt={\"php\",\"jsp\"}\nipWhitelist={\"127.0.0.1\",\"192.168.2.1\"}\nipBlocklist={\"1.0.0.1\"}\n--违规ip登记，是否限制访问。\n--hackrate超过10次/5秒,限制访问1800秒。\nhackipdeny=\"on\"\nhackrate=\"10/60/1800\"\n--cc攻击防范\nCCDeny=\"on\"\nCCrate=\"30/60/30\"\nhtml=[[\n<html><head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\">\n<title>嘿，搞啥呢</title>\n<style>\np {line-height:20px;}\nul{ list-style-type:none;}\nli{ list-style-type:none;}\nbody{padding:0; margin:0; font:14px/1.5 Microsoft Yahei, 宋体,sans-serif; color:#555;}\n</style>\n</head>\n<body>\n <div style=\"margin: 0 auto; max-width:1000px; padding-top:70px; overflow:hidden;\">\n  <div style=\"padding:0 15px;\">\n    <div style=\" height:40px; line-height:40px; color:#fff; font-size:16px; overflow:hidden; background:#6bb3f6; padding-left:20px;\">咳咳，说一下</div>\n    <div style=\"border:1px dashed #cdcece; border-top:none; font-size:14px; background:#fff; color:#555; line-height:24px; height:220px; padding:20px 20px 0 20px; overflow-y:auto;background:#f3f7f9;\">\n      <p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600; color:#fc4f03;\">你被我们抓住了！</span></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">可能原因：人品有问题</p>\n<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\">如何解决：</p>\n<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1）给我们发邮件说明；</li>\n<li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2）给我们打电话说明；</li>\n<li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3）什么，上面都不行？转给我们一个亿，人品马上日日高升；</li></ul>\n    </div>\n  </div>\n</div>\n</body></html>\n]]\n```\n\n## whiteurl\n\n```\n^/zhaonvpengyou\nsite:^lianxiwo\\.com/\npath:/wogeiniliuyi.html\n```\n\n## 后话\ns\n本来还想慢慢说明一下，想想还是算了，这篇文章多是为了自己记住！我主要是基于https://github.com/loveshell/ngx_lua_waf/pull/136修改，然后依虎画猫，增加了一个判断request_uri的小功能！","source":"_posts/waf防火墙的小更新.md","raw":"---\ntitle: waf防火墙的小更新\ndate: 2018-09-12 08:10:00\ntags: \n  - waf\n  - lua\n  - 防火墙\ncategories:\n  - 技术\nurl: the-modification-of-waf-firewall\ndescription: lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。\n---\n\n> lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。\n\n## 一点絮叨\n\n很早就开始用waf，用的是ngx_lua_waf，是某位大牛开源出来的。地址是https://github.com/loveshell/ngx_lua_waf\n，感兴趣的大牛、中牛、年轻人都可以去看看。用的过程遇到过一些问题，因为长期的忙忙忙，所以，也没什么时间去多看看。最近一个项目因为要求比较严，所以，我又翻了翻ngx_lua_waf的github页面。这才发现了虽然项目已经停止更新有一段时间，还有不少的Pull\nrequests，甚至于最近的Pull requests是9天前的。把Pull requests筛选了一遍，就有了这次的小更新！\n\n## waf.lua\n\n```\nlocal content_length=tonumber(ngx.req.get_headers()['content-length'])\nlocal method=ngx.req.get_method()\n--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。\nlocal ngxmatch=ngx.re.match\n--local ngxmatch=ngx.re.find\nif whiteip() then\nelseif whiteurl() then\nelseif blockip() then\n--检测攻击ip是否被拦截。\nelseif denyhackip(1) then\nelseif denycc() then\nelseif ngx.var.http_Acunetix_Aspect then\n    ngx.exit(444)\nelseif ngx.var.http_X_Scan_Memo then\n    ngx.exit(444)\nelseif ua() then\nelseif url() then\nelseif args() then\nelseif cookie() then\nelseif PostCheck then\n    if method==\"POST\" then\n            local boundary = get_boundary()\n\t    if boundary then\n\t    local len = string.len\n            local sock, err = ngx.req.socket()\n    \t    if not sock then\n\t\t\t\t\treturn\n            end\n\t    ngx.req.init_body(128 * 1024)\n            sock:settimeout(0)\n\t    local content_length = nil\n    \t    content_length=tonumber(ngx.req.get_headers()['content-length'])\n    \t    local chunk_size = 4096\n            if content_length < chunk_size then\n\t\t\t\t\tchunk_size = content_length\n\t    end\n            local size = 0\n\t    while size < content_length do\n\t\tlocal data, err, partial = sock:receive(chunk_size)\n\t\tdata = data or partial\n\t\tif not data then\n\t\t\treturn\n\t\tend\n\t\tngx.req.append_body(data)\n        \tif body(data) then\n\t   \t        return true\n    \t    \tend\n\t\tsize = size + len(data)\n\t\tlocal m = ngxmatch(data,[[Content-Disposition: form-data;(.+)filename=\"(.+)\\.(.*)\"]],'ijo')\n        \tif m then\n            \t\tfileExtCheck(m[3])\n            \t\tfiletranslate = true\n        \telse\n            \t\tif ngxmatch(data,\"Content-Disposition:\",'isjo') then\n                \t\tfiletranslate = false\n            \t\tend\n            \t\tif filetranslate==false then\n            \t\t\tif body(data) then\n                    \t\t\treturn true\n                \t\tend\n            \t\tend\n        \tend\n\t\tlocal less = content_length - size\n\t\tif less < chunk_size then\n\t\t\tchunk_size = less\n\t\tend\n\t end\n\t ngx.req.finish_body()\n    else\n\t\t\tngx.req.read_body()\n\t\t\tlocal args = ngx.req.get_post_args()\n\t\t\tif not args then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tfor key, val in pairs(args) do\n\t\t\t\tif type(val) == \"table\" then\n\t\t\t\t\tif type(val[1]) == \"boolean\" then\n\t\t\t\t\t\treturn\n\t\t\t\t\tend\n\t\t\t\t\tdata=table.concat(val, \", \")\n\t\t\t\telse\n\t\t\t\t\tdata=val\n\t\t\t\tend\n\t\t\t\tif data and type(data) ~= \"boolean\" and body(data) then\n                \t\t\tbody(key)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tend\n\nelse\n    return\nend\n```\n\n## socket.lua\n\n```\n-- Copyright (C) 2013-2014 Jiale Zhi (calio), CloudFlare Inc.\n--require \"luacov\"\n\nlocal concat                = table.concat\nlocal tcp                   = ngx.socket.tcp\nlocal udp                   = ngx.socket.udp\nlocal timer_at              = ngx.timer.at\nlocal ngx_log               = ngx.log\nlocal ngx_sleep             = ngx.sleep\nlocal type                  = type\nlocal pairs                 = pairs\nlocal tostring              = tostring\nlocal debug                 = ngx.config.debug\n\nlocal DEBUG                 = ngx.DEBUG\nlocal CRIT                  = ngx.CRIT\n\nlocal MAX_PORT              = 65535\n\n\n-- table.new(narr, nrec)\nlocal succ, new_tab = pcall(require, \"table.new\")\nif not succ then\n    new_tab = function () return {} end\nend\n\nlocal _M = new_tab(0, 5)\n\nlocal is_exiting\n\nif not ngx.config or not ngx.config.ngx_lua_version\n    or ngx.config.ngx_lua_version < 9003 then\n\n    is_exiting = function() return false end\n\n    ngx_log(CRIT, \"We strongly recommend you to update your ngx_lua module to \"\n            .. \"0.9.3 or above. lua-resty-logger-socket will lose some log \"\n            .. \"messages when Nginx reloads if it works with ngx_lua module \"\n            .. \"below 0.9.3\")\nelse\n    is_exiting = ngx.worker.exiting\nend\n\n\n_M._VERSION = '0.03'\n\n-- user config\nlocal flush_limit           = 4096         -- 4KB\nlocal drop_limit            = 1048576      -- 1MB\nlocal timeout               = 1000         -- 1 sec\nlocal host\nlocal port\nlocal ssl                   = false\nlocal ssl_verify            = true\nlocal sni_host\nlocal path\nlocal max_buffer_reuse      = 10000        -- reuse buffer for at most 10000\n                                           -- times\nlocal periodic_flush        = nil\nlocal need_periodic_flush   = nil\nlocal sock_type             = 'tcp'\n\n-- internal variables\nlocal buffer_size           = 0\n-- 2nd level buffer, it stores logs ready to be sent out\nlocal send_buffer           = \"\"\n-- 1st level buffer, it stores incoming logs\nlocal log_buffer_data       = new_tab(20000, 0)\n-- number of log lines in current 1st level buffer, starts from 0\nlocal log_buffer_index      = 0\n\nlocal last_error\n\nlocal connecting\nlocal connected\nlocal exiting\nlocal retry_connect         = 0\nlocal retry_send            = 0\nlocal max_retry_times       = 3\nlocal retry_interval        = 100         -- 0.1s\nlocal pool_size             = 10\nlocal flushing\nlocal logger_initted\nlocal counter               = 0\nlocal ssl_session\n\nlocal function _write_error(msg)\n    last_error = msg\nend\n\nlocal function _do_connect()\n    local ok, err, sock\n\n    if not connected then\n        if (sock_type == 'udp') then\n            sock, err = udp()\n        else\n            sock, err = tcp()\n        end\n\n        if not sock then\n            _write_error(err)\n            return nil, err\n        end\n\n        sock:settimeout(timeout)\n    end\n\n    -- \"host\"/\"port\" and \"path\" have already been checked in init()\n    if host and port then\n        if (sock_type == 'udp') then\n            ok, err = sock:setpeername(host, port)\n        else\n            ok, err = sock:connect(host, port)\n        end\n    elseif path then\n        ok, err = sock:connect(\"unix:\" .. path)\n    end\n\n    if not ok then\n        return nil, err\n    end\n\n    return sock\nend\n\nlocal function _do_handshake(sock)\n    if not ssl then\n        return sock\n    end\n\n    local session, err = sock:sslhandshake(ssl_session, sni_host or host,\n                                           ssl_verify)\n    if not session then\n        return nil, err\n    end\n\n    ssl_session = session\n    return sock\nend\n\nlocal function _connect()\n    local err, sock\n\n    if connecting then\n        if debug then\n            ngx_log(DEBUG, \"previous connection not finished\")\n        end\n        return nil, \"previous connection not finished\"\n    end\n\n    connected = false\n    connecting = true\n\n    retry_connect = 0\n\n    while retry_connect <= max_retry_times do\n        sock, err = _do_connect()\n\n        if sock then\n            sock, err = _do_handshake(sock)\n            if sock then\n                connected = true\n                break\n            end\n        end\n\n        if debug then\n            ngx_log(DEBUG, \"reconnect to the log server: \", err)\n        end\n\n        -- ngx.sleep time is in seconds\n        if not exiting then\n            ngx_sleep(retry_interval / 1000)\n        end\n\n        retry_connect = retry_connect + 1\n    end\n\n    connecting = false\n    if not connected then\n        return nil, \"try to connect to the log server failed after \"\n                    .. max_retry_times .. \" retries: \" .. err\n    end\n\n    return sock\nend\n\nlocal function _prepare_stream_buffer()\n    local packet = concat(log_buffer_data, \"\", 1, log_buffer_index)\n    send_buffer = send_buffer .. packet\n\n    log_buffer_index = 0\n    counter = counter + 1\n    if counter > max_buffer_reuse then\n        log_buffer_data = new_tab(20000, 0)\n        counter = 0\n        if debug then\n            ngx_log(DEBUG, \"log buffer reuse limit (\" .. max_buffer_reuse\n                    .. \") reached, create a new \\\"log_buffer_data\\\"\")\n        end\n    end\nend\n\nlocal function _do_flush()\n    local ok, err, sock, bytes\n    local packet = send_buffer\n\n    sock, err = _connect()\n    if not sock then\n        return nil, err\n    end\n\n    bytes, err = sock:send(packet)\n    if not bytes then\n        -- \"sock:send\" always closes current connection on error\n        return nil, err\n    end\n\n    if debug then\n        ngx.update_time()\n        ngx_log(DEBUG, ngx.now(), \":log flush:\" .. bytes .. \":\" .. packet)\n    end\n\n    if (sock_type ~= 'udp') then\n        ok, err = sock:setkeepalive(0, pool_size)\n        if not ok then\n            return nil, err\n        end\n    end\n\n    return bytes\nend\n\nlocal function _need_flush()\n    if buffer_size > 0 then\n        return true\n    end\n\n    return false\nend\n\nlocal function _flush_lock()\n    if not flushing then\n        if debug then\n            ngx_log(DEBUG, \"flush lock acquired\")\n        end\n        flushing = true\n        return true\n    end\n    return false\nend\n\nlocal function _flush_unlock()\n    if debug then\n        ngx_log(DEBUG, \"flush lock released\")\n    end\n    flushing = false\nend\n\nlocal function _flush()\n    local err\n\n    -- pre check\n    if not _flush_lock() then\n        if debug then\n            ngx_log(DEBUG, \"previous flush not finished\")\n        end\n        -- do this later\n        return true\n    end\n\n    if not _need_flush() then\n        if debug then\n            ngx_log(DEBUG, \"no need to flush:\", log_buffer_index)\n        end\n        _flush_unlock()\n        return true\n    end\n\n    -- start flushing\n    retry_send = 0\n    if debug then\n        ngx_log(DEBUG, \"start flushing\")\n    end\n\n    local bytes\n    while retry_send <= max_retry_times do\n        if log_buffer_index > 0 then\n            _prepare_stream_buffer()\n        end\n\n        bytes, err = _do_flush()\n\n        if bytes then\n            break\n        end\n\n        if debug then\n            ngx_log(DEBUG, \"resend log messages to the log server: \", err)\n        end\n\n        -- ngx.sleep time is in seconds\n        if not exiting then\n            ngx_sleep(retry_interval / 1000)\n        end\n\n        retry_send = retry_send + 1\n    end\n\n    _flush_unlock()\n\n    if not bytes then\n        local err_msg = \"try to send log messages to the log server \"\n                        .. \"failed after \" .. max_retry_times .. \" retries: \"\n                        .. err\n        _write_error(err_msg)\n        return nil, err_msg\n    else\n        if debug then\n            ngx_log(DEBUG, \"send \" .. bytes .. \" bytes\")\n        end\n    end\n\n    buffer_size = buffer_size - #send_buffer\n    send_buffer = \"\"\n\n    return bytes\nend\n\nlocal function _periodic_flush(premature)\n    if premature then\n        exiting = true\n    end\n\n    if need_periodic_flush or exiting then\n        -- no regular flush happened after periodic flush timer had been set\n        if debug then\n            ngx_log(DEBUG, \"performing periodic flush\")\n        end\n        _flush()\n    else\n        if debug then\n            ngx_log(DEBUG, \"no need to perform periodic flush: regular flush \"\n                    .. \"happened before\")\n        end\n        need_periodic_flush = true\n    end\n\n    timer_at(periodic_flush, _periodic_flush)\nend\n\nlocal function _flush_buffer()\n    local ok, err = timer_at(0, _flush)\n\n    need_periodic_flush = false\n\n    if not ok then\n        _write_error(err)\n        return nil, err\n    end\nend\n\nlocal function _write_buffer(msg, len)\n    log_buffer_index = log_buffer_index + 1\n    log_buffer_data[log_buffer_index] = msg\n\n    buffer_size = buffer_size + len\n\n\n    return buffer_size\nend\n\nfunction _M.init(user_config)\n    if (type(user_config) ~= \"table\") then\n        return nil, \"user_config must be a table\"\n    end\n\n    for k, v in pairs(user_config) do\n        if k == \"host\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"host\" must be a string'\n            end\n            host = v\n        elseif k == \"port\" then\n            if type(v) ~= \"number\" then\n                return nil, '\"port\" must be a number'\n            end\n            if v < 0 or v > MAX_PORT then\n                return nil, ('\"port\" out of range 0~%s'):format(MAX_PORT)\n            end\n            port = v\n        elseif k == \"path\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"path\" must be a string'\n            end\n            path = v\n        elseif k == \"sock_type\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"sock_type\" must be a string'\n            end\n            if v ~= \"tcp\" and v ~= \"udp\" then\n                return nil, '\"sock_type\" must be \"tcp\" or \"udp\"'\n            end\n            sock_type = v\n        elseif k == \"flush_limit\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"flush_limit\"'\n            end\n            flush_limit = v\n        elseif k == \"drop_limit\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"drop_limit\"'\n            end\n            drop_limit = v\n        elseif k == \"timeout\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"timeout\"'\n            end\n            timeout = v\n        elseif k == \"max_retry_times\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"max_retry_times\"'\n            end\n            max_retry_times = v\n        elseif k == \"retry_interval\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"retry_interval\"'\n            end\n            -- ngx.sleep time is in seconds\n            retry_interval = v\n        elseif k == \"pool_size\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"pool_size\"'\n            end\n            pool_size = v\n        elseif k == \"max_buffer_reuse\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"max_buffer_reuse\"'\n            end\n            max_buffer_reuse = v\n        elseif k == \"periodic_flush\" then\n            if type(v) ~= \"number\" or v < 0 then\n                return nil, 'invalid \"periodic_flush\"'\n            end\n            periodic_flush = v\n        elseif k == \"ssl\" then\n            if type(v) ~= \"boolean\" then\n                return nil, '\"ssl\" must be a boolean value'\n            end\n            ssl = v\n        elseif k == \"ssl_verify\" then\n            if type(v) ~= \"boolean\" then\n                return nil, '\"ssl_verify\" must be a boolean value'\n            end\n            ssl_verify = v\n        elseif k == \"sni_host\" then\n            if type(v) ~= \"string\" then\n                return nil, '\"sni_host\" must be a string'\n            end\n            sni_host = v\n        end\n    end\n\n    if not (host and port) and not path then\n        return nil, \"no logging server configured. \\\"host\\\"/\\\"port\\\" or \"\n                .. \"\\\"path\\\" is required.\"\n    end\n\n\n    if (flush_limit >= drop_limit) then\n        return nil, \"\\\"flush_limit\\\" should be < \\\"drop_limit\\\"\"\n    end\n\n    flushing = false\n    exiting = false\n    connecting = false\n\n    connected = false\n    retry_connect = 0\n    retry_send = 0\n\n    logger_initted = true\n\n    if periodic_flush then\n        if debug then\n            ngx_log(DEBUG, \"periodic flush enabled for every \"\n                    .. periodic_flush .. \" seconds\")\n        end\n        need_periodic_flush = true\n        timer_at(periodic_flush, _periodic_flush)\n    end\n\n    return logger_initted\nend\n\nfunction _M.log(msg)\n    if not logger_initted then\n        return nil, \"not initialized\"\n    end\n\n    local bytes\n\n    if type(msg) ~= \"string\" then\n        msg = tostring(msg)\n    end\n\n    local msg_len = #msg\n\n    if (debug) then\n        ngx.update_time()\n        ngx_log(DEBUG, ngx.now(), \":log message length: \" .. msg_len)\n    end\n\n    -- response of \"_flush_buffer\" is not checked, because it writes\n    -- error buffer\n    if (is_exiting()) then\n        exiting = true\n        _write_buffer(msg, msg_len)\n        _flush_buffer()\n        if (debug) then\n            ngx_log(DEBUG, \"Nginx worker is exiting\")\n        end\n        bytes = 0\n    elseif (msg_len + buffer_size < flush_limit) then\n        _write_buffer(msg, msg_len)\n        bytes = msg_len\n    elseif (msg_len + buffer_size <= drop_limit) then\n        _write_buffer(msg, msg_len)\n        _flush_buffer()\n        bytes = msg_len\n    else\n        _flush_buffer()\n        if (debug) then\n            ngx_log(DEBUG, \"logger buffer is full, this log message will be \"\n                    .. \"dropped\")\n        end\n        bytes = 0\n        --- this log message doesn't fit in buffer, drop it\n    end\n\n    if last_error then\n        local err = last_error\n        last_error = nil\n        return bytes, err\n    end\n\n    return bytes\nend\n\nfunction _M.initted()\n    return logger_initted\nend\n\n_M.flush = _flush\n\nreturn _M\n```\n\n## init.lua\n\n```\nrequire 'config'\nlocal match = string.match\n--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。\n--因nginx和lua一起的关系，正则表达式使用\\d\\w\\s会出问题，\n--local ngxmatch=ngx.re.match\nlocal ngxmatch=ngx.re.find\nlocal unescape=ngx.unescape_uri\nlocal get_headers = ngx.req.get_headers\nlocal optionIsOn = function (options) return options == \"on\" and true or false end\nloghack=optionIsOn(loghack)\n--载入socket.lua用于发送log到独立syslog服务器。\nlocal logger = require \"socket\"\nif loghack then\n\n\n\tif not logger.initted() then\n          local ok, err = logger.init{\n              --host = '192.168.0.1',\n              host = 'logserver.local',\n              port = 514,\n              sock_type = \"udp\", --udp协议\n              flush_limit = 1,\t--立即发送\n              --drop_limit = 5678,\n              pool_size = 100,--连接池大小\n          }\n          if not ok then\n              ngx.log(ngx.ERR, \"failed to initialize the logger: \",\n                      err)\n              return\n          end\n end\nend\n\n\nlogpath = logdir\nrulepath = RulePath\nlogtofile = optionIsOn(logtofile)\nlogtoserver = optionIsOn(logtoserver)\nUrlDeny = optionIsOn(UrlDeny)\nPostCheck = optionIsOn(postMatch)\nCookieCheck = optionIsOn(cookieMatch)\nWhiteCheck = optionIsOn(whiteModule)\nPathInfoFix = optionIsOn(PathInfoFix)\nattacklog = optionIsOn(attacklog)\nhackipdeny = optionIsOn(hackipdeny)\nCCDeny = optionIsOn(CCDeny)\nRedirect=optionIsOn(Redirect)\nlocal file = io.open('config')\n\nfunction getClientIp()\n        IP  = ngx.var.remote_addr\n        if IP == nil then\n                IP  = \"unknown\"\n        end\n        return IP\nend\nfunction write(logfile,msg)\n    local fd = io.open(logfile,\"ab\")\n    if fd == nil then return end\n    fd:write(msg)\n    fd:flush()\n    fd:close()\nend\n\nfunction swrite(msg)\n      --保存警告等级要高于nginx error_log的默认等级。\n\t\t\tngx.log(ngx.CRIT,msg)\n\n\n\nend\n\nfunction log(method,url,data,ruletag)\n    if attacklog then\n        local realIp = getClientIp()\n        local ua = ngx.var.http_user_agent\n        if ua == nil then\n        \tua=\"null\"\n        end\n        local servername=ngx.var.host\n        local time=ngx.localtime()\n        if logtofile then\n        local filename = logpath..'/'..servername..\"_\"..ngx.today()..\"_sec.log\"\n        line=realIp..\" [\"..time..\"]\"..\"\\\"\"..method..\" \"..servername..url..\"\\\"\"..data..\"\\\"\"..ua..\"\\\"\"..ruletag..\"\\\"\"..\"\\n\"\n        write(filename,line)\n        end\n        if logtoserver then\n        line=realIp..\"\\\"\"..method..\" \"..servername..url..\"\\\"\"..data..\"\\\"\"..ua..\"\\\"\"..ruletag..\"\\\"\"\n        --line=\"lua_waf:\"..line\n        swrite(line)\n        end\n    --发送ip到独立syslog服务器。\n    if loghack then  local bytes, err = logger.log(getClientIp()) end\n\t\t--只要log记录，说明被攻击，利用denyhackip将ip记录。\n\t\tif hackipdeny then  denyhackip(0) end\n    end\nend\n------------------------------------规则读取函数-------------------------------------------------------------------\nfunction read_rule(var)\n    file = io.open(rulepath..'/'..var,\"r\")\n    if file==nil then\n        return\n    end\n    t = {}\n    for line in file:lines() do\n        table.insert(t,line)\n    end\n    file:close()\n    return(t)\nend\n\nurlrules=read_rule('url')\nargsrules=read_rule('args')\nuarules=read_rule('user-agent')\nwturlrules=read_rule('whiteurl')\npostrules=read_rule('post')\nckrules=read_rule('cookie')\n\n\nfunction say_html()\n    if Redirect then\n        ngx.header.content_type = \"text/html\"\n        ngx.status = ngx.HTTP_FORBIDDEN\n        ngx.say(html)\n        ngx.exit(ngx.status)\n    end\nend\n\nfunction whiteurl()\n    if WhiteCheck then\n        if wturlrules ~=nil then\n\t\t\t\t\t\tlocal urlpath = string.gsub(ngx.var.request_uri, \"?.*\", \"\")\n            for _,rule in pairs(wturlrules) do\n            --针对site:开始的进行域名匹配。增加白名单用处。\n\t            local sitemod,_=string.find(rule,\"site:\")\n\t        \t\tif sitemod==1 then\n\t        \t\t\trule=string.gsub(rule,\"site:\",\"\",1)\n\t        \t\t\t--调试whiteurl\n\t        \t\t\t--if ngx.var.host=='domino.cqhrss.gov.cn' then\n\t        \t\t\t--\tlog('debug',ngx.var.uri,\"\",rule)\n\t        \t\t\t--end\n\t        \t\t\tif ngxmatch(ngx.var.host..ngx.var.uri,rule,\"isjo\") then\n                    return true\n                end\n\t        \t\telse\n            \t\tif ngxmatch(ngx.var.uri,rule,\"isjo\") then\n                    return true\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tlocal pathmod,_=string.find(rule,\"path:\")\n\t\t\t        \t\tif pathmod==1 then\n\t\t\t        \t\t\trule=string.gsub(rule,\"path:\",\"\",1)\n\t\t\t        \t\t\tif urlpath==rule then\n\t\t                    return true\n\t\t                end\n\t\t\t\t\t\t\t\t\tend\n                end\n            \tend\n            end\n        end\n    end\n    return false\nend\n\nfunction fileExtCheck(ext)\n    local items = Set(black_fileExt)\n    ext=string.lower(ext)\n    if ext then\n        for rule,_ in pairs(items) do\n            if ngxmatch(ext,rule,\"isjo\") then\n            log('POST',ngx.var.request_uri,\"-\",\"file attack with ext \"..ext)\n            say_html()\n            end\n        end\n    end\n    return false\nend\nfunction Set (list)\n  local set = {}\n  for _, l in ipairs(list) do set[l] = true end\n  return set\nend\nfunction args()\n    for _,rule in pairs(argsrules) do\n        local args = ngx.req.get_uri_args()\n        for key, val in pairs(args) do\n            if type(val)=='table' then\n                 local t={}\n                 for k,v in pairs(val) do\n                    if v == true then\n                        v=\"\"\n                    end\n                    table.insert(t,v)\n                end\n                data=table.concat(t, \" \")\n            else\n                data=val\n            end\n            if data and type(data) ~= \"boolean\" and rule ~=\"\" and ngxmatch(unescape(data),rule,\"isjo\") then\n                log('GET',ngx.var.request_uri,\"-\",rule)\n                say_html()\n                return true\n            end\n        end\n    end\n    return false\nend\n\n\nfunction url()\n    if UrlDeny then\n        for _,rule in pairs(urlrules) do\n            if rule ~=\"\" and ngxmatch(ngx.var.request_uri,rule,\"isjo\") then\n                log('GET',ngx.var.request_uri,\"-\",rule)\n                say_html()\n                return true\n            end\n        end\n    end\n    return false\nend\n\nfunction ua()\n    local ua = ngx.var.http_user_agent\n    if ua ~= nil then\n        for _,rule in pairs(uarules) do\n            if rule ~=\"\" and ngxmatch(ua,rule,\"isjo\") then\n                log('UA',ngx.var.request_uri,\"-\",rule)\n                say_html()\n            return true\n            end\n        end\n    end\n    return false\nend\nfunction body(data)\n    for _,rule in pairs(postrules) do\n        if rule ~=\"\" and data~=\"\" and ngxmatch(unescape(data),rule,\"isjo\") then\n            log('POST',ngx.var.request_uri,data,rule)\n            say_html()\n            return true\n        end\n    end\n    return false\nend\nfunction cookie()\n    local ck = ngx.var.http_cookie\n    if CookieCheck and ck then\n        for _,rule in pairs(ckrules) do\n            if rule ~=\"\" and ngxmatch(ck,rule,\"isjo\") then\n                log('Cookie',ngx.var.request_uri,\"-\",rule)\n                say_html()\n            return true\n            end\n        end\n    end\n    return false\nend\n\nfunction denycc()\n    if CCDeny then\n        local uri=ngx.var.uri\n      \tlocal m, err = ngx.re.match(CCrate,'([0-9]+)/([0-9]+)/([0-9]+)')\n      \tlocal CCcount=tonumber(m[1]) --计数器上限\n        local CCseconds=tonumber(m[2]) --计时器\n        local CClimits=tonumber(m[3]) --阻止访问时间\n        local token = getClientIp()..uri\n        local limit = ngx.shared.limit\n        local req,_=limit:get(token) --计数器当前值\n\n        if req then\n            if req > CCcount then\n                ngx.exit(404)\n                return true\n            else\n            \t\tif req == CCcount then    limit:set(token,CCcount+1,CClimits)  end\n\n                limit:incr(token,1)\n\t\t\t\t\t\t\t\t--调试在syslog日志中查看\n\t\t\t\t\t\t\t\t--swrite('计数器:'..token..'当前计数器'..req..'阻止访问时间:'..CClimits)\n\n            end\n        else\n            limit:set(token,1,CCseconds)\n        end\n    end\n    return false\nend\n\n--chk为1表示检测值，不增加，不创建，返回检测结果。\nfunction denyhackip(chk)\n    if hackipdeny then\n\n       local m, err = ngx.re.match(hackrate,'([0-9]+)/([0-9]+)/([0-9]+)')\n      \tlocal hicount=tonumber(m[1]) --计数器上限\n        local hiseconds=tonumber(m[2]) --计时器\n        local hilimits=tonumber(m[3]) --阻止访问时间\n        local token = \"hackip\"..getClientIp()\n        local limit = ngx.shared.limit\n        local req,_=limit:get(token) --计数器当前值\n        if req then\n            if req > hicount then\n                ngx.exit(404)\n                return true\n            else\n\n            \t\tif req == hicount then\n            \t\t\t\tlimit:set(token,hicount+1,hilimits)\n            \t\t\t\tswrite(\"ip:\"..getClientIp()..\"因攻击被暂停访问\"..hilimits..\"秒。\")\n            \t\t\t\tend\n                 if chk ~=1 then limit:incr(token,1)      end\n                --调试在syslog日志中查看\n                --swrite(\"计数器:\"..token..\"检测状态:\"..chk..\"当前计数器\"..req..\"阻止访问时间:\"..hilimits)\n\n\n            end\n        else\n        \t\tif chk ~=1 then limit:set(token,1,hiseconds) \tend\n\n        end\n    end\n    return false\nend\n\nfunction get_boundary()\n    local header = get_headers()[\"content-type\"]\n    if not header then\n        return nil\n    end\n\n    if type(header) == \"table\" then\n        header = header[1]\n    end\n\n    local m = match(header, \";%s*boundary=\\\"([^\\\"]+)\\\"\")\n    if m then\n        return m\n    end\n\n    return match(header, \";%s*boundary=([^\\\",;]+)\")\nend\n\nfunction whiteip()\n    if next(ipWhitelist) ~= nil then\n        for _,ip in pairs(ipWhitelist) do\n            if getClientIp()==ip then\n                return true\n            end\n        end\n    end\n        return false\nend\n\nfunction blockip()\n     if next(ipBlocklist) ~= nil then\n         for _,ip in pairs(ipBlocklist) do\n             if getClientIp()==ip then\n                 ngx.exit(403)\n                 return true\n             end\n         end\n     end\n         return false\nend\n```\n\n## config.lua\n\n```\nRulePath = \"/usr/local/nginx/conf/waf/wafconf/\"\nattacklog = \"on\"\n--保存日志到文件\nlogtofile = \"on\"\nlogdir = \"/site/wwwlogs/waf/\"\n--保存日志到syslog,采用nginx设置\nlogtoserver = \"off\"\n--通过syslog日志方式提交hack_ip记录到日志服务器\nloghack=\"off\"\nUrlDeny=\"on\"\nRedirect=\"on\"\nCookieMatch=\"on\"\npostMatch=\"on\"\nwhiteModule=\"on\"\nblack_fileExt={\"php\",\"jsp\"}\nipWhitelist={\"127.0.0.1\",\"192.168.2.1\"}\nipBlocklist={\"1.0.0.1\"}\n--违规ip登记，是否限制访问。\n--hackrate超过10次/5秒,限制访问1800秒。\nhackipdeny=\"on\"\nhackrate=\"10/60/1800\"\n--cc攻击防范\nCCDeny=\"on\"\nCCrate=\"30/60/30\"\nhtml=[[\n<html><head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\">\n<title>嘿，搞啥呢</title>\n<style>\np {line-height:20px;}\nul{ list-style-type:none;}\nli{ list-style-type:none;}\nbody{padding:0; margin:0; font:14px/1.5 Microsoft Yahei, 宋体,sans-serif; color:#555;}\n</style>\n</head>\n<body>\n <div style=\"margin: 0 auto; max-width:1000px; padding-top:70px; overflow:hidden;\">\n  <div style=\"padding:0 15px;\">\n    <div style=\" height:40px; line-height:40px; color:#fff; font-size:16px; overflow:hidden; background:#6bb3f6; padding-left:20px;\">咳咳，说一下</div>\n    <div style=\"border:1px dashed #cdcece; border-top:none; font-size:14px; background:#fff; color:#555; line-height:24px; height:220px; padding:20px 20px 0 20px; overflow-y:auto;background:#f3f7f9;\">\n      <p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600; color:#fc4f03;\">你被我们抓住了！</span></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">可能原因：人品有问题</p>\n<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;\">如何解决：</p>\n<ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1）给我们发邮件说明；</li>\n<li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2）给我们打电话说明；</li>\n<li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3）什么，上面都不行？转给我们一个亿，人品马上日日高升；</li></ul>\n    </div>\n  </div>\n</div>\n</body></html>\n]]\n```\n\n## whiteurl\n\n```\n^/zhaonvpengyou\nsite:^lianxiwo\\.com/\npath:/wogeiniliuyi.html\n```\n\n## 后话\ns\n本来还想慢慢说明一下，想想还是算了，这篇文章多是为了自己记住！我主要是基于https://github.com/loveshell/ngx_lua_waf/pull/136修改，然后依虎画猫，增加了一个判断request_uri的小功能！","slug":"waf防火墙的小更新","published":1,"updated":"2022-05-12T17:08:29.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au7000mlvtd82b86neg","content":"<blockquote>\n<p>lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。</p>\n</blockquote>\n<h2 id=\"一点絮叨\"><a href=\"#一点絮叨\" class=\"headerlink\" title=\"一点絮叨\"></a>一点絮叨</h2><p>很早就开始用waf，用的是ngx_lua_waf，是某位大牛开源出来的。地址是<a href=\"https://github.com/loveshell/ngx_lua_waf\">https://github.com/loveshell/ngx_lua_waf</a><br>，感兴趣的大牛、中牛、年轻人都可以去看看。用的过程遇到过一些问题，因为长期的忙忙忙，所以，也没什么时间去多看看。最近一个项目因为要求比较严，所以，我又翻了翻ngx_lua_waf的github页面。这才发现了虽然项目已经停止更新有一段时间，还有不少的Pull<br>requests，甚至于最近的Pull requests是9天前的。把Pull requests筛选了一遍，就有了这次的小更新！</p>\n<h2 id=\"waf-lua\"><a href=\"#waf-lua\" class=\"headerlink\" title=\"waf.lua\"></a>waf.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local content_length=tonumber(ngx.req.get_headers()[&#x27;content-length&#x27;])</span><br><span class=\"line\">local method=ngx.req.get_method()</span><br><span class=\"line\">--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。</span><br><span class=\"line\">local ngxmatch=ngx.re.match</span><br><span class=\"line\">--local ngxmatch=ngx.re.find</span><br><span class=\"line\">if whiteip() then</span><br><span class=\"line\">elseif whiteurl() then</span><br><span class=\"line\">elseif blockip() then</span><br><span class=\"line\">--检测攻击ip是否被拦截。</span><br><span class=\"line\">elseif denyhackip(1) then</span><br><span class=\"line\">elseif denycc() then</span><br><span class=\"line\">elseif ngx.var.http_Acunetix_Aspect then</span><br><span class=\"line\">    ngx.exit(444)</span><br><span class=\"line\">elseif ngx.var.http_X_Scan_Memo then</span><br><span class=\"line\">    ngx.exit(444)</span><br><span class=\"line\">elseif ua() then</span><br><span class=\"line\">elseif url() then</span><br><span class=\"line\">elseif args() then</span><br><span class=\"line\">elseif cookie() then</span><br><span class=\"line\">elseif PostCheck then</span><br><span class=\"line\">    if method==&quot;POST&quot; then</span><br><span class=\"line\">            local boundary = get_boundary()</span><br><span class=\"line\">\t    if boundary then</span><br><span class=\"line\">\t    local len = string.len</span><br><span class=\"line\">            local sock, err = ngx.req.socket()</span><br><span class=\"line\">    \t    if not sock then</span><br><span class=\"line\">\t\t\t\t\treturn</span><br><span class=\"line\">            end</span><br><span class=\"line\">\t    ngx.req.init_body(128 * 1024)</span><br><span class=\"line\">            sock:settimeout(0)</span><br><span class=\"line\">\t    local content_length = nil</span><br><span class=\"line\">    \t    content_length=tonumber(ngx.req.get_headers()[&#x27;content-length&#x27;])</span><br><span class=\"line\">    \t    local chunk_size = 4096</span><br><span class=\"line\">            if content_length &lt; chunk_size then</span><br><span class=\"line\">\t\t\t\t\tchunk_size = content_length</span><br><span class=\"line\">\t    end</span><br><span class=\"line\">            local size = 0</span><br><span class=\"line\">\t    while size &lt; content_length do</span><br><span class=\"line\">\t\tlocal data, err, partial = sock:receive(chunk_size)</span><br><span class=\"line\">\t\tdata = data or partial</span><br><span class=\"line\">\t\tif not data then</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t\tngx.req.append_body(data)</span><br><span class=\"line\">        \tif body(data) then</span><br><span class=\"line\">\t   \t        return true</span><br><span class=\"line\">    \t    \tend</span><br><span class=\"line\">\t\tsize = size + len(data)</span><br><span class=\"line\">\t\tlocal m = ngxmatch(data,[[Content-Disposition: form-data;(.+)filename=&quot;(.+)\\.(.*)&quot;]],&#x27;ijo&#x27;)</span><br><span class=\"line\">        \tif m then</span><br><span class=\"line\">            \t\tfileExtCheck(m[3])</span><br><span class=\"line\">            \t\tfiletranslate = true</span><br><span class=\"line\">        \telse</span><br><span class=\"line\">            \t\tif ngxmatch(data,&quot;Content-Disposition:&quot;,&#x27;isjo&#x27;) then</span><br><span class=\"line\">                \t\tfiletranslate = false</span><br><span class=\"line\">            \t\tend</span><br><span class=\"line\">            \t\tif filetranslate==false then</span><br><span class=\"line\">            \t\t\tif body(data) then</span><br><span class=\"line\">                    \t\t\treturn true</span><br><span class=\"line\">                \t\tend</span><br><span class=\"line\">            \t\tend</span><br><span class=\"line\">        \tend</span><br><span class=\"line\">\t\tlocal less = content_length - size</span><br><span class=\"line\">\t\tif less &lt; chunk_size then</span><br><span class=\"line\">\t\t\tchunk_size = less</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t end</span><br><span class=\"line\">\t ngx.req.finish_body()</span><br><span class=\"line\">    else</span><br><span class=\"line\">\t\t\tngx.req.read_body()</span><br><span class=\"line\">\t\t\tlocal args = ngx.req.get_post_args()</span><br><span class=\"line\">\t\t\tif not args then</span><br><span class=\"line\">\t\t\t\treturn</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\t\t\tfor key, val in pairs(args) do</span><br><span class=\"line\">\t\t\t\tif type(val) == &quot;table&quot; then</span><br><span class=\"line\">\t\t\t\t\tif type(val[1]) == &quot;boolean&quot; then</span><br><span class=\"line\">\t\t\t\t\t\treturn</span><br><span class=\"line\">\t\t\t\t\tend</span><br><span class=\"line\">\t\t\t\t\tdata=table.concat(val, &quot;, &quot;)</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\tdata=val</span><br><span class=\"line\">\t\t\t\tend</span><br><span class=\"line\">\t\t\t\tif data and type(data) ~= &quot;boolean&quot; and body(data) then</span><br><span class=\"line\">                \t\t\tbody(key)</span><br><span class=\"line\">\t\t\t\tend</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\">    return</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"socket-lua\"><a href=\"#socket-lua\" class=\"headerlink\" title=\"socket.lua\"></a>socket.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Copyright (C) 2013-2014 Jiale Zhi (calio), CloudFlare Inc.</span><br><span class=\"line\">--require &quot;luacov&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">local concat                = table.concat</span><br><span class=\"line\">local tcp                   = ngx.socket.tcp</span><br><span class=\"line\">local udp                   = ngx.socket.udp</span><br><span class=\"line\">local timer_at              = ngx.timer.at</span><br><span class=\"line\">local ngx_log               = ngx.log</span><br><span class=\"line\">local ngx_sleep             = ngx.sleep</span><br><span class=\"line\">local type                  = type</span><br><span class=\"line\">local pairs                 = pairs</span><br><span class=\"line\">local tostring              = tostring</span><br><span class=\"line\">local debug                 = ngx.config.debug</span><br><span class=\"line\"></span><br><span class=\"line\">local DEBUG                 = ngx.DEBUG</span><br><span class=\"line\">local CRIT                  = ngx.CRIT</span><br><span class=\"line\"></span><br><span class=\"line\">local MAX_PORT              = 65535</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- table.new(narr, nrec)</span><br><span class=\"line\">local succ, new_tab = pcall(require, &quot;table.new&quot;)</span><br><span class=\"line\">if not succ then</span><br><span class=\"line\">    new_tab = function () return &#123;&#125; end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local _M = new_tab(0, 5)</span><br><span class=\"line\"></span><br><span class=\"line\">local is_exiting</span><br><span class=\"line\"></span><br><span class=\"line\">if not ngx.config or not ngx.config.ngx_lua_version</span><br><span class=\"line\">    or ngx.config.ngx_lua_version &lt; 9003 then</span><br><span class=\"line\"></span><br><span class=\"line\">    is_exiting = function() return false end</span><br><span class=\"line\"></span><br><span class=\"line\">    ngx_log(CRIT, &quot;We strongly recommend you to update your ngx_lua module to &quot;</span><br><span class=\"line\">            .. &quot;0.9.3 or above. lua-resty-logger-socket will lose some log &quot;</span><br><span class=\"line\">            .. &quot;messages when Nginx reloads if it works with ngx_lua module &quot;</span><br><span class=\"line\">            .. &quot;below 0.9.3&quot;)</span><br><span class=\"line\">else</span><br><span class=\"line\">    is_exiting = ngx.worker.exiting</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_M._VERSION = &#x27;0.03&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">-- user config</span><br><span class=\"line\">local flush_limit           = 4096         -- 4KB</span><br><span class=\"line\">local drop_limit            = 1048576      -- 1MB</span><br><span class=\"line\">local timeout               = 1000         -- 1 sec</span><br><span class=\"line\">local host</span><br><span class=\"line\">local port</span><br><span class=\"line\">local ssl                   = false</span><br><span class=\"line\">local ssl_verify            = true</span><br><span class=\"line\">local sni_host</span><br><span class=\"line\">local path</span><br><span class=\"line\">local max_buffer_reuse      = 10000        -- reuse buffer for at most 10000</span><br><span class=\"line\">                                           -- times</span><br><span class=\"line\">local periodic_flush        = nil</span><br><span class=\"line\">local need_periodic_flush   = nil</span><br><span class=\"line\">local sock_type             = &#x27;tcp&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">-- internal variables</span><br><span class=\"line\">local buffer_size           = 0</span><br><span class=\"line\">-- 2nd level buffer, it stores logs ready to be sent out</span><br><span class=\"line\">local send_buffer           = &quot;&quot;</span><br><span class=\"line\">-- 1st level buffer, it stores incoming logs</span><br><span class=\"line\">local log_buffer_data       = new_tab(20000, 0)</span><br><span class=\"line\">-- number of log lines in current 1st level buffer, starts from 0</span><br><span class=\"line\">local log_buffer_index      = 0</span><br><span class=\"line\"></span><br><span class=\"line\">local last_error</span><br><span class=\"line\"></span><br><span class=\"line\">local connecting</span><br><span class=\"line\">local connected</span><br><span class=\"line\">local exiting</span><br><span class=\"line\">local retry_connect         = 0</span><br><span class=\"line\">local retry_send            = 0</span><br><span class=\"line\">local max_retry_times       = 3</span><br><span class=\"line\">local retry_interval        = 100         -- 0.1s</span><br><span class=\"line\">local pool_size             = 10</span><br><span class=\"line\">local flushing</span><br><span class=\"line\">local logger_initted</span><br><span class=\"line\">local counter               = 0</span><br><span class=\"line\">local ssl_session</span><br><span class=\"line\"></span><br><span class=\"line\">local function _write_error(msg)</span><br><span class=\"line\">    last_error = msg</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_connect()</span><br><span class=\"line\">    local ok, err, sock</span><br><span class=\"line\"></span><br><span class=\"line\">    if not connected then</span><br><span class=\"line\">        if (sock_type == &#x27;udp&#x27;) then</span><br><span class=\"line\">            sock, err = udp()</span><br><span class=\"line\">        else</span><br><span class=\"line\">            sock, err = tcp()</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if not sock then</span><br><span class=\"line\">            _write_error(err)</span><br><span class=\"line\">            return nil, err</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        sock:settimeout(timeout)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- &quot;host&quot;/&quot;port&quot; and &quot;path&quot; have already been checked in init()</span><br><span class=\"line\">    if host and port then</span><br><span class=\"line\">        if (sock_type == &#x27;udp&#x27;) then</span><br><span class=\"line\">            ok, err = sock:setpeername(host, port)</span><br><span class=\"line\">        else</span><br><span class=\"line\">            ok, err = sock:connect(host, port)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    elseif path then</span><br><span class=\"line\">        ok, err = sock:connect(&quot;unix:&quot; .. path)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not ok then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_handshake(sock)</span><br><span class=\"line\">    if not ssl then</span><br><span class=\"line\">        return sock</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local session, err = sock:sslhandshake(ssl_session, sni_host or host,</span><br><span class=\"line\">                                           ssl_verify)</span><br><span class=\"line\">    if not session then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session = session</span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _connect()</span><br><span class=\"line\">    local err, sock</span><br><span class=\"line\"></span><br><span class=\"line\">    if connecting then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;previous connection not finished&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return nil, &quot;previous connection not finished&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    connected = false</span><br><span class=\"line\">    connecting = true</span><br><span class=\"line\"></span><br><span class=\"line\">    retry_connect = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    while retry_connect &lt;= max_retry_times do</span><br><span class=\"line\">        sock, err = _do_connect()</span><br><span class=\"line\"></span><br><span class=\"line\">        if sock then</span><br><span class=\"line\">            sock, err = _do_handshake(sock)</span><br><span class=\"line\">            if sock then</span><br><span class=\"line\">                connected = true</span><br><span class=\"line\">                break</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;reconnect to the log server: &quot;, err)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        -- ngx.sleep time is in seconds</span><br><span class=\"line\">        if not exiting then</span><br><span class=\"line\">            ngx_sleep(retry_interval / 1000)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        retry_connect = retry_connect + 1</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    connecting = false</span><br><span class=\"line\">    if not connected then</span><br><span class=\"line\">        return nil, &quot;try to connect to the log server failed after &quot;</span><br><span class=\"line\">                    .. max_retry_times .. &quot; retries: &quot; .. err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _prepare_stream_buffer()</span><br><span class=\"line\">    local packet = concat(log_buffer_data, &quot;&quot;, 1, log_buffer_index)</span><br><span class=\"line\">    send_buffer = send_buffer .. packet</span><br><span class=\"line\"></span><br><span class=\"line\">    log_buffer_index = 0</span><br><span class=\"line\">    counter = counter + 1</span><br><span class=\"line\">    if counter &gt; max_buffer_reuse then</span><br><span class=\"line\">        log_buffer_data = new_tab(20000, 0)</span><br><span class=\"line\">        counter = 0</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;log buffer reuse limit (&quot; .. max_buffer_reuse</span><br><span class=\"line\">                    .. &quot;) reached, create a new \\&quot;log_buffer_data\\&quot;&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_flush()</span><br><span class=\"line\">    local ok, err, sock, bytes</span><br><span class=\"line\">    local packet = send_buffer</span><br><span class=\"line\"></span><br><span class=\"line\">    sock, err = _connect()</span><br><span class=\"line\">    if not sock then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    bytes, err = sock:send(packet)</span><br><span class=\"line\">    if not bytes then</span><br><span class=\"line\">        -- &quot;sock:send&quot; always closes current connection on error</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx.update_time()</span><br><span class=\"line\">        ngx_log(DEBUG, ngx.now(), &quot;:log flush:&quot; .. bytes .. &quot;:&quot; .. packet)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sock_type ~= &#x27;udp&#x27;) then</span><br><span class=\"line\">        ok, err = sock:setkeepalive(0, pool_size)</span><br><span class=\"line\">        if not ok then</span><br><span class=\"line\">            return nil, err</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _need_flush()</span><br><span class=\"line\">    if buffer_size &gt; 0 then</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_lock()</span><br><span class=\"line\">    if not flushing then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;flush lock acquired&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        flushing = true</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_unlock()</span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx_log(DEBUG, &quot;flush lock released&quot;)</span><br><span class=\"line\">    end</span><br><span class=\"line\">    flushing = false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush()</span><br><span class=\"line\">    local err</span><br><span class=\"line\"></span><br><span class=\"line\">    -- pre check</span><br><span class=\"line\">    if not _flush_lock() then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;previous flush not finished&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        -- do this later</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not _need_flush() then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;no need to flush:&quot;, log_buffer_index)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        _flush_unlock()</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- start flushing</span><br><span class=\"line\">    retry_send = 0</span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx_log(DEBUG, &quot;start flushing&quot;)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local bytes</span><br><span class=\"line\">    while retry_send &lt;= max_retry_times do</span><br><span class=\"line\">        if log_buffer_index &gt; 0 then</span><br><span class=\"line\">            _prepare_stream_buffer()</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes, err = _do_flush()</span><br><span class=\"line\"></span><br><span class=\"line\">        if bytes then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;resend log messages to the log server: &quot;, err)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        -- ngx.sleep time is in seconds</span><br><span class=\"line\">        if not exiting then</span><br><span class=\"line\">            ngx_sleep(retry_interval / 1000)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        retry_send = retry_send + 1</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    _flush_unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    if not bytes then</span><br><span class=\"line\">        local err_msg = &quot;try to send log messages to the log server &quot;</span><br><span class=\"line\">                        .. &quot;failed after &quot; .. max_retry_times .. &quot; retries: &quot;</span><br><span class=\"line\">                        .. err</span><br><span class=\"line\">        _write_error(err_msg)</span><br><span class=\"line\">        return nil, err_msg</span><br><span class=\"line\">    else</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;send &quot; .. bytes .. &quot; bytes&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer_size = buffer_size - #send_buffer</span><br><span class=\"line\">    send_buffer = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _periodic_flush(premature)</span><br><span class=\"line\">    if premature then</span><br><span class=\"line\">        exiting = true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if need_periodic_flush or exiting then</span><br><span class=\"line\">        -- no regular flush happened after periodic flush timer had been set</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;performing periodic flush&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        _flush()</span><br><span class=\"line\">    else</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;no need to perform periodic flush: regular flush &quot;</span><br><span class=\"line\">                    .. &quot;happened before&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        need_periodic_flush = true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    timer_at(periodic_flush, _periodic_flush)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_buffer()</span><br><span class=\"line\">    local ok, err = timer_at(0, _flush)</span><br><span class=\"line\"></span><br><span class=\"line\">    need_periodic_flush = false</span><br><span class=\"line\"></span><br><span class=\"line\">    if not ok then</span><br><span class=\"line\">        _write_error(err)</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _write_buffer(msg, len)</span><br><span class=\"line\">    log_buffer_index = log_buffer_index + 1</span><br><span class=\"line\">    log_buffer_data[log_buffer_index] = msg</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer_size = buffer_size + len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return buffer_size</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.init(user_config)</span><br><span class=\"line\">    if (type(user_config) ~= &quot;table&quot;) then</span><br><span class=\"line\">        return nil, &quot;user_config must be a table&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    for k, v in pairs(user_config) do</span><br><span class=\"line\">        if k == &quot;host&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;host&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            host = v</span><br><span class=\"line\">        elseif k == &quot;port&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;port&quot; must be a number&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if v &lt; 0 or v &gt; MAX_PORT then</span><br><span class=\"line\">                return nil, (&#x27;&quot;port&quot; out of range 0~%s&#x27;):format(MAX_PORT)</span><br><span class=\"line\">            end</span><br><span class=\"line\">            port = v</span><br><span class=\"line\">        elseif k == &quot;path&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;path&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            path = v</span><br><span class=\"line\">        elseif k == &quot;sock_type&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sock_type&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if v ~= &quot;tcp&quot; and v ~= &quot;udp&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sock_type&quot; must be &quot;tcp&quot; or &quot;udp&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            sock_type = v</span><br><span class=\"line\">        elseif k == &quot;flush_limit&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;flush_limit&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            flush_limit = v</span><br><span class=\"line\">        elseif k == &quot;drop_limit&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;drop_limit&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            drop_limit = v</span><br><span class=\"line\">        elseif k == &quot;timeout&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;timeout&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            timeout = v</span><br><span class=\"line\">        elseif k == &quot;max_retry_times&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;max_retry_times&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            max_retry_times = v</span><br><span class=\"line\">        elseif k == &quot;retry_interval&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;retry_interval&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            -- ngx.sleep time is in seconds</span><br><span class=\"line\">            retry_interval = v</span><br><span class=\"line\">        elseif k == &quot;pool_size&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;pool_size&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            pool_size = v</span><br><span class=\"line\">        elseif k == &quot;max_buffer_reuse&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;max_buffer_reuse&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            max_buffer_reuse = v</span><br><span class=\"line\">        elseif k == &quot;periodic_flush&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;periodic_flush&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            periodic_flush = v</span><br><span class=\"line\">        elseif k == &quot;ssl&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;boolean&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;ssl&quot; must be a boolean value&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            ssl = v</span><br><span class=\"line\">        elseif k == &quot;ssl_verify&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;boolean&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;ssl_verify&quot; must be a boolean value&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            ssl_verify = v</span><br><span class=\"line\">        elseif k == &quot;sni_host&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sni_host&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            sni_host = v</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not (host and port) and not path then</span><br><span class=\"line\">        return nil, &quot;no logging server configured. \\&quot;host\\&quot;/\\&quot;port\\&quot; or &quot;</span><br><span class=\"line\">                .. &quot;\\&quot;path\\&quot; is required.&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if (flush_limit &gt;= drop_limit) then</span><br><span class=\"line\">        return nil, &quot;\\&quot;flush_limit\\&quot; should be &lt; \\&quot;drop_limit\\&quot;&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    flushing = false</span><br><span class=\"line\">    exiting = false</span><br><span class=\"line\">    connecting = false</span><br><span class=\"line\"></span><br><span class=\"line\">    connected = false</span><br><span class=\"line\">    retry_connect = 0</span><br><span class=\"line\">    retry_send = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    logger_initted = true</span><br><span class=\"line\"></span><br><span class=\"line\">    if periodic_flush then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;periodic flush enabled for every &quot;</span><br><span class=\"line\">                    .. periodic_flush .. &quot; seconds&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        need_periodic_flush = true</span><br><span class=\"line\">        timer_at(periodic_flush, _periodic_flush)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return logger_initted</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.log(msg)</span><br><span class=\"line\">    if not logger_initted then</span><br><span class=\"line\">        return nil, &quot;not initialized&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local bytes</span><br><span class=\"line\"></span><br><span class=\"line\">    if type(msg) ~= &quot;string&quot; then</span><br><span class=\"line\">        msg = tostring(msg)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local msg_len = #msg</span><br><span class=\"line\"></span><br><span class=\"line\">    if (debug) then</span><br><span class=\"line\">        ngx.update_time()</span><br><span class=\"line\">        ngx_log(DEBUG, ngx.now(), &quot;:log message length: &quot; .. msg_len)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- response of &quot;_flush_buffer&quot; is not checked, because it writes</span><br><span class=\"line\">    -- error buffer</span><br><span class=\"line\">    if (is_exiting()) then</span><br><span class=\"line\">        exiting = true</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        if (debug) then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;Nginx worker is exiting&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        bytes = 0</span><br><span class=\"line\">    elseif (msg_len + buffer_size &lt; flush_limit) then</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        bytes = msg_len</span><br><span class=\"line\">    elseif (msg_len + buffer_size &lt;= drop_limit) then</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        bytes = msg_len</span><br><span class=\"line\">    else</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        if (debug) then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;logger buffer is full, this log message will be &quot;</span><br><span class=\"line\">                    .. &quot;dropped&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        bytes = 0</span><br><span class=\"line\">        --- this log message doesn&#x27;t fit in buffer, drop it</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if last_error then</span><br><span class=\"line\">        local err = last_error</span><br><span class=\"line\">        last_error = nil</span><br><span class=\"line\">        return bytes, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.initted()</span><br><span class=\"line\">    return logger_initted</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">_M.flush = _flush</span><br><span class=\"line\"></span><br><span class=\"line\">return _M</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"init-lua\"><a href=\"#init-lua\" class=\"headerlink\" title=\"init.lua\"></a>init.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &#x27;config&#x27;</span><br><span class=\"line\">local match = string.match</span><br><span class=\"line\">--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。</span><br><span class=\"line\">--因nginx和lua一起的关系，正则表达式使用\\d\\w\\s会出问题，</span><br><span class=\"line\">--local ngxmatch=ngx.re.match</span><br><span class=\"line\">local ngxmatch=ngx.re.find</span><br><span class=\"line\">local unescape=ngx.unescape_uri</span><br><span class=\"line\">local get_headers = ngx.req.get_headers</span><br><span class=\"line\">local optionIsOn = function (options) return options == &quot;on&quot; and true or false end</span><br><span class=\"line\">loghack=optionIsOn(loghack)</span><br><span class=\"line\">--载入socket.lua用于发送log到独立syslog服务器。</span><br><span class=\"line\">local logger = require &quot;socket&quot;</span><br><span class=\"line\">if loghack then</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tif not logger.initted() then</span><br><span class=\"line\">          local ok, err = logger.init&#123;</span><br><span class=\"line\">              --host = &#x27;192.168.0.1&#x27;,</span><br><span class=\"line\">              host = &#x27;logserver.local&#x27;,</span><br><span class=\"line\">              port = 514,</span><br><span class=\"line\">              sock_type = &quot;udp&quot;, --udp协议</span><br><span class=\"line\">              flush_limit = 1,\t--立即发送</span><br><span class=\"line\">              --drop_limit = 5678,</span><br><span class=\"line\">              pool_size = 100,--连接池大小</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if not ok then</span><br><span class=\"line\">              ngx.log(ngx.ERR, &quot;failed to initialize the logger: &quot;,</span><br><span class=\"line\">                      err)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          end</span><br><span class=\"line\"> end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">logpath = logdir</span><br><span class=\"line\">rulepath = RulePath</span><br><span class=\"line\">logtofile = optionIsOn(logtofile)</span><br><span class=\"line\">logtoserver = optionIsOn(logtoserver)</span><br><span class=\"line\">UrlDeny = optionIsOn(UrlDeny)</span><br><span class=\"line\">PostCheck = optionIsOn(postMatch)</span><br><span class=\"line\">CookieCheck = optionIsOn(cookieMatch)</span><br><span class=\"line\">WhiteCheck = optionIsOn(whiteModule)</span><br><span class=\"line\">PathInfoFix = optionIsOn(PathInfoFix)</span><br><span class=\"line\">attacklog = optionIsOn(attacklog)</span><br><span class=\"line\">hackipdeny = optionIsOn(hackipdeny)</span><br><span class=\"line\">CCDeny = optionIsOn(CCDeny)</span><br><span class=\"line\">Redirect=optionIsOn(Redirect)</span><br><span class=\"line\">local file = io.open(&#x27;config&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getClientIp()</span><br><span class=\"line\">        IP  = ngx.var.remote_addr</span><br><span class=\"line\">        if IP == nil then</span><br><span class=\"line\">                IP  = &quot;unknown&quot;</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return IP</span><br><span class=\"line\">end</span><br><span class=\"line\">function write(logfile,msg)</span><br><span class=\"line\">    local fd = io.open(logfile,&quot;ab&quot;)</span><br><span class=\"line\">    if fd == nil then return end</span><br><span class=\"line\">    fd:write(msg)</span><br><span class=\"line\">    fd:flush()</span><br><span class=\"line\">    fd:close()</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function swrite(msg)</span><br><span class=\"line\">      --保存警告等级要高于nginx error_log的默认等级。</span><br><span class=\"line\">\t\t\tngx.log(ngx.CRIT,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function log(method,url,data,ruletag)</span><br><span class=\"line\">    if attacklog then</span><br><span class=\"line\">        local realIp = getClientIp()</span><br><span class=\"line\">        local ua = ngx.var.http_user_agent</span><br><span class=\"line\">        if ua == nil then</span><br><span class=\"line\">        \tua=&quot;null&quot;</span><br><span class=\"line\">        end</span><br><span class=\"line\">        local servername=ngx.var.host</span><br><span class=\"line\">        local time=ngx.localtime()</span><br><span class=\"line\">        if logtofile then</span><br><span class=\"line\">        local filename = logpath..&#x27;/&#x27;..servername..&quot;_&quot;..ngx.today()..&quot;_sec.log&quot;</span><br><span class=\"line\">        line=realIp..&quot; [&quot;..time..&quot;]&quot;..&quot;\\&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\\&quot;&quot;..data..&quot;\\&quot;&quot;..ua..&quot;\\&quot;&quot;..ruletag..&quot;\\&quot;&quot;..&quot;\\n&quot;</span><br><span class=\"line\">        write(filename,line)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        if logtoserver then</span><br><span class=\"line\">        line=realIp..&quot;\\&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\\&quot;&quot;..data..&quot;\\&quot;&quot;..ua..&quot;\\&quot;&quot;..ruletag..&quot;\\&quot;&quot;</span><br><span class=\"line\">        --line=&quot;lua_waf:&quot;..line</span><br><span class=\"line\">        swrite(line)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    --发送ip到独立syslog服务器。</span><br><span class=\"line\">    if loghack then  local bytes, err = logger.log(getClientIp()) end</span><br><span class=\"line\">\t\t--只要log记录，说明被攻击，利用denyhackip将ip记录。</span><br><span class=\"line\">\t\tif hackipdeny then  denyhackip(0) end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">------------------------------------规则读取函数-------------------------------------------------------------------</span><br><span class=\"line\">function read_rule(var)</span><br><span class=\"line\">    file = io.open(rulepath..&#x27;/&#x27;..var,&quot;r&quot;)</span><br><span class=\"line\">    if file==nil then</span><br><span class=\"line\">        return</span><br><span class=\"line\">    end</span><br><span class=\"line\">    t = &#123;&#125;</span><br><span class=\"line\">    for line in file:lines() do</span><br><span class=\"line\">        table.insert(t,line)</span><br><span class=\"line\">    end</span><br><span class=\"line\">    file:close()</span><br><span class=\"line\">    return(t)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">urlrules=read_rule(&#x27;url&#x27;)</span><br><span class=\"line\">argsrules=read_rule(&#x27;args&#x27;)</span><br><span class=\"line\">uarules=read_rule(&#x27;user-agent&#x27;)</span><br><span class=\"line\">wturlrules=read_rule(&#x27;whiteurl&#x27;)</span><br><span class=\"line\">postrules=read_rule(&#x27;post&#x27;)</span><br><span class=\"line\">ckrules=read_rule(&#x27;cookie&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function say_html()</span><br><span class=\"line\">    if Redirect then</span><br><span class=\"line\">        ngx.header.content_type = &quot;text/html&quot;</span><br><span class=\"line\">        ngx.status = ngx.HTTP_FORBIDDEN</span><br><span class=\"line\">        ngx.say(html)</span><br><span class=\"line\">        ngx.exit(ngx.status)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function whiteurl()</span><br><span class=\"line\">    if WhiteCheck then</span><br><span class=\"line\">        if wturlrules ~=nil then</span><br><span class=\"line\">\t\t\t\t\t\tlocal urlpath = string.gsub(ngx.var.request_uri, &quot;?.*&quot;, &quot;&quot;)</span><br><span class=\"line\">            for _,rule in pairs(wturlrules) do</span><br><span class=\"line\">            --针对site:开始的进行域名匹配。增加白名单用处。</span><br><span class=\"line\">\t            local sitemod,_=string.find(rule,&quot;site:&quot;)</span><br><span class=\"line\">\t        \t\tif sitemod==1 then</span><br><span class=\"line\">\t        \t\t\trule=string.gsub(rule,&quot;site:&quot;,&quot;&quot;,1)</span><br><span class=\"line\">\t        \t\t\t--调试whiteurl</span><br><span class=\"line\">\t        \t\t\t--if ngx.var.host==&#x27;domino.cqhrss.gov.cn&#x27; then</span><br><span class=\"line\">\t        \t\t\t--\tlog(&#x27;debug&#x27;,ngx.var.uri,&quot;&quot;,rule)</span><br><span class=\"line\">\t        \t\t\t--end</span><br><span class=\"line\">\t        \t\t\tif ngxmatch(ngx.var.host..ngx.var.uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                    return true</span><br><span class=\"line\">                end</span><br><span class=\"line\">\t        \t\telse</span><br><span class=\"line\">            \t\tif ngxmatch(ngx.var.uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                    return true</span><br><span class=\"line\">\t\t\t\t\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlocal pathmod,_=string.find(rule,&quot;path:&quot;)</span><br><span class=\"line\">\t\t\t        \t\tif pathmod==1 then</span><br><span class=\"line\">\t\t\t        \t\t\trule=string.gsub(rule,&quot;path:&quot;,&quot;&quot;,1)</span><br><span class=\"line\">\t\t\t        \t\t\tif urlpath==rule then</span><br><span class=\"line\">\t\t                    return true</span><br><span class=\"line\">\t\t                end</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tend</span><br><span class=\"line\">                end</span><br><span class=\"line\">            \tend</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function fileExtCheck(ext)</span><br><span class=\"line\">    local items = Set(black_fileExt)</span><br><span class=\"line\">    ext=string.lower(ext)</span><br><span class=\"line\">    if ext then</span><br><span class=\"line\">        for rule,_ in pairs(items) do</span><br><span class=\"line\">            if ngxmatch(ext,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">            log(&#x27;POST&#x27;,ngx.var.request_uri,&quot;-&quot;,&quot;file attack with ext &quot;..ext)</span><br><span class=\"line\">            say_html()</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function Set (list)</span><br><span class=\"line\">  local set = &#123;&#125;</span><br><span class=\"line\">  for _, l in ipairs(list) do set[l] = true end</span><br><span class=\"line\">  return set</span><br><span class=\"line\">end</span><br><span class=\"line\">function args()</span><br><span class=\"line\">    for _,rule in pairs(argsrules) do</span><br><span class=\"line\">        local args = ngx.req.get_uri_args()</span><br><span class=\"line\">        for key, val in pairs(args) do</span><br><span class=\"line\">            if type(val)==&#x27;table&#x27; then</span><br><span class=\"line\">                 local t=&#123;&#125;</span><br><span class=\"line\">                 for k,v in pairs(val) do</span><br><span class=\"line\">                    if v == true then</span><br><span class=\"line\">                        v=&quot;&quot;</span><br><span class=\"line\">                    end</span><br><span class=\"line\">                    table.insert(t,v)</span><br><span class=\"line\">                end</span><br><span class=\"line\">                data=table.concat(t, &quot; &quot;)</span><br><span class=\"line\">            else</span><br><span class=\"line\">                data=val</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if data and type(data) ~= &quot;boolean&quot; and rule ~=&quot;&quot; and ngxmatch(unescape(data),rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;GET&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function url()</span><br><span class=\"line\">    if UrlDeny then</span><br><span class=\"line\">        for _,rule in pairs(urlrules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ngx.var.request_uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;GET&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function ua()</span><br><span class=\"line\">    local ua = ngx.var.http_user_agent</span><br><span class=\"line\">    if ua ~= nil then</span><br><span class=\"line\">        for _,rule in pairs(uarules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ua,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;UA&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function body(data)</span><br><span class=\"line\">    for _,rule in pairs(postrules) do</span><br><span class=\"line\">        if rule ~=&quot;&quot; and data~=&quot;&quot; and ngxmatch(unescape(data),rule,&quot;isjo&quot;) then</span><br><span class=\"line\">            log(&#x27;POST&#x27;,ngx.var.request_uri,data,rule)</span><br><span class=\"line\">            say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function cookie()</span><br><span class=\"line\">    local ck = ngx.var.http_cookie</span><br><span class=\"line\">    if CookieCheck and ck then</span><br><span class=\"line\">        for _,rule in pairs(ckrules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ck,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;Cookie&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function denycc()</span><br><span class=\"line\">    if CCDeny then</span><br><span class=\"line\">        local uri=ngx.var.uri</span><br><span class=\"line\">      \tlocal m, err = ngx.re.match(CCrate,&#x27;([0-9]+)/([0-9]+)/([0-9]+)&#x27;)</span><br><span class=\"line\">      \tlocal CCcount=tonumber(m[1]) --计数器上限</span><br><span class=\"line\">        local CCseconds=tonumber(m[2]) --计时器</span><br><span class=\"line\">        local CClimits=tonumber(m[3]) --阻止访问时间</span><br><span class=\"line\">        local token = getClientIp()..uri</span><br><span class=\"line\">        local limit = ngx.shared.limit</span><br><span class=\"line\">        local req,_=limit:get(token) --计数器当前值</span><br><span class=\"line\"></span><br><span class=\"line\">        if req then</span><br><span class=\"line\">            if req &gt; CCcount then</span><br><span class=\"line\">                ngx.exit(404)</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            else</span><br><span class=\"line\">            \t\tif req == CCcount then    limit:set(token,CCcount+1,CClimits)  end</span><br><span class=\"line\"></span><br><span class=\"line\">                limit:incr(token,1)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t--调试在syslog日志中查看</span><br><span class=\"line\">\t\t\t\t\t\t\t\t--swrite(&#x27;计数器:&#x27;..token..&#x27;当前计数器&#x27;..req..&#x27;阻止访问时间:&#x27;..CClimits)</span><br><span class=\"line\"></span><br><span class=\"line\">            end</span><br><span class=\"line\">        else</span><br><span class=\"line\">            limit:set(token,1,CCseconds)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">--chk为1表示检测值，不增加，不创建，返回检测结果。</span><br><span class=\"line\">function denyhackip(chk)</span><br><span class=\"line\">    if hackipdeny then</span><br><span class=\"line\"></span><br><span class=\"line\">       local m, err = ngx.re.match(hackrate,&#x27;([0-9]+)/([0-9]+)/([0-9]+)&#x27;)</span><br><span class=\"line\">      \tlocal hicount=tonumber(m[1]) --计数器上限</span><br><span class=\"line\">        local hiseconds=tonumber(m[2]) --计时器</span><br><span class=\"line\">        local hilimits=tonumber(m[3]) --阻止访问时间</span><br><span class=\"line\">        local token = &quot;hackip&quot;..getClientIp()</span><br><span class=\"line\">        local limit = ngx.shared.limit</span><br><span class=\"line\">        local req,_=limit:get(token) --计数器当前值</span><br><span class=\"line\">        if req then</span><br><span class=\"line\">            if req &gt; hicount then</span><br><span class=\"line\">                ngx.exit(404)</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            else</span><br><span class=\"line\"></span><br><span class=\"line\">            \t\tif req == hicount then</span><br><span class=\"line\">            \t\t\t\tlimit:set(token,hicount+1,hilimits)</span><br><span class=\"line\">            \t\t\t\tswrite(&quot;ip:&quot;..getClientIp()..&quot;因攻击被暂停访问&quot;..hilimits..&quot;秒。&quot;)</span><br><span class=\"line\">            \t\t\t\tend</span><br><span class=\"line\">                 if chk ~=1 then limit:incr(token,1)      end</span><br><span class=\"line\">                --调试在syslog日志中查看</span><br><span class=\"line\">                --swrite(&quot;计数器:&quot;..token..&quot;检测状态:&quot;..chk..&quot;当前计数器&quot;..req..&quot;阻止访问时间:&quot;..hilimits)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            end</span><br><span class=\"line\">        else</span><br><span class=\"line\">        \t\tif chk ~=1 then limit:set(token,1,hiseconds) \tend</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function get_boundary()</span><br><span class=\"line\">    local header = get_headers()[&quot;content-type&quot;]</span><br><span class=\"line\">    if not header then</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if type(header) == &quot;table&quot; then</span><br><span class=\"line\">        header = header[1]</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local m = match(header, &quot;;%s*boundary=\\&quot;([^\\&quot;]+)\\&quot;&quot;)</span><br><span class=\"line\">    if m then</span><br><span class=\"line\">        return m</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return match(header, &quot;;%s*boundary=([^\\&quot;,;]+)&quot;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function whiteip()</span><br><span class=\"line\">    if next(ipWhitelist) ~= nil then</span><br><span class=\"line\">        for _,ip in pairs(ipWhitelist) do</span><br><span class=\"line\">            if getClientIp()==ip then</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">        return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function blockip()</span><br><span class=\"line\">     if next(ipBlocklist) ~= nil then</span><br><span class=\"line\">         for _,ip in pairs(ipBlocklist) do</span><br><span class=\"line\">             if getClientIp()==ip then</span><br><span class=\"line\">                 ngx.exit(403)</span><br><span class=\"line\">                 return true</span><br><span class=\"line\">             end</span><br><span class=\"line\">         end</span><br><span class=\"line\">     end</span><br><span class=\"line\">         return false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"config-lua\"><a href=\"#config-lua\" class=\"headerlink\" title=\"config.lua\"></a>config.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RulePath = &quot;/usr/local/nginx/conf/waf/wafconf/&quot;</span><br><span class=\"line\">attacklog = &quot;on&quot;</span><br><span class=\"line\">--保存日志到文件</span><br><span class=\"line\">logtofile = &quot;on&quot;</span><br><span class=\"line\">logdir = &quot;/site/wwwlogs/waf/&quot;</span><br><span class=\"line\">--保存日志到syslog,采用nginx设置</span><br><span class=\"line\">logtoserver = &quot;off&quot;</span><br><span class=\"line\">--通过syslog日志方式提交hack_ip记录到日志服务器</span><br><span class=\"line\">loghack=&quot;off&quot;</span><br><span class=\"line\">UrlDeny=&quot;on&quot;</span><br><span class=\"line\">Redirect=&quot;on&quot;</span><br><span class=\"line\">CookieMatch=&quot;on&quot;</span><br><span class=\"line\">postMatch=&quot;on&quot;</span><br><span class=\"line\">whiteModule=&quot;on&quot;</span><br><span class=\"line\">black_fileExt=&#123;&quot;php&quot;,&quot;jsp&quot;&#125;</span><br><span class=\"line\">ipWhitelist=&#123;&quot;127.0.0.1&quot;,&quot;192.168.2.1&quot;&#125;</span><br><span class=\"line\">ipBlocklist=&#123;&quot;1.0.0.1&quot;&#125;</span><br><span class=\"line\">--违规ip登记，是否限制访问。</span><br><span class=\"line\">--hackrate超过10次/5秒,限制访问1800秒。</span><br><span class=\"line\">hackipdeny=&quot;on&quot;</span><br><span class=\"line\">hackrate=&quot;10/60/1800&quot;</span><br><span class=\"line\">--cc攻击防范</span><br><span class=\"line\">CCDeny=&quot;on&quot;</span><br><span class=\"line\">CCrate=&quot;30/60/30&quot;</span><br><span class=\"line\">html=[[</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;嘿，搞啥呢&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">p &#123;line-height:20px;&#125;</span><br><span class=\"line\">ul&#123; list-style-type:none;&#125;</span><br><span class=\"line\">li&#123; list-style-type:none;&#125;</span><br><span class=\"line\">body&#123;padding:0; margin:0; font:14px/1.5 Microsoft Yahei, 宋体,sans-serif; color:#555;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;div style=&quot;margin: 0 auto; max-width:1000px; padding-top:70px; overflow:hidden;&quot;&gt;</span><br><span class=\"line\">  &lt;div style=&quot;padding:0 15px;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot; height:40px; line-height:40px; color:#fff; font-size:16px; overflow:hidden; background:#6bb3f6; padding-left:20px;&quot;&gt;咳咳，说一下&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;border:1px dashed #cdcece; border-top:none; font-size:14px; background:#fff; color:#555; line-height:24px; height:220px; padding:20px 20px 0 20px; overflow-y:auto;background:#f3f7f9;&quot;&gt;</span><br><span class=\"line\">      &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600; color:#fc4f03;&quot;&gt;你被我们抓住了！&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;可能原因：人品有问题&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;&quot;&gt;如何解决：&lt;/p&gt;</span><br><span class=\"line\">&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;1）给我们发邮件说明；&lt;/li&gt;</span><br><span class=\"line\">&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;2）给我们打电话说明；&lt;/li&gt;</span><br><span class=\"line\">&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;3）什么，上面都不行？转给我们一个亿，人品马上日日高升；&lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"whiteurl\"><a href=\"#whiteurl\" class=\"headerlink\" title=\"whiteurl\"></a>whiteurl</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^/zhaonvpengyou</span><br><span class=\"line\">site:^lianxiwo\\.com/</span><br><span class=\"line\">path:/wogeiniliuyi.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>s<br>本来还想慢慢说明一下，想想还是算了，这篇文章多是为了自己记住！我主要是基于<a href=\"https://github.com/loveshell/ngx_lua_waf/pull/136%E4%BF%AE%E6%94%B9%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BE%9D%E8%99%8E%E7%94%BB%E7%8C%AB%EF%BC%8C%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%88%A4%E6%96%ADrequest_uri%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD%EF%BC%81\">https://github.com/loveshell/ngx_lua_waf/pull/136修改，然后依虎画猫，增加了一个判断request_uri的小功能！</a></p>\n","site":{"data":{}},"length":25917,"excerpt":"","more":"<blockquote>\n<p>lua，很多人应该都听过。据说高性能，据说很简单，据说还可以与nginx配合……因为着很多优点，很多云服务商都提供了基于lua开发的waf防火墙，美其名曰云waf。从这也看出waf应该是很有成效的，阿里云就提供了云waf，用于防御DDOS与CC攻击。所以，我也赶了赶时髦，部署waf到服务器上面。</p>\n</blockquote>\n<h2 id=\"一点絮叨\"><a href=\"#一点絮叨\" class=\"headerlink\" title=\"一点絮叨\"></a>一点絮叨</h2><p>很早就开始用waf，用的是ngx_lua_waf，是某位大牛开源出来的。地址是<a href=\"https://github.com/loveshell/ngx_lua_waf\">https://github.com/loveshell/ngx_lua_waf</a><br>，感兴趣的大牛、中牛、年轻人都可以去看看。用的过程遇到过一些问题，因为长期的忙忙忙，所以，也没什么时间去多看看。最近一个项目因为要求比较严，所以，我又翻了翻ngx_lua_waf的github页面。这才发现了虽然项目已经停止更新有一段时间，还有不少的Pull<br>requests，甚至于最近的Pull requests是9天前的。把Pull requests筛选了一遍，就有了这次的小更新！</p>\n<h2 id=\"waf-lua\"><a href=\"#waf-lua\" class=\"headerlink\" title=\"waf.lua\"></a>waf.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local content_length=tonumber(ngx.req.get_headers()[&#x27;content-length&#x27;])</span><br><span class=\"line\">local method=ngx.req.get_method()</span><br><span class=\"line\">--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。</span><br><span class=\"line\">local ngxmatch=ngx.re.match</span><br><span class=\"line\">--local ngxmatch=ngx.re.find</span><br><span class=\"line\">if whiteip() then</span><br><span class=\"line\">elseif whiteurl() then</span><br><span class=\"line\">elseif blockip() then</span><br><span class=\"line\">--检测攻击ip是否被拦截。</span><br><span class=\"line\">elseif denyhackip(1) then</span><br><span class=\"line\">elseif denycc() then</span><br><span class=\"line\">elseif ngx.var.http_Acunetix_Aspect then</span><br><span class=\"line\">    ngx.exit(444)</span><br><span class=\"line\">elseif ngx.var.http_X_Scan_Memo then</span><br><span class=\"line\">    ngx.exit(444)</span><br><span class=\"line\">elseif ua() then</span><br><span class=\"line\">elseif url() then</span><br><span class=\"line\">elseif args() then</span><br><span class=\"line\">elseif cookie() then</span><br><span class=\"line\">elseif PostCheck then</span><br><span class=\"line\">    if method==&quot;POST&quot; then</span><br><span class=\"line\">            local boundary = get_boundary()</span><br><span class=\"line\">\t    if boundary then</span><br><span class=\"line\">\t    local len = string.len</span><br><span class=\"line\">            local sock, err = ngx.req.socket()</span><br><span class=\"line\">    \t    if not sock then</span><br><span class=\"line\">\t\t\t\t\treturn</span><br><span class=\"line\">            end</span><br><span class=\"line\">\t    ngx.req.init_body(128 * 1024)</span><br><span class=\"line\">            sock:settimeout(0)</span><br><span class=\"line\">\t    local content_length = nil</span><br><span class=\"line\">    \t    content_length=tonumber(ngx.req.get_headers()[&#x27;content-length&#x27;])</span><br><span class=\"line\">    \t    local chunk_size = 4096</span><br><span class=\"line\">            if content_length &lt; chunk_size then</span><br><span class=\"line\">\t\t\t\t\tchunk_size = content_length</span><br><span class=\"line\">\t    end</span><br><span class=\"line\">            local size = 0</span><br><span class=\"line\">\t    while size &lt; content_length do</span><br><span class=\"line\">\t\tlocal data, err, partial = sock:receive(chunk_size)</span><br><span class=\"line\">\t\tdata = data or partial</span><br><span class=\"line\">\t\tif not data then</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t\tngx.req.append_body(data)</span><br><span class=\"line\">        \tif body(data) then</span><br><span class=\"line\">\t   \t        return true</span><br><span class=\"line\">    \t    \tend</span><br><span class=\"line\">\t\tsize = size + len(data)</span><br><span class=\"line\">\t\tlocal m = ngxmatch(data,[[Content-Disposition: form-data;(.+)filename=&quot;(.+)\\.(.*)&quot;]],&#x27;ijo&#x27;)</span><br><span class=\"line\">        \tif m then</span><br><span class=\"line\">            \t\tfileExtCheck(m[3])</span><br><span class=\"line\">            \t\tfiletranslate = true</span><br><span class=\"line\">        \telse</span><br><span class=\"line\">            \t\tif ngxmatch(data,&quot;Content-Disposition:&quot;,&#x27;isjo&#x27;) then</span><br><span class=\"line\">                \t\tfiletranslate = false</span><br><span class=\"line\">            \t\tend</span><br><span class=\"line\">            \t\tif filetranslate==false then</span><br><span class=\"line\">            \t\t\tif body(data) then</span><br><span class=\"line\">                    \t\t\treturn true</span><br><span class=\"line\">                \t\tend</span><br><span class=\"line\">            \t\tend</span><br><span class=\"line\">        \tend</span><br><span class=\"line\">\t\tlocal less = content_length - size</span><br><span class=\"line\">\t\tif less &lt; chunk_size then</span><br><span class=\"line\">\t\t\tchunk_size = less</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t end</span><br><span class=\"line\">\t ngx.req.finish_body()</span><br><span class=\"line\">    else</span><br><span class=\"line\">\t\t\tngx.req.read_body()</span><br><span class=\"line\">\t\t\tlocal args = ngx.req.get_post_args()</span><br><span class=\"line\">\t\t\tif not args then</span><br><span class=\"line\">\t\t\t\treturn</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\t\t\tfor key, val in pairs(args) do</span><br><span class=\"line\">\t\t\t\tif type(val) == &quot;table&quot; then</span><br><span class=\"line\">\t\t\t\t\tif type(val[1]) == &quot;boolean&quot; then</span><br><span class=\"line\">\t\t\t\t\t\treturn</span><br><span class=\"line\">\t\t\t\t\tend</span><br><span class=\"line\">\t\t\t\t\tdata=table.concat(val, &quot;, &quot;)</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\tdata=val</span><br><span class=\"line\">\t\t\t\tend</span><br><span class=\"line\">\t\t\t\tif data and type(data) ~= &quot;boolean&quot; and body(data) then</span><br><span class=\"line\">                \t\t\tbody(key)</span><br><span class=\"line\">\t\t\t\tend</span><br><span class=\"line\">\t\t\tend</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\">\t\tend</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\">    return</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"socket-lua\"><a href=\"#socket-lua\" class=\"headerlink\" title=\"socket.lua\"></a>socket.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Copyright (C) 2013-2014 Jiale Zhi (calio), CloudFlare Inc.</span><br><span class=\"line\">--require &quot;luacov&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">local concat                = table.concat</span><br><span class=\"line\">local tcp                   = ngx.socket.tcp</span><br><span class=\"line\">local udp                   = ngx.socket.udp</span><br><span class=\"line\">local timer_at              = ngx.timer.at</span><br><span class=\"line\">local ngx_log               = ngx.log</span><br><span class=\"line\">local ngx_sleep             = ngx.sleep</span><br><span class=\"line\">local type                  = type</span><br><span class=\"line\">local pairs                 = pairs</span><br><span class=\"line\">local tostring              = tostring</span><br><span class=\"line\">local debug                 = ngx.config.debug</span><br><span class=\"line\"></span><br><span class=\"line\">local DEBUG                 = ngx.DEBUG</span><br><span class=\"line\">local CRIT                  = ngx.CRIT</span><br><span class=\"line\"></span><br><span class=\"line\">local MAX_PORT              = 65535</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- table.new(narr, nrec)</span><br><span class=\"line\">local succ, new_tab = pcall(require, &quot;table.new&quot;)</span><br><span class=\"line\">if not succ then</span><br><span class=\"line\">    new_tab = function () return &#123;&#125; end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local _M = new_tab(0, 5)</span><br><span class=\"line\"></span><br><span class=\"line\">local is_exiting</span><br><span class=\"line\"></span><br><span class=\"line\">if not ngx.config or not ngx.config.ngx_lua_version</span><br><span class=\"line\">    or ngx.config.ngx_lua_version &lt; 9003 then</span><br><span class=\"line\"></span><br><span class=\"line\">    is_exiting = function() return false end</span><br><span class=\"line\"></span><br><span class=\"line\">    ngx_log(CRIT, &quot;We strongly recommend you to update your ngx_lua module to &quot;</span><br><span class=\"line\">            .. &quot;0.9.3 or above. lua-resty-logger-socket will lose some log &quot;</span><br><span class=\"line\">            .. &quot;messages when Nginx reloads if it works with ngx_lua module &quot;</span><br><span class=\"line\">            .. &quot;below 0.9.3&quot;)</span><br><span class=\"line\">else</span><br><span class=\"line\">    is_exiting = ngx.worker.exiting</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_M._VERSION = &#x27;0.03&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">-- user config</span><br><span class=\"line\">local flush_limit           = 4096         -- 4KB</span><br><span class=\"line\">local drop_limit            = 1048576      -- 1MB</span><br><span class=\"line\">local timeout               = 1000         -- 1 sec</span><br><span class=\"line\">local host</span><br><span class=\"line\">local port</span><br><span class=\"line\">local ssl                   = false</span><br><span class=\"line\">local ssl_verify            = true</span><br><span class=\"line\">local sni_host</span><br><span class=\"line\">local path</span><br><span class=\"line\">local max_buffer_reuse      = 10000        -- reuse buffer for at most 10000</span><br><span class=\"line\">                                           -- times</span><br><span class=\"line\">local periodic_flush        = nil</span><br><span class=\"line\">local need_periodic_flush   = nil</span><br><span class=\"line\">local sock_type             = &#x27;tcp&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">-- internal variables</span><br><span class=\"line\">local buffer_size           = 0</span><br><span class=\"line\">-- 2nd level buffer, it stores logs ready to be sent out</span><br><span class=\"line\">local send_buffer           = &quot;&quot;</span><br><span class=\"line\">-- 1st level buffer, it stores incoming logs</span><br><span class=\"line\">local log_buffer_data       = new_tab(20000, 0)</span><br><span class=\"line\">-- number of log lines in current 1st level buffer, starts from 0</span><br><span class=\"line\">local log_buffer_index      = 0</span><br><span class=\"line\"></span><br><span class=\"line\">local last_error</span><br><span class=\"line\"></span><br><span class=\"line\">local connecting</span><br><span class=\"line\">local connected</span><br><span class=\"line\">local exiting</span><br><span class=\"line\">local retry_connect         = 0</span><br><span class=\"line\">local retry_send            = 0</span><br><span class=\"line\">local max_retry_times       = 3</span><br><span class=\"line\">local retry_interval        = 100         -- 0.1s</span><br><span class=\"line\">local pool_size             = 10</span><br><span class=\"line\">local flushing</span><br><span class=\"line\">local logger_initted</span><br><span class=\"line\">local counter               = 0</span><br><span class=\"line\">local ssl_session</span><br><span class=\"line\"></span><br><span class=\"line\">local function _write_error(msg)</span><br><span class=\"line\">    last_error = msg</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_connect()</span><br><span class=\"line\">    local ok, err, sock</span><br><span class=\"line\"></span><br><span class=\"line\">    if not connected then</span><br><span class=\"line\">        if (sock_type == &#x27;udp&#x27;) then</span><br><span class=\"line\">            sock, err = udp()</span><br><span class=\"line\">        else</span><br><span class=\"line\">            sock, err = tcp()</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if not sock then</span><br><span class=\"line\">            _write_error(err)</span><br><span class=\"line\">            return nil, err</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        sock:settimeout(timeout)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- &quot;host&quot;/&quot;port&quot; and &quot;path&quot; have already been checked in init()</span><br><span class=\"line\">    if host and port then</span><br><span class=\"line\">        if (sock_type == &#x27;udp&#x27;) then</span><br><span class=\"line\">            ok, err = sock:setpeername(host, port)</span><br><span class=\"line\">        else</span><br><span class=\"line\">            ok, err = sock:connect(host, port)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    elseif path then</span><br><span class=\"line\">        ok, err = sock:connect(&quot;unix:&quot; .. path)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not ok then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_handshake(sock)</span><br><span class=\"line\">    if not ssl then</span><br><span class=\"line\">        return sock</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local session, err = sock:sslhandshake(ssl_session, sni_host or host,</span><br><span class=\"line\">                                           ssl_verify)</span><br><span class=\"line\">    if not session then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session = session</span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _connect()</span><br><span class=\"line\">    local err, sock</span><br><span class=\"line\"></span><br><span class=\"line\">    if connecting then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;previous connection not finished&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return nil, &quot;previous connection not finished&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    connected = false</span><br><span class=\"line\">    connecting = true</span><br><span class=\"line\"></span><br><span class=\"line\">    retry_connect = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    while retry_connect &lt;= max_retry_times do</span><br><span class=\"line\">        sock, err = _do_connect()</span><br><span class=\"line\"></span><br><span class=\"line\">        if sock then</span><br><span class=\"line\">            sock, err = _do_handshake(sock)</span><br><span class=\"line\">            if sock then</span><br><span class=\"line\">                connected = true</span><br><span class=\"line\">                break</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;reconnect to the log server: &quot;, err)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        -- ngx.sleep time is in seconds</span><br><span class=\"line\">        if not exiting then</span><br><span class=\"line\">            ngx_sleep(retry_interval / 1000)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        retry_connect = retry_connect + 1</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    connecting = false</span><br><span class=\"line\">    if not connected then</span><br><span class=\"line\">        return nil, &quot;try to connect to the log server failed after &quot;</span><br><span class=\"line\">                    .. max_retry_times .. &quot; retries: &quot; .. err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return sock</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _prepare_stream_buffer()</span><br><span class=\"line\">    local packet = concat(log_buffer_data, &quot;&quot;, 1, log_buffer_index)</span><br><span class=\"line\">    send_buffer = send_buffer .. packet</span><br><span class=\"line\"></span><br><span class=\"line\">    log_buffer_index = 0</span><br><span class=\"line\">    counter = counter + 1</span><br><span class=\"line\">    if counter &gt; max_buffer_reuse then</span><br><span class=\"line\">        log_buffer_data = new_tab(20000, 0)</span><br><span class=\"line\">        counter = 0</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;log buffer reuse limit (&quot; .. max_buffer_reuse</span><br><span class=\"line\">                    .. &quot;) reached, create a new \\&quot;log_buffer_data\\&quot;&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _do_flush()</span><br><span class=\"line\">    local ok, err, sock, bytes</span><br><span class=\"line\">    local packet = send_buffer</span><br><span class=\"line\"></span><br><span class=\"line\">    sock, err = _connect()</span><br><span class=\"line\">    if not sock then</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    bytes, err = sock:send(packet)</span><br><span class=\"line\">    if not bytes then</span><br><span class=\"line\">        -- &quot;sock:send&quot; always closes current connection on error</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx.update_time()</span><br><span class=\"line\">        ngx_log(DEBUG, ngx.now(), &quot;:log flush:&quot; .. bytes .. &quot;:&quot; .. packet)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sock_type ~= &#x27;udp&#x27;) then</span><br><span class=\"line\">        ok, err = sock:setkeepalive(0, pool_size)</span><br><span class=\"line\">        if not ok then</span><br><span class=\"line\">            return nil, err</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _need_flush()</span><br><span class=\"line\">    if buffer_size &gt; 0 then</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_lock()</span><br><span class=\"line\">    if not flushing then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;flush lock acquired&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        flushing = true</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_unlock()</span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx_log(DEBUG, &quot;flush lock released&quot;)</span><br><span class=\"line\">    end</span><br><span class=\"line\">    flushing = false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush()</span><br><span class=\"line\">    local err</span><br><span class=\"line\"></span><br><span class=\"line\">    -- pre check</span><br><span class=\"line\">    if not _flush_lock() then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;previous flush not finished&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        -- do this later</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not _need_flush() then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;no need to flush:&quot;, log_buffer_index)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        _flush_unlock()</span><br><span class=\"line\">        return true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- start flushing</span><br><span class=\"line\">    retry_send = 0</span><br><span class=\"line\">    if debug then</span><br><span class=\"line\">        ngx_log(DEBUG, &quot;start flushing&quot;)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local bytes</span><br><span class=\"line\">    while retry_send &lt;= max_retry_times do</span><br><span class=\"line\">        if log_buffer_index &gt; 0 then</span><br><span class=\"line\">            _prepare_stream_buffer()</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes, err = _do_flush()</span><br><span class=\"line\"></span><br><span class=\"line\">        if bytes then</span><br><span class=\"line\">            break</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;resend log messages to the log server: &quot;, err)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        -- ngx.sleep time is in seconds</span><br><span class=\"line\">        if not exiting then</span><br><span class=\"line\">            ngx_sleep(retry_interval / 1000)</span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">        retry_send = retry_send + 1</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    _flush_unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">    if not bytes then</span><br><span class=\"line\">        local err_msg = &quot;try to send log messages to the log server &quot;</span><br><span class=\"line\">                        .. &quot;failed after &quot; .. max_retry_times .. &quot; retries: &quot;</span><br><span class=\"line\">                        .. err</span><br><span class=\"line\">        _write_error(err_msg)</span><br><span class=\"line\">        return nil, err_msg</span><br><span class=\"line\">    else</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;send &quot; .. bytes .. &quot; bytes&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer_size = buffer_size - #send_buffer</span><br><span class=\"line\">    send_buffer = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _periodic_flush(premature)</span><br><span class=\"line\">    if premature then</span><br><span class=\"line\">        exiting = true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if need_periodic_flush or exiting then</span><br><span class=\"line\">        -- no regular flush happened after periodic flush timer had been set</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;performing periodic flush&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        _flush()</span><br><span class=\"line\">    else</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;no need to perform periodic flush: regular flush &quot;</span><br><span class=\"line\">                    .. &quot;happened before&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        need_periodic_flush = true</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    timer_at(periodic_flush, _periodic_flush)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _flush_buffer()</span><br><span class=\"line\">    local ok, err = timer_at(0, _flush)</span><br><span class=\"line\"></span><br><span class=\"line\">    need_periodic_flush = false</span><br><span class=\"line\"></span><br><span class=\"line\">    if not ok then</span><br><span class=\"line\">        _write_error(err)</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local function _write_buffer(msg, len)</span><br><span class=\"line\">    log_buffer_index = log_buffer_index + 1</span><br><span class=\"line\">    log_buffer_data[log_buffer_index] = msg</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer_size = buffer_size + len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return buffer_size</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.init(user_config)</span><br><span class=\"line\">    if (type(user_config) ~= &quot;table&quot;) then</span><br><span class=\"line\">        return nil, &quot;user_config must be a table&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    for k, v in pairs(user_config) do</span><br><span class=\"line\">        if k == &quot;host&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;host&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            host = v</span><br><span class=\"line\">        elseif k == &quot;port&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;port&quot; must be a number&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if v &lt; 0 or v &gt; MAX_PORT then</span><br><span class=\"line\">                return nil, (&#x27;&quot;port&quot; out of range 0~%s&#x27;):format(MAX_PORT)</span><br><span class=\"line\">            end</span><br><span class=\"line\">            port = v</span><br><span class=\"line\">        elseif k == &quot;path&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;path&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            path = v</span><br><span class=\"line\">        elseif k == &quot;sock_type&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sock_type&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if v ~= &quot;tcp&quot; and v ~= &quot;udp&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sock_type&quot; must be &quot;tcp&quot; or &quot;udp&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            sock_type = v</span><br><span class=\"line\">        elseif k == &quot;flush_limit&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;flush_limit&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            flush_limit = v</span><br><span class=\"line\">        elseif k == &quot;drop_limit&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;drop_limit&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            drop_limit = v</span><br><span class=\"line\">        elseif k == &quot;timeout&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;timeout&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            timeout = v</span><br><span class=\"line\">        elseif k == &quot;max_retry_times&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;max_retry_times&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            max_retry_times = v</span><br><span class=\"line\">        elseif k == &quot;retry_interval&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;retry_interval&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            -- ngx.sleep time is in seconds</span><br><span class=\"line\">            retry_interval = v</span><br><span class=\"line\">        elseif k == &quot;pool_size&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;pool_size&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            pool_size = v</span><br><span class=\"line\">        elseif k == &quot;max_buffer_reuse&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;max_buffer_reuse&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            max_buffer_reuse = v</span><br><span class=\"line\">        elseif k == &quot;periodic_flush&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;number&quot; or v &lt; 0 then</span><br><span class=\"line\">                return nil, &#x27;invalid &quot;periodic_flush&quot;&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            periodic_flush = v</span><br><span class=\"line\">        elseif k == &quot;ssl&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;boolean&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;ssl&quot; must be a boolean value&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            ssl = v</span><br><span class=\"line\">        elseif k == &quot;ssl_verify&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;boolean&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;ssl_verify&quot; must be a boolean value&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            ssl_verify = v</span><br><span class=\"line\">        elseif k == &quot;sni_host&quot; then</span><br><span class=\"line\">            if type(v) ~= &quot;string&quot; then</span><br><span class=\"line\">                return nil, &#x27;&quot;sni_host&quot; must be a string&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            sni_host = v</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if not (host and port) and not path then</span><br><span class=\"line\">        return nil, &quot;no logging server configured. \\&quot;host\\&quot;/\\&quot;port\\&quot; or &quot;</span><br><span class=\"line\">                .. &quot;\\&quot;path\\&quot; is required.&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if (flush_limit &gt;= drop_limit) then</span><br><span class=\"line\">        return nil, &quot;\\&quot;flush_limit\\&quot; should be &lt; \\&quot;drop_limit\\&quot;&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    flushing = false</span><br><span class=\"line\">    exiting = false</span><br><span class=\"line\">    connecting = false</span><br><span class=\"line\"></span><br><span class=\"line\">    connected = false</span><br><span class=\"line\">    retry_connect = 0</span><br><span class=\"line\">    retry_send = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    logger_initted = true</span><br><span class=\"line\"></span><br><span class=\"line\">    if periodic_flush then</span><br><span class=\"line\">        if debug then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;periodic flush enabled for every &quot;</span><br><span class=\"line\">                    .. periodic_flush .. &quot; seconds&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        need_periodic_flush = true</span><br><span class=\"line\">        timer_at(periodic_flush, _periodic_flush)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return logger_initted</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.log(msg)</span><br><span class=\"line\">    if not logger_initted then</span><br><span class=\"line\">        return nil, &quot;not initialized&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local bytes</span><br><span class=\"line\"></span><br><span class=\"line\">    if type(msg) ~= &quot;string&quot; then</span><br><span class=\"line\">        msg = tostring(msg)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local msg_len = #msg</span><br><span class=\"line\"></span><br><span class=\"line\">    if (debug) then</span><br><span class=\"line\">        ngx.update_time()</span><br><span class=\"line\">        ngx_log(DEBUG, ngx.now(), &quot;:log message length: &quot; .. msg_len)</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    -- response of &quot;_flush_buffer&quot; is not checked, because it writes</span><br><span class=\"line\">    -- error buffer</span><br><span class=\"line\">    if (is_exiting()) then</span><br><span class=\"line\">        exiting = true</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        if (debug) then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;Nginx worker is exiting&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        bytes = 0</span><br><span class=\"line\">    elseif (msg_len + buffer_size &lt; flush_limit) then</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        bytes = msg_len</span><br><span class=\"line\">    elseif (msg_len + buffer_size &lt;= drop_limit) then</span><br><span class=\"line\">        _write_buffer(msg, msg_len)</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        bytes = msg_len</span><br><span class=\"line\">    else</span><br><span class=\"line\">        _flush_buffer()</span><br><span class=\"line\">        if (debug) then</span><br><span class=\"line\">            ngx_log(DEBUG, &quot;logger buffer is full, this log message will be &quot;</span><br><span class=\"line\">                    .. &quot;dropped&quot;)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        bytes = 0</span><br><span class=\"line\">        --- this log message doesn&#x27;t fit in buffer, drop it</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if last_error then</span><br><span class=\"line\">        local err = last_error</span><br><span class=\"line\">        last_error = nil</span><br><span class=\"line\">        return bytes, err</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return bytes</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function _M.initted()</span><br><span class=\"line\">    return logger_initted</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">_M.flush = _flush</span><br><span class=\"line\"></span><br><span class=\"line\">return _M</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"init-lua\"><a href=\"#init-lua\" class=\"headerlink\" title=\"init.lua\"></a>init.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &#x27;config&#x27;</span><br><span class=\"line\">local match = string.match</span><br><span class=\"line\">--ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。</span><br><span class=\"line\">--因nginx和lua一起的关系，正则表达式使用\\d\\w\\s会出问题，</span><br><span class=\"line\">--local ngxmatch=ngx.re.match</span><br><span class=\"line\">local ngxmatch=ngx.re.find</span><br><span class=\"line\">local unescape=ngx.unescape_uri</span><br><span class=\"line\">local get_headers = ngx.req.get_headers</span><br><span class=\"line\">local optionIsOn = function (options) return options == &quot;on&quot; and true or false end</span><br><span class=\"line\">loghack=optionIsOn(loghack)</span><br><span class=\"line\">--载入socket.lua用于发送log到独立syslog服务器。</span><br><span class=\"line\">local logger = require &quot;socket&quot;</span><br><span class=\"line\">if loghack then</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tif not logger.initted() then</span><br><span class=\"line\">          local ok, err = logger.init&#123;</span><br><span class=\"line\">              --host = &#x27;192.168.0.1&#x27;,</span><br><span class=\"line\">              host = &#x27;logserver.local&#x27;,</span><br><span class=\"line\">              port = 514,</span><br><span class=\"line\">              sock_type = &quot;udp&quot;, --udp协议</span><br><span class=\"line\">              flush_limit = 1,\t--立即发送</span><br><span class=\"line\">              --drop_limit = 5678,</span><br><span class=\"line\">              pool_size = 100,--连接池大小</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if not ok then</span><br><span class=\"line\">              ngx.log(ngx.ERR, &quot;failed to initialize the logger: &quot;,</span><br><span class=\"line\">                      err)</span><br><span class=\"line\">              return</span><br><span class=\"line\">          end</span><br><span class=\"line\"> end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">logpath = logdir</span><br><span class=\"line\">rulepath = RulePath</span><br><span class=\"line\">logtofile = optionIsOn(logtofile)</span><br><span class=\"line\">logtoserver = optionIsOn(logtoserver)</span><br><span class=\"line\">UrlDeny = optionIsOn(UrlDeny)</span><br><span class=\"line\">PostCheck = optionIsOn(postMatch)</span><br><span class=\"line\">CookieCheck = optionIsOn(cookieMatch)</span><br><span class=\"line\">WhiteCheck = optionIsOn(whiteModule)</span><br><span class=\"line\">PathInfoFix = optionIsOn(PathInfoFix)</span><br><span class=\"line\">attacklog = optionIsOn(attacklog)</span><br><span class=\"line\">hackipdeny = optionIsOn(hackipdeny)</span><br><span class=\"line\">CCDeny = optionIsOn(CCDeny)</span><br><span class=\"line\">Redirect=optionIsOn(Redirect)</span><br><span class=\"line\">local file = io.open(&#x27;config&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getClientIp()</span><br><span class=\"line\">        IP  = ngx.var.remote_addr</span><br><span class=\"line\">        if IP == nil then</span><br><span class=\"line\">                IP  = &quot;unknown&quot;</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return IP</span><br><span class=\"line\">end</span><br><span class=\"line\">function write(logfile,msg)</span><br><span class=\"line\">    local fd = io.open(logfile,&quot;ab&quot;)</span><br><span class=\"line\">    if fd == nil then return end</span><br><span class=\"line\">    fd:write(msg)</span><br><span class=\"line\">    fd:flush()</span><br><span class=\"line\">    fd:close()</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function swrite(msg)</span><br><span class=\"line\">      --保存警告等级要高于nginx error_log的默认等级。</span><br><span class=\"line\">\t\t\tngx.log(ngx.CRIT,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function log(method,url,data,ruletag)</span><br><span class=\"line\">    if attacklog then</span><br><span class=\"line\">        local realIp = getClientIp()</span><br><span class=\"line\">        local ua = ngx.var.http_user_agent</span><br><span class=\"line\">        if ua == nil then</span><br><span class=\"line\">        \tua=&quot;null&quot;</span><br><span class=\"line\">        end</span><br><span class=\"line\">        local servername=ngx.var.host</span><br><span class=\"line\">        local time=ngx.localtime()</span><br><span class=\"line\">        if logtofile then</span><br><span class=\"line\">        local filename = logpath..&#x27;/&#x27;..servername..&quot;_&quot;..ngx.today()..&quot;_sec.log&quot;</span><br><span class=\"line\">        line=realIp..&quot; [&quot;..time..&quot;]&quot;..&quot;\\&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\\&quot;&quot;..data..&quot;\\&quot;&quot;..ua..&quot;\\&quot;&quot;..ruletag..&quot;\\&quot;&quot;..&quot;\\n&quot;</span><br><span class=\"line\">        write(filename,line)</span><br><span class=\"line\">        end</span><br><span class=\"line\">        if logtoserver then</span><br><span class=\"line\">        line=realIp..&quot;\\&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\\&quot;&quot;..data..&quot;\\&quot;&quot;..ua..&quot;\\&quot;&quot;..ruletag..&quot;\\&quot;&quot;</span><br><span class=\"line\">        --line=&quot;lua_waf:&quot;..line</span><br><span class=\"line\">        swrite(line)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    --发送ip到独立syslog服务器。</span><br><span class=\"line\">    if loghack then  local bytes, err = logger.log(getClientIp()) end</span><br><span class=\"line\">\t\t--只要log记录，说明被攻击，利用denyhackip将ip记录。</span><br><span class=\"line\">\t\tif hackipdeny then  denyhackip(0) end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">------------------------------------规则读取函数-------------------------------------------------------------------</span><br><span class=\"line\">function read_rule(var)</span><br><span class=\"line\">    file = io.open(rulepath..&#x27;/&#x27;..var,&quot;r&quot;)</span><br><span class=\"line\">    if file==nil then</span><br><span class=\"line\">        return</span><br><span class=\"line\">    end</span><br><span class=\"line\">    t = &#123;&#125;</span><br><span class=\"line\">    for line in file:lines() do</span><br><span class=\"line\">        table.insert(t,line)</span><br><span class=\"line\">    end</span><br><span class=\"line\">    file:close()</span><br><span class=\"line\">    return(t)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">urlrules=read_rule(&#x27;url&#x27;)</span><br><span class=\"line\">argsrules=read_rule(&#x27;args&#x27;)</span><br><span class=\"line\">uarules=read_rule(&#x27;user-agent&#x27;)</span><br><span class=\"line\">wturlrules=read_rule(&#x27;whiteurl&#x27;)</span><br><span class=\"line\">postrules=read_rule(&#x27;post&#x27;)</span><br><span class=\"line\">ckrules=read_rule(&#x27;cookie&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function say_html()</span><br><span class=\"line\">    if Redirect then</span><br><span class=\"line\">        ngx.header.content_type = &quot;text/html&quot;</span><br><span class=\"line\">        ngx.status = ngx.HTTP_FORBIDDEN</span><br><span class=\"line\">        ngx.say(html)</span><br><span class=\"line\">        ngx.exit(ngx.status)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function whiteurl()</span><br><span class=\"line\">    if WhiteCheck then</span><br><span class=\"line\">        if wturlrules ~=nil then</span><br><span class=\"line\">\t\t\t\t\t\tlocal urlpath = string.gsub(ngx.var.request_uri, &quot;?.*&quot;, &quot;&quot;)</span><br><span class=\"line\">            for _,rule in pairs(wturlrules) do</span><br><span class=\"line\">            --针对site:开始的进行域名匹配。增加白名单用处。</span><br><span class=\"line\">\t            local sitemod,_=string.find(rule,&quot;site:&quot;)</span><br><span class=\"line\">\t        \t\tif sitemod==1 then</span><br><span class=\"line\">\t        \t\t\trule=string.gsub(rule,&quot;site:&quot;,&quot;&quot;,1)</span><br><span class=\"line\">\t        \t\t\t--调试whiteurl</span><br><span class=\"line\">\t        \t\t\t--if ngx.var.host==&#x27;domino.cqhrss.gov.cn&#x27; then</span><br><span class=\"line\">\t        \t\t\t--\tlog(&#x27;debug&#x27;,ngx.var.uri,&quot;&quot;,rule)</span><br><span class=\"line\">\t        \t\t\t--end</span><br><span class=\"line\">\t        \t\t\tif ngxmatch(ngx.var.host..ngx.var.uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                    return true</span><br><span class=\"line\">                end</span><br><span class=\"line\">\t        \t\telse</span><br><span class=\"line\">            \t\tif ngxmatch(ngx.var.uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                    return true</span><br><span class=\"line\">\t\t\t\t\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlocal pathmod,_=string.find(rule,&quot;path:&quot;)</span><br><span class=\"line\">\t\t\t        \t\tif pathmod==1 then</span><br><span class=\"line\">\t\t\t        \t\t\trule=string.gsub(rule,&quot;path:&quot;,&quot;&quot;,1)</span><br><span class=\"line\">\t\t\t        \t\t\tif urlpath==rule then</span><br><span class=\"line\">\t\t                    return true</span><br><span class=\"line\">\t\t                end</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tend</span><br><span class=\"line\">                end</span><br><span class=\"line\">            \tend</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function fileExtCheck(ext)</span><br><span class=\"line\">    local items = Set(black_fileExt)</span><br><span class=\"line\">    ext=string.lower(ext)</span><br><span class=\"line\">    if ext then</span><br><span class=\"line\">        for rule,_ in pairs(items) do</span><br><span class=\"line\">            if ngxmatch(ext,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">            log(&#x27;POST&#x27;,ngx.var.request_uri,&quot;-&quot;,&quot;file attack with ext &quot;..ext)</span><br><span class=\"line\">            say_html()</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function Set (list)</span><br><span class=\"line\">  local set = &#123;&#125;</span><br><span class=\"line\">  for _, l in ipairs(list) do set[l] = true end</span><br><span class=\"line\">  return set</span><br><span class=\"line\">end</span><br><span class=\"line\">function args()</span><br><span class=\"line\">    for _,rule in pairs(argsrules) do</span><br><span class=\"line\">        local args = ngx.req.get_uri_args()</span><br><span class=\"line\">        for key, val in pairs(args) do</span><br><span class=\"line\">            if type(val)==&#x27;table&#x27; then</span><br><span class=\"line\">                 local t=&#123;&#125;</span><br><span class=\"line\">                 for k,v in pairs(val) do</span><br><span class=\"line\">                    if v == true then</span><br><span class=\"line\">                        v=&quot;&quot;</span><br><span class=\"line\">                    end</span><br><span class=\"line\">                    table.insert(t,v)</span><br><span class=\"line\">                end</span><br><span class=\"line\">                data=table.concat(t, &quot; &quot;)</span><br><span class=\"line\">            else</span><br><span class=\"line\">                data=val</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if data and type(data) ~= &quot;boolean&quot; and rule ~=&quot;&quot; and ngxmatch(unescape(data),rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;GET&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function url()</span><br><span class=\"line\">    if UrlDeny then</span><br><span class=\"line\">        for _,rule in pairs(urlrules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ngx.var.request_uri,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;GET&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function ua()</span><br><span class=\"line\">    local ua = ngx.var.http_user_agent</span><br><span class=\"line\">    if ua ~= nil then</span><br><span class=\"line\">        for _,rule in pairs(uarules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ua,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;UA&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function body(data)</span><br><span class=\"line\">    for _,rule in pairs(postrules) do</span><br><span class=\"line\">        if rule ~=&quot;&quot; and data~=&quot;&quot; and ngxmatch(unescape(data),rule,&quot;isjo&quot;) then</span><br><span class=\"line\">            log(&#x27;POST&#x27;,ngx.var.request_uri,data,rule)</span><br><span class=\"line\">            say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\">function cookie()</span><br><span class=\"line\">    local ck = ngx.var.http_cookie</span><br><span class=\"line\">    if CookieCheck and ck then</span><br><span class=\"line\">        for _,rule in pairs(ckrules) do</span><br><span class=\"line\">            if rule ~=&quot;&quot; and ngxmatch(ck,rule,&quot;isjo&quot;) then</span><br><span class=\"line\">                log(&#x27;Cookie&#x27;,ngx.var.request_uri,&quot;-&quot;,rule)</span><br><span class=\"line\">                say_html()</span><br><span class=\"line\">            return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function denycc()</span><br><span class=\"line\">    if CCDeny then</span><br><span class=\"line\">        local uri=ngx.var.uri</span><br><span class=\"line\">      \tlocal m, err = ngx.re.match(CCrate,&#x27;([0-9]+)/([0-9]+)/([0-9]+)&#x27;)</span><br><span class=\"line\">      \tlocal CCcount=tonumber(m[1]) --计数器上限</span><br><span class=\"line\">        local CCseconds=tonumber(m[2]) --计时器</span><br><span class=\"line\">        local CClimits=tonumber(m[3]) --阻止访问时间</span><br><span class=\"line\">        local token = getClientIp()..uri</span><br><span class=\"line\">        local limit = ngx.shared.limit</span><br><span class=\"line\">        local req,_=limit:get(token) --计数器当前值</span><br><span class=\"line\"></span><br><span class=\"line\">        if req then</span><br><span class=\"line\">            if req &gt; CCcount then</span><br><span class=\"line\">                ngx.exit(404)</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            else</span><br><span class=\"line\">            \t\tif req == CCcount then    limit:set(token,CCcount+1,CClimits)  end</span><br><span class=\"line\"></span><br><span class=\"line\">                limit:incr(token,1)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t--调试在syslog日志中查看</span><br><span class=\"line\">\t\t\t\t\t\t\t\t--swrite(&#x27;计数器:&#x27;..token..&#x27;当前计数器&#x27;..req..&#x27;阻止访问时间:&#x27;..CClimits)</span><br><span class=\"line\"></span><br><span class=\"line\">            end</span><br><span class=\"line\">        else</span><br><span class=\"line\">            limit:set(token,1,CCseconds)</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">--chk为1表示检测值，不增加，不创建，返回检测结果。</span><br><span class=\"line\">function denyhackip(chk)</span><br><span class=\"line\">    if hackipdeny then</span><br><span class=\"line\"></span><br><span class=\"line\">       local m, err = ngx.re.match(hackrate,&#x27;([0-9]+)/([0-9]+)/([0-9]+)&#x27;)</span><br><span class=\"line\">      \tlocal hicount=tonumber(m[1]) --计数器上限</span><br><span class=\"line\">        local hiseconds=tonumber(m[2]) --计时器</span><br><span class=\"line\">        local hilimits=tonumber(m[3]) --阻止访问时间</span><br><span class=\"line\">        local token = &quot;hackip&quot;..getClientIp()</span><br><span class=\"line\">        local limit = ngx.shared.limit</span><br><span class=\"line\">        local req,_=limit:get(token) --计数器当前值</span><br><span class=\"line\">        if req then</span><br><span class=\"line\">            if req &gt; hicount then</span><br><span class=\"line\">                ngx.exit(404)</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            else</span><br><span class=\"line\"></span><br><span class=\"line\">            \t\tif req == hicount then</span><br><span class=\"line\">            \t\t\t\tlimit:set(token,hicount+1,hilimits)</span><br><span class=\"line\">            \t\t\t\tswrite(&quot;ip:&quot;..getClientIp()..&quot;因攻击被暂停访问&quot;..hilimits..&quot;秒。&quot;)</span><br><span class=\"line\">            \t\t\t\tend</span><br><span class=\"line\">                 if chk ~=1 then limit:incr(token,1)      end</span><br><span class=\"line\">                --调试在syslog日志中查看</span><br><span class=\"line\">                --swrite(&quot;计数器:&quot;..token..&quot;检测状态:&quot;..chk..&quot;当前计数器&quot;..req..&quot;阻止访问时间:&quot;..hilimits)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            end</span><br><span class=\"line\">        else</span><br><span class=\"line\">        \t\tif chk ~=1 then limit:set(token,1,hiseconds) \tend</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">    return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function get_boundary()</span><br><span class=\"line\">    local header = get_headers()[&quot;content-type&quot;]</span><br><span class=\"line\">    if not header then</span><br><span class=\"line\">        return nil</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    if type(header) == &quot;table&quot; then</span><br><span class=\"line\">        header = header[1]</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local m = match(header, &quot;;%s*boundary=\\&quot;([^\\&quot;]+)\\&quot;&quot;)</span><br><span class=\"line\">    if m then</span><br><span class=\"line\">        return m</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    return match(header, &quot;;%s*boundary=([^\\&quot;,;]+)&quot;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function whiteip()</span><br><span class=\"line\">    if next(ipWhitelist) ~= nil then</span><br><span class=\"line\">        for _,ip in pairs(ipWhitelist) do</span><br><span class=\"line\">            if getClientIp()==ip then</span><br><span class=\"line\">                return true</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">        return false</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function blockip()</span><br><span class=\"line\">     if next(ipBlocklist) ~= nil then</span><br><span class=\"line\">         for _,ip in pairs(ipBlocklist) do</span><br><span class=\"line\">             if getClientIp()==ip then</span><br><span class=\"line\">                 ngx.exit(403)</span><br><span class=\"line\">                 return true</span><br><span class=\"line\">             end</span><br><span class=\"line\">         end</span><br><span class=\"line\">     end</span><br><span class=\"line\">         return false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"config-lua\"><a href=\"#config-lua\" class=\"headerlink\" title=\"config.lua\"></a>config.lua</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RulePath = &quot;/usr/local/nginx/conf/waf/wafconf/&quot;</span><br><span class=\"line\">attacklog = &quot;on&quot;</span><br><span class=\"line\">--保存日志到文件</span><br><span class=\"line\">logtofile = &quot;on&quot;</span><br><span class=\"line\">logdir = &quot;/site/wwwlogs/waf/&quot;</span><br><span class=\"line\">--保存日志到syslog,采用nginx设置</span><br><span class=\"line\">logtoserver = &quot;off&quot;</span><br><span class=\"line\">--通过syslog日志方式提交hack_ip记录到日志服务器</span><br><span class=\"line\">loghack=&quot;off&quot;</span><br><span class=\"line\">UrlDeny=&quot;on&quot;</span><br><span class=\"line\">Redirect=&quot;on&quot;</span><br><span class=\"line\">CookieMatch=&quot;on&quot;</span><br><span class=\"line\">postMatch=&quot;on&quot;</span><br><span class=\"line\">whiteModule=&quot;on&quot;</span><br><span class=\"line\">black_fileExt=&#123;&quot;php&quot;,&quot;jsp&quot;&#125;</span><br><span class=\"line\">ipWhitelist=&#123;&quot;127.0.0.1&quot;,&quot;192.168.2.1&quot;&#125;</span><br><span class=\"line\">ipBlocklist=&#123;&quot;1.0.0.1&quot;&#125;</span><br><span class=\"line\">--违规ip登记，是否限制访问。</span><br><span class=\"line\">--hackrate超过10次/5秒,限制访问1800秒。</span><br><span class=\"line\">hackipdeny=&quot;on&quot;</span><br><span class=\"line\">hackrate=&quot;10/60/1800&quot;</span><br><span class=\"line\">--cc攻击防范</span><br><span class=\"line\">CCDeny=&quot;on&quot;</span><br><span class=\"line\">CCrate=&quot;30/60/30&quot;</span><br><span class=\"line\">html=[[</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;嘿，搞啥呢&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">p &#123;line-height:20px;&#125;</span><br><span class=\"line\">ul&#123; list-style-type:none;&#125;</span><br><span class=\"line\">li&#123; list-style-type:none;&#125;</span><br><span class=\"line\">body&#123;padding:0; margin:0; font:14px/1.5 Microsoft Yahei, 宋体,sans-serif; color:#555;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;div style=&quot;margin: 0 auto; max-width:1000px; padding-top:70px; overflow:hidden;&quot;&gt;</span><br><span class=\"line\">  &lt;div style=&quot;padding:0 15px;&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot; height:40px; line-height:40px; color:#fff; font-size:16px; overflow:hidden; background:#6bb3f6; padding-left:20px;&quot;&gt;咳咳，说一下&lt;/div&gt;</span><br><span class=\"line\">    &lt;div style=&quot;border:1px dashed #cdcece; border-top:none; font-size:14px; background:#fff; color:#555; line-height:24px; height:220px; padding:20px 20px 0 20px; overflow-y:auto;background:#f3f7f9;&quot;&gt;</span><br><span class=\"line\">      &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600; color:#fc4f03;&quot;&gt;你被我们抓住了！&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;可能原因：人品有问题&lt;/p&gt;</span><br><span class=\"line\">&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:1; text-indent:0px;&quot;&gt;如何解决：&lt;/p&gt;</span><br><span class=\"line\">&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;1）给我们发邮件说明；&lt;/li&gt;</span><br><span class=\"line\">&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;2）给我们打电话说明；&lt;/li&gt;</span><br><span class=\"line\">&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;3）什么，上面都不行？转给我们一个亿，人品马上日日高升；&lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"whiteurl\"><a href=\"#whiteurl\" class=\"headerlink\" title=\"whiteurl\"></a>whiteurl</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^/zhaonvpengyou</span><br><span class=\"line\">site:^lianxiwo\\.com/</span><br><span class=\"line\">path:/wogeiniliuyi.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>s<br>本来还想慢慢说明一下，想想还是算了，这篇文章多是为了自己记住！我主要是基于<a href=\"https://github.com/loveshell/ngx_lua_waf/pull/136%E4%BF%AE%E6%94%B9%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BE%9D%E8%99%8E%E7%94%BB%E7%8C%AB%EF%BC%8C%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%88%A4%E6%96%ADrequest_uri%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD%EF%BC%81\">https://github.com/loveshell/ngx_lua_waf/pull/136修改，然后依虎画猫，增加了一个判断request_uri的小功能！</a></p>\n"},{"title":"为Google Chrome安装本地插件","date":"2018-10-28T14:20:13.000Z","url":"install-google-chrome-local-extensions","description":"很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。","_content":"\n> 很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。\n\n## 安全和自定义的矛盾\n\n产品的安全，最好是稳定地开启安全设置项，也就是说最好让官方尽可能地封堵上可能惹上安全问题的功能。而Google就是以用户安全为前提，最大限度地去限制了Google\nChrome使用本地扩展。本地安装插件确实是方便了自定义，但却可能会引发未知的安全问题，毕竟信手拈来的代码没有经过官网的审核很可能会有问题。所以，安全和自定义是一个矛盾！\n\n## Windows下安装本地扩展\n\n我们要把拿到的代码打包成扩展，并且确保本地安装的Google Chrome扩展安全稳定地运行！\n\n 1. 打开Google\n    Chrome插件管理页面，即chrome://extensions，在右上角处打开“开发者模式”。如果打开成功，那么左上角会出现“加载已解压的扩展程序”和“打包扩展程序”两个按钮\n 2. 点击“打包扩展程序”按钮，选择要打包的文件夹，按照提示把代码打包成扩展程序。把打包好的本地扩展程序crx拖拽到扩展程序页面完成安装。安装后，扩展程序无法启用。找到安装好的扩展程序，我们复制一下扩展程序的ID。\n 3. 打开http://www.chromium.org/administrators/policy-templates  页面下载策略模版（[点击这里](https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip)下载也可以）。解压之后，在windows文件夹里面打开adm文件夹，找到自己系统语言对应的文件夹，把chrome.adm解压出来。点击开始菜单，打开运行，在输入框里面输入gpedit.msc，按enter启动本地组策略编辑器。\n 4. 我们在左边展开“计算机配置”，在“管理模版”处右击，选择“添加/删除模版(A)…”打开“添加/删除模版”对话框。在对话框里面，点击“添加”按钮，选择上一步得到的chrome.adm文件，导入管理模版。\n 5. 导入成功后，依次展开“计算机配置”-“管理模版”-“经典管理模版ADM”-“Google”-“Google Chrome”-“扩展程序”，在右侧，我们双击“配置扩展程序安装白名单”，打开“配置扩展程序安装白名单”对话框。点击“启用”后，下面会显示内容，在下面左边点击“显示”按钮，把第2步得到的ID添加进去，然后依次保存。\n 6. 重启Google Chrome，会有一个提示，但是也是最后的提示。此后就可以正常地使用这个本地扩展程序，就像在线安装的一样。\n\n## Mac下安装本地扩展\n\n打包步骤，参考上面的第2步和第2步即可，而且不需要任何的配置了！\n\n## Linux下安装本地扩展\n\n打包步骤也是参考windows下的第1和第2步骤，具体是不是需要配置，我就没有去实践了，可打开<http://www.chromium.org/administrators/policy-templates>看看说明！","source":"_posts/为Google Chrome安装本地插件.md","raw":"---\ntitle: 为Google Chrome安装本地插件\ndate: 2018-10-28 22:20:13\ntags: \n  - google chrome\ncategories:\n  - 记录\nurl: install-google-chrome-local-extensions\ndescription: 很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。\n---\n\n> 很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。\n\n## 安全和自定义的矛盾\n\n产品的安全，最好是稳定地开启安全设置项，也就是说最好让官方尽可能地封堵上可能惹上安全问题的功能。而Google就是以用户安全为前提，最大限度地去限制了Google\nChrome使用本地扩展。本地安装插件确实是方便了自定义，但却可能会引发未知的安全问题，毕竟信手拈来的代码没有经过官网的审核很可能会有问题。所以，安全和自定义是一个矛盾！\n\n## Windows下安装本地扩展\n\n我们要把拿到的代码打包成扩展，并且确保本地安装的Google Chrome扩展安全稳定地运行！\n\n 1. 打开Google\n    Chrome插件管理页面，即chrome://extensions，在右上角处打开“开发者模式”。如果打开成功，那么左上角会出现“加载已解压的扩展程序”和“打包扩展程序”两个按钮\n 2. 点击“打包扩展程序”按钮，选择要打包的文件夹，按照提示把代码打包成扩展程序。把打包好的本地扩展程序crx拖拽到扩展程序页面完成安装。安装后，扩展程序无法启用。找到安装好的扩展程序，我们复制一下扩展程序的ID。\n 3. 打开http://www.chromium.org/administrators/policy-templates  页面下载策略模版（[点击这里](https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip)下载也可以）。解压之后，在windows文件夹里面打开adm文件夹，找到自己系统语言对应的文件夹，把chrome.adm解压出来。点击开始菜单，打开运行，在输入框里面输入gpedit.msc，按enter启动本地组策略编辑器。\n 4. 我们在左边展开“计算机配置”，在“管理模版”处右击，选择“添加/删除模版(A)…”打开“添加/删除模版”对话框。在对话框里面，点击“添加”按钮，选择上一步得到的chrome.adm文件，导入管理模版。\n 5. 导入成功后，依次展开“计算机配置”-“管理模版”-“经典管理模版ADM”-“Google”-“Google Chrome”-“扩展程序”，在右侧，我们双击“配置扩展程序安装白名单”，打开“配置扩展程序安装白名单”对话框。点击“启用”后，下面会显示内容，在下面左边点击“显示”按钮，把第2步得到的ID添加进去，然后依次保存。\n 6. 重启Google Chrome，会有一个提示，但是也是最后的提示。此后就可以正常地使用这个本地扩展程序，就像在线安装的一样。\n\n## Mac下安装本地扩展\n\n打包步骤，参考上面的第2步和第2步即可，而且不需要任何的配置了！\n\n## Linux下安装本地扩展\n\n打包步骤也是参考windows下的第1和第2步骤，具体是不是需要配置，我就没有去实践了，可打开<http://www.chromium.org/administrators/policy-templates>看看说明！","slug":"为Google Chrome安装本地插件","published":1,"updated":"2022-05-12T17:06:34.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6au8000plvtd3kjt1zbq","content":"<blockquote>\n<p>很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。</p>\n</blockquote>\n<h2 id=\"安全和自定义的矛盾\"><a href=\"#安全和自定义的矛盾\" class=\"headerlink\" title=\"安全和自定义的矛盾\"></a>安全和自定义的矛盾</h2><p>产品的安全，最好是稳定地开启安全设置项，也就是说最好让官方尽可能地封堵上可能惹上安全问题的功能。而Google就是以用户安全为前提，最大限度地去限制了Google<br>Chrome使用本地扩展。本地安装插件确实是方便了自定义，但却可能会引发未知的安全问题，毕竟信手拈来的代码没有经过官网的审核很可能会有问题。所以，安全和自定义是一个矛盾！</p>\n<h2 id=\"Windows下安装本地扩展\"><a href=\"#Windows下安装本地扩展\" class=\"headerlink\" title=\"Windows下安装本地扩展\"></a>Windows下安装本地扩展</h2><p>我们要把拿到的代码打包成扩展，并且确保本地安装的Google Chrome扩展安全稳定地运行！</p>\n<ol>\n<li>打开Google<br>Chrome插件管理页面，即chrome:&#x2F;&#x2F;extensions，在右上角处打开“开发者模式”。如果打开成功，那么左上角会出现“加载已解压的扩展程序”和“打包扩展程序”两个按钮</li>\n<li>点击“打包扩展程序”按钮，选择要打包的文件夹，按照提示把代码打包成扩展程序。把打包好的本地扩展程序crx拖拽到扩展程序页面完成安装。安装后，扩展程序无法启用。找到安装好的扩展程序，我们复制一下扩展程序的ID。</li>\n<li>打开<a href=\"http://www.chromium.org/administrators/policy-templates\">http://www.chromium.org/administrators/policy-templates</a>  页面下载策略模版（<a href=\"https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip\">点击这里</a>下载也可以）。解压之后，在windows文件夹里面打开adm文件夹，找到自己系统语言对应的文件夹，把chrome.adm解压出来。点击开始菜单，打开运行，在输入框里面输入gpedit.msc，按enter启动本地组策略编辑器。</li>\n<li>我们在左边展开“计算机配置”，在“管理模版”处右击，选择“添加&#x2F;删除模版(A)…”打开“添加&#x2F;删除模版”对话框。在对话框里面，点击“添加”按钮，选择上一步得到的chrome.adm文件，导入管理模版。</li>\n<li>导入成功后，依次展开“计算机配置”-“管理模版”-“经典管理模版ADM”-“Google”-“Google Chrome”-“扩展程序”，在右侧，我们双击“配置扩展程序安装白名单”，打开“配置扩展程序安装白名单”对话框。点击“启用”后，下面会显示内容，在下面左边点击“显示”按钮，把第2步得到的ID添加进去，然后依次保存。</li>\n<li>重启Google Chrome，会有一个提示，但是也是最后的提示。此后就可以正常地使用这个本地扩展程序，就像在线安装的一样。</li>\n</ol>\n<h2 id=\"Mac下安装本地扩展\"><a href=\"#Mac下安装本地扩展\" class=\"headerlink\" title=\"Mac下安装本地扩展\"></a>Mac下安装本地扩展</h2><p>打包步骤，参考上面的第2步和第2步即可，而且不需要任何的配置了！</p>\n<h2 id=\"Linux下安装本地扩展\"><a href=\"#Linux下安装本地扩展\" class=\"headerlink\" title=\"Linux下安装本地扩展\"></a>Linux下安装本地扩展</h2><p>打包步骤也是参考windows下的第1和第2步骤，具体是不是需要配置，我就没有去实践了，可打开<a href=\"http://www.chromium.org/administrators/policy-templates\">http://www.chromium.org/administrators/policy-templates</a>看看说明！</p>\n","site":{"data":{}},"length":1212,"excerpt":"","more":"<blockquote>\n<p>很早就开始使用Google Chrome浏览器，除了我自己对Google的产品有一种迷之好感，还有Google Chrome秉承的简洁高效理念以及Google Chrome自带的安全功能。</p>\n</blockquote>\n<h2 id=\"安全和自定义的矛盾\"><a href=\"#安全和自定义的矛盾\" class=\"headerlink\" title=\"安全和自定义的矛盾\"></a>安全和自定义的矛盾</h2><p>产品的安全，最好是稳定地开启安全设置项，也就是说最好让官方尽可能地封堵上可能惹上安全问题的功能。而Google就是以用户安全为前提，最大限度地去限制了Google<br>Chrome使用本地扩展。本地安装插件确实是方便了自定义，但却可能会引发未知的安全问题，毕竟信手拈来的代码没有经过官网的审核很可能会有问题。所以，安全和自定义是一个矛盾！</p>\n<h2 id=\"Windows下安装本地扩展\"><a href=\"#Windows下安装本地扩展\" class=\"headerlink\" title=\"Windows下安装本地扩展\"></a>Windows下安装本地扩展</h2><p>我们要把拿到的代码打包成扩展，并且确保本地安装的Google Chrome扩展安全稳定地运行！</p>\n<ol>\n<li>打开Google<br>Chrome插件管理页面，即chrome:&#x2F;&#x2F;extensions，在右上角处打开“开发者模式”。如果打开成功，那么左上角会出现“加载已解压的扩展程序”和“打包扩展程序”两个按钮</li>\n<li>点击“打包扩展程序”按钮，选择要打包的文件夹，按照提示把代码打包成扩展程序。把打包好的本地扩展程序crx拖拽到扩展程序页面完成安装。安装后，扩展程序无法启用。找到安装好的扩展程序，我们复制一下扩展程序的ID。</li>\n<li>打开<a href=\"http://www.chromium.org/administrators/policy-templates\">http://www.chromium.org/administrators/policy-templates</a>  页面下载策略模版（<a href=\"https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip\">点击这里</a>下载也可以）。解压之后，在windows文件夹里面打开adm文件夹，找到自己系统语言对应的文件夹，把chrome.adm解压出来。点击开始菜单，打开运行，在输入框里面输入gpedit.msc，按enter启动本地组策略编辑器。</li>\n<li>我们在左边展开“计算机配置”，在“管理模版”处右击，选择“添加&#x2F;删除模版(A)…”打开“添加&#x2F;删除模版”对话框。在对话框里面，点击“添加”按钮，选择上一步得到的chrome.adm文件，导入管理模版。</li>\n<li>导入成功后，依次展开“计算机配置”-“管理模版”-“经典管理模版ADM”-“Google”-“Google Chrome”-“扩展程序”，在右侧，我们双击“配置扩展程序安装白名单”，打开“配置扩展程序安装白名单”对话框。点击“启用”后，下面会显示内容，在下面左边点击“显示”按钮，把第2步得到的ID添加进去，然后依次保存。</li>\n<li>重启Google Chrome，会有一个提示，但是也是最后的提示。此后就可以正常地使用这个本地扩展程序，就像在线安装的一样。</li>\n</ol>\n<h2 id=\"Mac下安装本地扩展\"><a href=\"#Mac下安装本地扩展\" class=\"headerlink\" title=\"Mac下安装本地扩展\"></a>Mac下安装本地扩展</h2><p>打包步骤，参考上面的第2步和第2步即可，而且不需要任何的配置了！</p>\n<h2 id=\"Linux下安装本地扩展\"><a href=\"#Linux下安装本地扩展\" class=\"headerlink\" title=\"Linux下安装本地扩展\"></a>Linux下安装本地扩展</h2><p>打包步骤也是参考windows下的第1和第2步骤，具体是不是需要配置，我就没有去实践了，可打开<a href=\"http://www.chromium.org/administrators/policy-templates\">http://www.chromium.org/administrators/policy-templates</a>看看说明！</p>\n"},{"title":"也来说一说ipset拓展iptables","date":"2018-01-12T23:10:00.000Z","url":"talking-about-iptables-and-ipset","description":"ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！","_content":"\n> ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！\n\n\n## 安装iptables\n\n具体的安装方法，网上有很多，也可以参考我自己记录的《[在centos7上安装iptables作为防火墙](/install-iptables-as-firewall-on-centos7)》。大家最好字字句句看清楚，有一些注释说明很重要。\n\n## 安装ipset\n\n```\nyum -y install ipset\n```\n\n\n## 设置开机启动\n\n```\nwget ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/mludvig:/elml/CentOS_CentOS-6/noarch/ipset-init-1.0-10.1.noarch.rpm\nrpm -ivh ipset-init-1.0-10.1.noarch.rpm\n```\n\n这个软件包叫做ipset-init。之所以要安装这个包，是因为我用的是centos6.5，ipset提供的init.d脚本好像有问题！ipset-init包内容如下：\n\n```\n/etc/rc.d/init.d/ipset\n/etc/sysconfig/ipset\n/etc/sysconfig/ipset-config\n```\n\n使用chkconfig命令添加开机启动\n\n\n```\nchkconfig --add ipset\n```\n\n## 配置ipset\n\n接下来的工作主要是创建一个ipset集合，并保存它！！\n\n```\nipset create babe hash:ip hashsize 1024 maxelem 1000000 timeout 86400\nservice ipset save\n```\n\nbabe是集合名称。hash是指定格式用的,，更多格式可以通过ipset\n--help查看。hashsize是指初始化条数空间，maxelem是指最大条数空间。timeout指的并不是集合的过期时间，而是新增hash内容的默认过期时间。如果不需要超时，可以吧timeout参数去掉即可。\n\n添加IP到ipset集合里面\n\n```\nipset add babe 1.1.1.1 timeout 3600\n```\n\n我们需要注意点的是，如果创建集合的时候没有使用timeout参数，那么我们添加IP的时候，也不能使用timeout，如下：\n\n```\nipset add babe 1.1.1.1\n```\n\n添加完了，得保存一下，不然重启会丢失\n\n```\nservice ipset save\n```\n\n自动处理添加ipset集合hash内容\n假设有一个文件是/data/some/block.list，里面一行有一个IP，我们需要将这些IP都加入ipset的babe集合里面。\n首先，创建一个叫做block.sh的脚步，它的路径是/data/some/block.sh。脚本内容如下：\n\n```\ngrep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' /data/some/block.list | awk '{print \"ipset add bklist\",$0}'|sh\nservice ipset save\nservice iptables reload\n```\n\n接下来，我们让系统每半小时执行一次上面的脚本。\n\n```\ncrontab -e\n0,30 */1 * * * /data/some/block.sh > /dev/null 2>&1\n```\n\n保存之后即可。\n\n## 配置iptables\n\n将集合作为黑名单\n\n```\niptables -I INPUT -m set --match-set babe src -j DROP\n```\n\n将集合作为白名单\n\n```\niptables -I INPUT -m set ! --match-set babe src -j DROP\n```\n\n执行完了，需要保存并重载防火墙内容。\n\n```\nservice iptables save\nservice iptables reload\n```","source":"_posts/也来说一说ipset拓展iptables.md","raw":"---\ntitle: 也来说一说ipset拓展iptables\ndate: 2018-01-13 07:10:00\ntags: \n  - ipset\n  - iptables\n  - 防火墙\ncategories:\n  - 技术\nurl: talking-about-iptables-and-ipset\ndescription: ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！\n---\n\n> ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！\n\n\n## 安装iptables\n\n具体的安装方法，网上有很多，也可以参考我自己记录的《[在centos7上安装iptables作为防火墙](/install-iptables-as-firewall-on-centos7)》。大家最好字字句句看清楚，有一些注释说明很重要。\n\n## 安装ipset\n\n```\nyum -y install ipset\n```\n\n\n## 设置开机启动\n\n```\nwget ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/mludvig:/elml/CentOS_CentOS-6/noarch/ipset-init-1.0-10.1.noarch.rpm\nrpm -ivh ipset-init-1.0-10.1.noarch.rpm\n```\n\n这个软件包叫做ipset-init。之所以要安装这个包，是因为我用的是centos6.5，ipset提供的init.d脚本好像有问题！ipset-init包内容如下：\n\n```\n/etc/rc.d/init.d/ipset\n/etc/sysconfig/ipset\n/etc/sysconfig/ipset-config\n```\n\n使用chkconfig命令添加开机启动\n\n\n```\nchkconfig --add ipset\n```\n\n## 配置ipset\n\n接下来的工作主要是创建一个ipset集合，并保存它！！\n\n```\nipset create babe hash:ip hashsize 1024 maxelem 1000000 timeout 86400\nservice ipset save\n```\n\nbabe是集合名称。hash是指定格式用的,，更多格式可以通过ipset\n--help查看。hashsize是指初始化条数空间，maxelem是指最大条数空间。timeout指的并不是集合的过期时间，而是新增hash内容的默认过期时间。如果不需要超时，可以吧timeout参数去掉即可。\n\n添加IP到ipset集合里面\n\n```\nipset add babe 1.1.1.1 timeout 3600\n```\n\n我们需要注意点的是，如果创建集合的时候没有使用timeout参数，那么我们添加IP的时候，也不能使用timeout，如下：\n\n```\nipset add babe 1.1.1.1\n```\n\n添加完了，得保存一下，不然重启会丢失\n\n```\nservice ipset save\n```\n\n自动处理添加ipset集合hash内容\n假设有一个文件是/data/some/block.list，里面一行有一个IP，我们需要将这些IP都加入ipset的babe集合里面。\n首先，创建一个叫做block.sh的脚步，它的路径是/data/some/block.sh。脚本内容如下：\n\n```\ngrep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' /data/some/block.list | awk '{print \"ipset add bklist\",$0}'|sh\nservice ipset save\nservice iptables reload\n```\n\n接下来，我们让系统每半小时执行一次上面的脚本。\n\n```\ncrontab -e\n0,30 */1 * * * /data/some/block.sh > /dev/null 2>&1\n```\n\n保存之后即可。\n\n## 配置iptables\n\n将集合作为黑名单\n\n```\niptables -I INPUT -m set --match-set babe src -j DROP\n```\n\n将集合作为白名单\n\n```\niptables -I INPUT -m set ! --match-set babe src -j DROP\n```\n\n执行完了，需要保存并重载防火墙内容。\n\n```\nservice iptables save\nservice iptables reload\n```","slug":"也来说一说ipset拓展iptables","published":1,"updated":"2022-05-12T17:07:02.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aua000slvtd2tmwdch4","content":"<blockquote>\n<p>ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！</p>\n</blockquote>\n<h2 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h2><p>具体的安装方法，网上有很多，也可以参考我自己记录的《<a href=\"/install-iptables-as-firewall-on-centos7\">在centos7上安装iptables作为防火墙</a>》。大家最好字字句句看清楚，有一些注释说明很重要。</p>\n<h2 id=\"安装ipset\"><a href=\"#安装ipset\" class=\"headerlink\" title=\"安装ipset\"></a>安装ipset</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ipset</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/mludvig:/elml/CentOS_CentOS-6/noarch/ipset-init-1.0-10.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh ipset-init-1.0-10.1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>这个软件包叫做ipset-init。之所以要安装这个包，是因为我用的是centos6.5，ipset提供的init.d脚本好像有问题！ipset-init包内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.d/init.d/ipset</span><br><span class=\"line\">/etc/sysconfig/ipset</span><br><span class=\"line\">/etc/sysconfig/ipset-config</span><br></pre></td></tr></table></figure>\n\n<p>使用chkconfig命令添加开机启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add ipset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置ipset\"><a href=\"#配置ipset\" class=\"headerlink\" title=\"配置ipset\"></a>配置ipset</h2><p>接下来的工作主要是创建一个ipset集合，并保存它！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset create babe hash:ip hashsize 1024 maxelem 1000000 timeout 86400</span><br><span class=\"line\">service ipset save</span><br></pre></td></tr></table></figure>\n\n<p>babe是集合名称。hash是指定格式用的,，更多格式可以通过ipset<br>–help查看。hashsize是指初始化条数空间，maxelem是指最大条数空间。timeout指的并不是集合的过期时间，而是新增hash内容的默认过期时间。如果不需要超时，可以吧timeout参数去掉即可。</p>\n<p>添加IP到ipset集合里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset add babe 1.1.1.1 timeout 3600</span><br></pre></td></tr></table></figure>\n\n<p>我们需要注意点的是，如果创建集合的时候没有使用timeout参数，那么我们添加IP的时候，也不能使用timeout，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset add babe 1.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>添加完了，得保存一下，不然重启会丢失</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ipset save</span><br></pre></td></tr></table></figure>\n\n<p>自动处理添加ipset集合hash内容<br>假设有一个文件是&#x2F;data&#x2F;some&#x2F;block.list，里面一行有一个IP，我们需要将这些IP都加入ipset的babe集合里面。<br>首先，创建一个叫做block.sh的脚步，它的路径是&#x2F;data&#x2F;some&#x2F;block.sh。脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o &#x27;[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;&#x27; /data/some/block.list | awk &#x27;&#123;print &quot;ipset add bklist&quot;,$0&#125;&#x27;|sh</span><br><span class=\"line\">service ipset save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们让系统每半小时执行一次上面的脚本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0,30 */1 * * * /data/some/block.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>保存之后即可。</p>\n<h2 id=\"配置iptables\"><a href=\"#配置iptables\" class=\"headerlink\" title=\"配置iptables\"></a>配置iptables</h2><p>将集合作为黑名单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m set --match-set babe src -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>将集合作为白名单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m set ! --match-set babe src -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>执行完了，需要保存并重载防火墙内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1666,"excerpt":"","more":"<blockquote>\n<p>ipset是一个很好的东西，它为大量地封禁IP提供了一个非常好的解决方案。初次使用ipset拓展iptables也遇上了不少问题，几经折腾，也终于得到了完美的解决！</p>\n</blockquote>\n<h2 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h2><p>具体的安装方法，网上有很多，也可以参考我自己记录的《<a href=\"/install-iptables-as-firewall-on-centos7\">在centos7上安装iptables作为防火墙</a>》。大家最好字字句句看清楚，有一些注释说明很重要。</p>\n<h2 id=\"安装ipset\"><a href=\"#安装ipset\" class=\"headerlink\" title=\"安装ipset\"></a>安装ipset</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ipset</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/mludvig:/elml/CentOS_CentOS-6/noarch/ipset-init-1.0-10.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh ipset-init-1.0-10.1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>这个软件包叫做ipset-init。之所以要安装这个包，是因为我用的是centos6.5，ipset提供的init.d脚本好像有问题！ipset-init包内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/rc.d/init.d/ipset</span><br><span class=\"line\">/etc/sysconfig/ipset</span><br><span class=\"line\">/etc/sysconfig/ipset-config</span><br></pre></td></tr></table></figure>\n\n<p>使用chkconfig命令添加开机启动</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add ipset</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置ipset\"><a href=\"#配置ipset\" class=\"headerlink\" title=\"配置ipset\"></a>配置ipset</h2><p>接下来的工作主要是创建一个ipset集合，并保存它！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset create babe hash:ip hashsize 1024 maxelem 1000000 timeout 86400</span><br><span class=\"line\">service ipset save</span><br></pre></td></tr></table></figure>\n\n<p>babe是集合名称。hash是指定格式用的,，更多格式可以通过ipset<br>–help查看。hashsize是指初始化条数空间，maxelem是指最大条数空间。timeout指的并不是集合的过期时间，而是新增hash内容的默认过期时间。如果不需要超时，可以吧timeout参数去掉即可。</p>\n<p>添加IP到ipset集合里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset add babe 1.1.1.1 timeout 3600</span><br></pre></td></tr></table></figure>\n\n<p>我们需要注意点的是，如果创建集合的时候没有使用timeout参数，那么我们添加IP的时候，也不能使用timeout，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset add babe 1.1.1.1</span><br></pre></td></tr></table></figure>\n\n<p>添加完了，得保存一下，不然重启会丢失</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ipset save</span><br></pre></td></tr></table></figure>\n\n<p>自动处理添加ipset集合hash内容<br>假设有一个文件是&#x2F;data&#x2F;some&#x2F;block.list，里面一行有一个IP，我们需要将这些IP都加入ipset的babe集合里面。<br>首先，创建一个叫做block.sh的脚步，它的路径是&#x2F;data&#x2F;some&#x2F;block.sh。脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o &#x27;[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;&#x27; /data/some/block.list | awk &#x27;&#123;print &quot;ipset add bklist&quot;,$0&#125;&#x27;|sh</span><br><span class=\"line\">service ipset save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们让系统每半小时执行一次上面的脚本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br><span class=\"line\">0,30 */1 * * * /data/some/block.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<p>保存之后即可。</p>\n<h2 id=\"配置iptables\"><a href=\"#配置iptables\" class=\"headerlink\" title=\"配置iptables\"></a>配置iptables</h2><p>将集合作为黑名单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m set --match-set babe src -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>将集合作为白名单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m set ! --match-set babe src -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>执行完了，需要保存并重载防火墙内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>"},{"title":"也来说说ssh免密码登录Linux","date":"2018-02-04T23:26:00.000Z","url":"logining-ssh-without-password-on-linux","description":"ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。","_content":"\n> ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。\n\n## 在哪里生成密钥\n\n到底生成密钥文件是应该本地电脑呢，还是远程的服务器？相信有人这样就纠结过。其实，那不过是个障眼法，生成密钥文件却不一定需要在远程服务器上面，本地也是可以的。最主要的是要看到实质：公钥一定要放到服务器上面，而私钥一定要放到客户端上。而私钥更是要紧，所以一定要保护好！要紧的是，有些支持密钥登录的客户端支持的格式不一样，需要转换！\n\n## .ssh目录以及密钥文件权限\n\n搞密钥登录，最好将.ssh文件设置成700权限，而authorized_keys一定要设置成600权限的。除了基于最基本的安全去考量，有些程序或者是系统组件会要求用户严格.ssh目录以及密钥文件权限。而私钥文件id_rsa不建议保留在远程服务器。也就是说，如果你的密钥是远程服务器生成的，那么请务必保证私钥文件下载到本地后，删除掉远程服务器的私钥！私钥相当于钥匙，要紧要紧！\n\n## 多个客户端密钥登录\n\n这个倒也不难，一种办法是客户端用一样的私钥就好。就像钥匙，多复制几把就好！第二是，将不同客户端的不同密钥文件对里面的公钥里面的内容都追加到要登录的帐号对应下面的.ssh文件夹里面的authorized_keys文件里面。每个公钥就像每一扇门上面的一把锁，开了任意一把，那对应的门就开了，就可以进去了！\n\n## 小结\n\n网络的发达注定了服务器更多地暴露在公共网络环境。所以，能多安全就要多安全！开启密钥文件登录后，建议关闭密码验证！假如真的必须用密码登录，那最好《启用[Google Authenticator两步验证登录Linux SSH](/login-ssh-with-2fa-authentication-by-google-authencator)》。修改了SSH的端口，安装上denyhosts等类似软件！","source":"_posts/也来说说ssh免密码登录Linux.md","raw":"---\ntitle: 也来说说ssh免密码登录Linux\ndate: 2018-02-05 07:26:00\ntags: \n  - ssh\ncategories:\n  - 技术\nurl: logining-ssh-without-password-on-linux\ndescription: ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。\n---\n\n> ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。\n\n## 在哪里生成密钥\n\n到底生成密钥文件是应该本地电脑呢，还是远程的服务器？相信有人这样就纠结过。其实，那不过是个障眼法，生成密钥文件却不一定需要在远程服务器上面，本地也是可以的。最主要的是要看到实质：公钥一定要放到服务器上面，而私钥一定要放到客户端上。而私钥更是要紧，所以一定要保护好！要紧的是，有些支持密钥登录的客户端支持的格式不一样，需要转换！\n\n## .ssh目录以及密钥文件权限\n\n搞密钥登录，最好将.ssh文件设置成700权限，而authorized_keys一定要设置成600权限的。除了基于最基本的安全去考量，有些程序或者是系统组件会要求用户严格.ssh目录以及密钥文件权限。而私钥文件id_rsa不建议保留在远程服务器。也就是说，如果你的密钥是远程服务器生成的，那么请务必保证私钥文件下载到本地后，删除掉远程服务器的私钥！私钥相当于钥匙，要紧要紧！\n\n## 多个客户端密钥登录\n\n这个倒也不难，一种办法是客户端用一样的私钥就好。就像钥匙，多复制几把就好！第二是，将不同客户端的不同密钥文件对里面的公钥里面的内容都追加到要登录的帐号对应下面的.ssh文件夹里面的authorized_keys文件里面。每个公钥就像每一扇门上面的一把锁，开了任意一把，那对应的门就开了，就可以进去了！\n\n## 小结\n\n网络的发达注定了服务器更多地暴露在公共网络环境。所以，能多安全就要多安全！开启密钥文件登录后，建议关闭密码验证！假如真的必须用密码登录，那最好《启用[Google Authenticator两步验证登录Linux SSH](/login-ssh-with-2fa-authentication-by-google-authencator)》。修改了SSH的端口，安装上denyhosts等类似软件！","slug":"也来说说ssh免密码登录Linux","published":1,"updated":"2022-05-12T17:06:53.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6auc000ulvtde4mmh7h4","content":"<blockquote>\n<p>ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。</p>\n</blockquote>\n<h2 id=\"在哪里生成密钥\"><a href=\"#在哪里生成密钥\" class=\"headerlink\" title=\"在哪里生成密钥\"></a>在哪里生成密钥</h2><p>到底生成密钥文件是应该本地电脑呢，还是远程的服务器？相信有人这样就纠结过。其实，那不过是个障眼法，生成密钥文件却不一定需要在远程服务器上面，本地也是可以的。最主要的是要看到实质：公钥一定要放到服务器上面，而私钥一定要放到客户端上。而私钥更是要紧，所以一定要保护好！要紧的是，有些支持密钥登录的客户端支持的格式不一样，需要转换！</p>\n<h2 id=\"ssh目录以及密钥文件权限\"><a href=\"#ssh目录以及密钥文件权限\" class=\"headerlink\" title=\".ssh目录以及密钥文件权限\"></a>.ssh目录以及密钥文件权限</h2><p>搞密钥登录，最好将.ssh文件设置成700权限，而authorized_keys一定要设置成600权限的。除了基于最基本的安全去考量，有些程序或者是系统组件会要求用户严格.ssh目录以及密钥文件权限。而私钥文件id_rsa不建议保留在远程服务器。也就是说，如果你的密钥是远程服务器生成的，那么请务必保证私钥文件下载到本地后，删除掉远程服务器的私钥！私钥相当于钥匙，要紧要紧！</p>\n<h2 id=\"多个客户端密钥登录\"><a href=\"#多个客户端密钥登录\" class=\"headerlink\" title=\"多个客户端密钥登录\"></a>多个客户端密钥登录</h2><p>这个倒也不难，一种办法是客户端用一样的私钥就好。就像钥匙，多复制几把就好！第二是，将不同客户端的不同密钥文件对里面的公钥里面的内容都追加到要登录的帐号对应下面的.ssh文件夹里面的authorized_keys文件里面。每个公钥就像每一扇门上面的一把锁，开了任意一把，那对应的门就开了，就可以进去了！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>网络的发达注定了服务器更多地暴露在公共网络环境。所以，能多安全就要多安全！开启密钥文件登录后，建议关闭密码验证！假如真的必须用密码登录，那最好《启用<a href=\"/login-ssh-with-2fa-authentication-by-google-authencator\">Google Authenticator两步验证登录Linux SSH</a>》。修改了SSH的端口，安装上denyhosts等类似软件！</p>\n","site":{"data":{}},"length":753,"excerpt":"","more":"<blockquote>\n<p>ssh免密码登录Linux是一个老话题了，但同时也是很多新手疑惑的地方。之所以在这里再提起，主要是想说一些更细致的地方。想当初，我刚搞这个东西的时候也是费了不少时间呢。</p>\n</blockquote>\n<h2 id=\"在哪里生成密钥\"><a href=\"#在哪里生成密钥\" class=\"headerlink\" title=\"在哪里生成密钥\"></a>在哪里生成密钥</h2><p>到底生成密钥文件是应该本地电脑呢，还是远程的服务器？相信有人这样就纠结过。其实，那不过是个障眼法，生成密钥文件却不一定需要在远程服务器上面，本地也是可以的。最主要的是要看到实质：公钥一定要放到服务器上面，而私钥一定要放到客户端上。而私钥更是要紧，所以一定要保护好！要紧的是，有些支持密钥登录的客户端支持的格式不一样，需要转换！</p>\n<h2 id=\"ssh目录以及密钥文件权限\"><a href=\"#ssh目录以及密钥文件权限\" class=\"headerlink\" title=\".ssh目录以及密钥文件权限\"></a>.ssh目录以及密钥文件权限</h2><p>搞密钥登录，最好将.ssh文件设置成700权限，而authorized_keys一定要设置成600权限的。除了基于最基本的安全去考量，有些程序或者是系统组件会要求用户严格.ssh目录以及密钥文件权限。而私钥文件id_rsa不建议保留在远程服务器。也就是说，如果你的密钥是远程服务器生成的，那么请务必保证私钥文件下载到本地后，删除掉远程服务器的私钥！私钥相当于钥匙，要紧要紧！</p>\n<h2 id=\"多个客户端密钥登录\"><a href=\"#多个客户端密钥登录\" class=\"headerlink\" title=\"多个客户端密钥登录\"></a>多个客户端密钥登录</h2><p>这个倒也不难，一种办法是客户端用一样的私钥就好。就像钥匙，多复制几把就好！第二是，将不同客户端的不同密钥文件对里面的公钥里面的内容都追加到要登录的帐号对应下面的.ssh文件夹里面的authorized_keys文件里面。每个公钥就像每一扇门上面的一把锁，开了任意一把，那对应的门就开了，就可以进去了！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>网络的发达注定了服务器更多地暴露在公共网络环境。所以，能多安全就要多安全！开启密钥文件登录后，建议关闭密码验证！假如真的必须用密码登录，那最好《启用<a href=\"/login-ssh-with-2fa-authentication-by-google-authencator\">Google Authenticator两步验证登录Linux SSH</a>》。修改了SSH的端口，安装上denyhosts等类似软件！</p>\n"},{"title":"利用inotify+rsync实时同步数据到远程服务器","date":"2018-10-29T08:48:47.000Z","url":"sync-data-realtime-with-inotify-rsync","description":"数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！","_content":"\n> 数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！\n\n被备份的服务器简称备A，IP是192.168.1.1；\n备份数据存放的服务器简称远B，IP是192.168.1.2\n两个服务器的系统均为Centos 7.3 64bit\n\n## 安装rsync\n\n```\nrpm -qa|grep rsync #检查是否安装过rsync，whereis rsync也可以\nyum install rsync -y #如果未安装，使用yum安装rsync\n```\n\n\n备A和远B都必须安装rsync，而且版本最好一样！！Centos一般都默认自带rsync，可利用rsync --version或者rsync -h查看版本。\n\n## 在备A上安装inotify\n\n```\nwget http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz  \ntar zxvf inotify-tools-3.14.tar.gz  \ncd inotify-tools-3.14  \n./configure --prefix=/usr/local/inotify  \nmake  \nmake install\n```\n\n\n## 配置备A的rsync\n\n```\nmkdir -p /usr/local/rsync\ntouch /usr/local/rsync/exclude.list\necho 'testpassword' >/usr/local/rsync/rsync.passwd\nchmod 600 /usr/local/rsync/rsync.passwd\n```\n\n\nexclude.list是用来排除文件和目录，先暂时留空；rsync.passwd是密码文件，只存放密码。密码文件必须给读写权限，否则会报错\n\n## 配置远B的rsync\n\n```\nmkdir -p /usr/local/rsync\necho 'user:testpassword' >/usr/local/rsync/rsync.passwd\nchmod 600 /usr/local/rsync/rsync.passwd\ntouch /usr/local/rsync/rsync.conf\n```\n\nrsync.passwd是用来存放用户名和密码的，user和testpassword分别是用户名和密码，testpassword必须和备A的rsync.passwd里面的密码一样！！rsync.conf是配置文件，内容设置如下：\n\n```\npid file = /var/run/rsyncd.pid  \nlock file = /var/run/rsync.lock  \nlog file = /var/log/rsyncd.log \nport = 873\naddress = 192.168.1.2\nsecrets file=/usr/local/rsync/rsync.passwd\nuid = root\ngid = root\nuse chroot = yes\nread only = no\nwrite only = no\n#允许访问rsyncd服务的ip，ip端或者单独ip之间使用空格隔开\nhosts allow = 192.168.1.1\n#不允许访问rsyncd服务的ip，*是全部(不涵盖在hosts allow中声明的ip，注意和hosts allow的先后顺序)\nhosts deny = *\n#客户端最大连接数\nmax connections = 5\n#日志相关\n#    log file 指定rsync发送消息日志文件，而不是发送给syslog，如果不填这个参数默认发送给syslog\n#    transfer logging 是否记录传输文件日志\n#    log format 日志文件格式，格式参数请google\n#    syslog facility rsync发送消息给syslog时的消息级别，\n#    timeout连接超时时间\nlog file = /usr/local/logs/rsync.log\ntransfer logging = yes\nlog format = %t %a %m %f %b\nsyslog facility = local3\ntimeout = 300\n[leo]\n#模块根目录，必须指定 用于存放备份数据，可以任意指定，文件夹是在远B服务器上\npath=/data/leo/\n#是否允许列出模块里的内容\nlist=yes\n#忽略错误\nignore errors\n#模块验证用户名称，可使用空格或者逗号隔开多个用户名\nauth users = user\n#注释\ncomment = some description about this moudle\n#排除目录，多个之间使用空格隔开 一般只要在备A配置排除就好\n#exclude = test1/ test2/\n```\n\n\n配置还可以稍微修改并简化一点\n\n```\nuid = root \ngid = root \nuse chroot = no \nmax connections = 10 \nstrict modes = yes \npid file = /var/run/rsyncd.pid  \nlock file = /var/run/rsync.lock  \nlog file = /var/log/rsyncd.log  \n[leo]  \npath = /data/leo/  \ncomment = backup wwwroot  \nignore errors  \nread only = no \nwrite only = no \nhosts allow = 192.168.1.1  \nhosts deny = *  \nlist = false \nuid = root \ngid = root \nauth users = user\nsecrets file = /usr/local/rsync/rsync.passwd\n```\n\n## 启动远B的rsync\n\n```\n/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf\n```\n\n\n为了方便，可以让远B的rsync随机启动，我们需要将启动命令加入/etc/rc.local文件\n\n```\necho '/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf' >> /etc/rc.local\nchmod +x /etc/rc.local\n```\n\n启动脚本如果没有执行权限，那么随机启动会失败，所以运行了chmod +x /etc/rc.local。启动后，可以通过netstat -an | grep 873 检验是否已经启动rsync\n\n## 开放远B的rsync端口\n\n```\niptables -I INPUT 3 -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT\nservice iptables save\nservice iptables reload\n```\n\n\n## 在备A创建备份脚本\n\n假设，我们需要备份的是/data/leo文件夹，我们需要排除/data/leo/root文件夹和/data/leo/sh.sh文件\n我们在/data/leo创建rsync.sh，并填充如下内容：\n\n```\n#!/bin/bash\nhost=192.168.1.2\nsrc=/data/leo/\ndes=leo\nuser=user\n/usr/local/inotify/bin/inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %w%f%e' -e modify,delete,create,attrib $src | while read files\ndo\n/usr/bin/rsync -vzrtopg --delete --progress --exclude-from=/usr/local/rsync/exclude.list --password-file=/usr/local/rsync/rsync.passwd $src $user@$host::$des\necho \"${files} was rsynced\" >>/data/wwwlogs/rsync.log 2>&1\ndone\n```\n\nhost是远B的IP；src是备A服务器上的备份源文件夹；des是远B配置文件/usr/local/rsync/rsync.conf里面的[leo]的leo，也就是说这个模块名称由远B的配置文件决定。如果备A删除文件，而要求远B保留被删除文件，则将--delete参数去除\n\n排除/data/leo/root文件夹和/data/leo/sh.sh\n\n```\necho 'root/' >> /usr/local/rsync/exclude.list\necho 'sh.sh' >>/usr/local/rsync/exclude.list\n```\n\n一行一个排除规则，只能用相对路径\n\n## 开机启动备A的启动脚本\n\n```\necho 'bash /data/leo/rsync.sh &' >> /etc/rc.local\nchmod +x /etc/rc.local\nchmod 744 /data/leo/rsync.sh\n```\n\n\n## 一些错误\n\n1.rsync: failed to connect to X.X.X.X: No route to host\n远B没有开放873端口的原因，备A无法访问远B\n\n2.rsync failed Connection refused 111\n远B的rsync没有启动，启动即可","source":"_posts/利用inotify+rsync实时同步数据到远程服务器.md","raw":"---\ntitle: 利用inotify+rsync实时同步数据到远程服务器\ndate: 2018-10-29 16:48:47\ntags: \n  - inotify\n  - rsync\n  - 实时同步\ncategories:\n  - 技术\nurl: sync-data-realtime-with-inotify-rsync\ndescription: 数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！\n---\n\n> 数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！\n\n被备份的服务器简称备A，IP是192.168.1.1；\n备份数据存放的服务器简称远B，IP是192.168.1.2\n两个服务器的系统均为Centos 7.3 64bit\n\n## 安装rsync\n\n```\nrpm -qa|grep rsync #检查是否安装过rsync，whereis rsync也可以\nyum install rsync -y #如果未安装，使用yum安装rsync\n```\n\n\n备A和远B都必须安装rsync，而且版本最好一样！！Centos一般都默认自带rsync，可利用rsync --version或者rsync -h查看版本。\n\n## 在备A上安装inotify\n\n```\nwget http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz  \ntar zxvf inotify-tools-3.14.tar.gz  \ncd inotify-tools-3.14  \n./configure --prefix=/usr/local/inotify  \nmake  \nmake install\n```\n\n\n## 配置备A的rsync\n\n```\nmkdir -p /usr/local/rsync\ntouch /usr/local/rsync/exclude.list\necho 'testpassword' >/usr/local/rsync/rsync.passwd\nchmod 600 /usr/local/rsync/rsync.passwd\n```\n\n\nexclude.list是用来排除文件和目录，先暂时留空；rsync.passwd是密码文件，只存放密码。密码文件必须给读写权限，否则会报错\n\n## 配置远B的rsync\n\n```\nmkdir -p /usr/local/rsync\necho 'user:testpassword' >/usr/local/rsync/rsync.passwd\nchmod 600 /usr/local/rsync/rsync.passwd\ntouch /usr/local/rsync/rsync.conf\n```\n\nrsync.passwd是用来存放用户名和密码的，user和testpassword分别是用户名和密码，testpassword必须和备A的rsync.passwd里面的密码一样！！rsync.conf是配置文件，内容设置如下：\n\n```\npid file = /var/run/rsyncd.pid  \nlock file = /var/run/rsync.lock  \nlog file = /var/log/rsyncd.log \nport = 873\naddress = 192.168.1.2\nsecrets file=/usr/local/rsync/rsync.passwd\nuid = root\ngid = root\nuse chroot = yes\nread only = no\nwrite only = no\n#允许访问rsyncd服务的ip，ip端或者单独ip之间使用空格隔开\nhosts allow = 192.168.1.1\n#不允许访问rsyncd服务的ip，*是全部(不涵盖在hosts allow中声明的ip，注意和hosts allow的先后顺序)\nhosts deny = *\n#客户端最大连接数\nmax connections = 5\n#日志相关\n#    log file 指定rsync发送消息日志文件，而不是发送给syslog，如果不填这个参数默认发送给syslog\n#    transfer logging 是否记录传输文件日志\n#    log format 日志文件格式，格式参数请google\n#    syslog facility rsync发送消息给syslog时的消息级别，\n#    timeout连接超时时间\nlog file = /usr/local/logs/rsync.log\ntransfer logging = yes\nlog format = %t %a %m %f %b\nsyslog facility = local3\ntimeout = 300\n[leo]\n#模块根目录，必须指定 用于存放备份数据，可以任意指定，文件夹是在远B服务器上\npath=/data/leo/\n#是否允许列出模块里的内容\nlist=yes\n#忽略错误\nignore errors\n#模块验证用户名称，可使用空格或者逗号隔开多个用户名\nauth users = user\n#注释\ncomment = some description about this moudle\n#排除目录，多个之间使用空格隔开 一般只要在备A配置排除就好\n#exclude = test1/ test2/\n```\n\n\n配置还可以稍微修改并简化一点\n\n```\nuid = root \ngid = root \nuse chroot = no \nmax connections = 10 \nstrict modes = yes \npid file = /var/run/rsyncd.pid  \nlock file = /var/run/rsync.lock  \nlog file = /var/log/rsyncd.log  \n[leo]  \npath = /data/leo/  \ncomment = backup wwwroot  \nignore errors  \nread only = no \nwrite only = no \nhosts allow = 192.168.1.1  \nhosts deny = *  \nlist = false \nuid = root \ngid = root \nauth users = user\nsecrets file = /usr/local/rsync/rsync.passwd\n```\n\n## 启动远B的rsync\n\n```\n/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf\n```\n\n\n为了方便，可以让远B的rsync随机启动，我们需要将启动命令加入/etc/rc.local文件\n\n```\necho '/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf' >> /etc/rc.local\nchmod +x /etc/rc.local\n```\n\n启动脚本如果没有执行权限，那么随机启动会失败，所以运行了chmod +x /etc/rc.local。启动后，可以通过netstat -an | grep 873 检验是否已经启动rsync\n\n## 开放远B的rsync端口\n\n```\niptables -I INPUT 3 -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT\nservice iptables save\nservice iptables reload\n```\n\n\n## 在备A创建备份脚本\n\n假设，我们需要备份的是/data/leo文件夹，我们需要排除/data/leo/root文件夹和/data/leo/sh.sh文件\n我们在/data/leo创建rsync.sh，并填充如下内容：\n\n```\n#!/bin/bash\nhost=192.168.1.2\nsrc=/data/leo/\ndes=leo\nuser=user\n/usr/local/inotify/bin/inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %w%f%e' -e modify,delete,create,attrib $src | while read files\ndo\n/usr/bin/rsync -vzrtopg --delete --progress --exclude-from=/usr/local/rsync/exclude.list --password-file=/usr/local/rsync/rsync.passwd $src $user@$host::$des\necho \"${files} was rsynced\" >>/data/wwwlogs/rsync.log 2>&1\ndone\n```\n\nhost是远B的IP；src是备A服务器上的备份源文件夹；des是远B配置文件/usr/local/rsync/rsync.conf里面的[leo]的leo，也就是说这个模块名称由远B的配置文件决定。如果备A删除文件，而要求远B保留被删除文件，则将--delete参数去除\n\n排除/data/leo/root文件夹和/data/leo/sh.sh\n\n```\necho 'root/' >> /usr/local/rsync/exclude.list\necho 'sh.sh' >>/usr/local/rsync/exclude.list\n```\n\n一行一个排除规则，只能用相对路径\n\n## 开机启动备A的启动脚本\n\n```\necho 'bash /data/leo/rsync.sh &' >> /etc/rc.local\nchmod +x /etc/rc.local\nchmod 744 /data/leo/rsync.sh\n```\n\n\n## 一些错误\n\n1.rsync: failed to connect to X.X.X.X: No route to host\n远B没有开放873端口的原因，备A无法访问远B\n\n2.rsync failed Connection refused 111\n远B的rsync没有启动，启动即可","slug":"利用inotify+rsync实时同步数据到远程服务器","published":1,"updated":"2022-05-12T17:05:41.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6auc000wlvtd2b37b5m1","content":"<blockquote>\n<p>数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！</p>\n</blockquote>\n<p>被备份的服务器简称备A，IP是192.168.1.1；<br>备份数据存放的服务器简称远B，IP是192.168.1.2<br>两个服务器的系统均为Centos 7.3 64bit</p>\n<h2 id=\"安装rsync\"><a href=\"#安装rsync\" class=\"headerlink\" title=\"安装rsync\"></a>安装rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep rsync #检查是否安装过rsync，whereis rsync也可以</span><br><span class=\"line\">yum install rsync -y #如果未安装，使用yum安装rsync</span><br></pre></td></tr></table></figure>\n\n\n<p>备A和远B都必须安装rsync，而且版本最好一样！！Centos一般都默认自带rsync，可利用rsync –version或者rsync -h查看版本。</p>\n<h2 id=\"在备A上安装inotify\"><a href=\"#在备A上安装inotify\" class=\"headerlink\" title=\"在备A上安装inotify\"></a>在备A上安装inotify</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz  </span><br><span class=\"line\">tar zxvf inotify-tools-3.14.tar.gz  </span><br><span class=\"line\">cd inotify-tools-3.14  </span><br><span class=\"line\">./configure --prefix=/usr/local/inotify  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置备A的rsync\"><a href=\"#配置备A的rsync\" class=\"headerlink\" title=\"配置备A的rsync\"></a>配置备A的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/rsync</span><br><span class=\"line\">touch /usr/local/rsync/exclude.list</span><br><span class=\"line\">echo &#x27;testpassword&#x27; &gt;/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">chmod 600 /usr/local/rsync/rsync.passwd</span><br></pre></td></tr></table></figure>\n\n\n<p>exclude.list是用来排除文件和目录，先暂时留空；rsync.passwd是密码文件，只存放密码。密码文件必须给读写权限，否则会报错</p>\n<h2 id=\"配置远B的rsync\"><a href=\"#配置远B的rsync\" class=\"headerlink\" title=\"配置远B的rsync\"></a>配置远B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/rsync</span><br><span class=\"line\">echo &#x27;user:testpassword&#x27; &gt;/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">chmod 600 /usr/local/rsync/rsync.passwd</span><br><span class=\"line\">touch /usr/local/rsync/rsync.conf</span><br></pre></td></tr></table></figure>\n\n<p>rsync.passwd是用来存放用户名和密码的，user和testpassword分别是用户名和密码，testpassword必须和备A的rsync.passwd里面的密码一样！！rsync.conf是配置文件，内容设置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid file = /var/run/rsyncd.pid  </span><br><span class=\"line\">lock file = /var/run/rsync.lock  </span><br><span class=\"line\">log file = /var/log/rsyncd.log </span><br><span class=\"line\">port = 873</span><br><span class=\"line\">address = 192.168.1.2</span><br><span class=\"line\">secrets file=/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\">use chroot = yes</span><br><span class=\"line\">read only = no</span><br><span class=\"line\">write only = no</span><br><span class=\"line\">#允许访问rsyncd服务的ip，ip端或者单独ip之间使用空格隔开</span><br><span class=\"line\">hosts allow = 192.168.1.1</span><br><span class=\"line\">#不允许访问rsyncd服务的ip，*是全部(不涵盖在hosts allow中声明的ip，注意和hosts allow的先后顺序)</span><br><span class=\"line\">hosts deny = *</span><br><span class=\"line\">#客户端最大连接数</span><br><span class=\"line\">max connections = 5</span><br><span class=\"line\">#日志相关</span><br><span class=\"line\">#    log file 指定rsync发送消息日志文件，而不是发送给syslog，如果不填这个参数默认发送给syslog</span><br><span class=\"line\">#    transfer logging 是否记录传输文件日志</span><br><span class=\"line\">#    log format 日志文件格式，格式参数请google</span><br><span class=\"line\">#    syslog facility rsync发送消息给syslog时的消息级别，</span><br><span class=\"line\">#    timeout连接超时时间</span><br><span class=\"line\">log file = /usr/local/logs/rsync.log</span><br><span class=\"line\">transfer logging = yes</span><br><span class=\"line\">log format = %t %a %m %f %b</span><br><span class=\"line\">syslog facility = local3</span><br><span class=\"line\">timeout = 300</span><br><span class=\"line\">[leo]</span><br><span class=\"line\">#模块根目录，必须指定 用于存放备份数据，可以任意指定，文件夹是在远B服务器上</span><br><span class=\"line\">path=/data/leo/</span><br><span class=\"line\">#是否允许列出模块里的内容</span><br><span class=\"line\">list=yes</span><br><span class=\"line\">#忽略错误</span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">#模块验证用户名称，可使用空格或者逗号隔开多个用户名</span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">#注释</span><br><span class=\"line\">comment = some description about this moudle</span><br><span class=\"line\">#排除目录，多个之间使用空格隔开 一般只要在备A配置排除就好</span><br><span class=\"line\">#exclude = test1/ test2/</span><br></pre></td></tr></table></figure>\n\n\n<p>配置还可以稍微修改并简化一点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid = root </span><br><span class=\"line\">gid = root </span><br><span class=\"line\">use chroot = no </span><br><span class=\"line\">max connections = 10 </span><br><span class=\"line\">strict modes = yes </span><br><span class=\"line\">pid file = /var/run/rsyncd.pid  </span><br><span class=\"line\">lock file = /var/run/rsync.lock  </span><br><span class=\"line\">log file = /var/log/rsyncd.log  </span><br><span class=\"line\">[leo]  </span><br><span class=\"line\">path = /data/leo/  </span><br><span class=\"line\">comment = backup wwwroot  </span><br><span class=\"line\">ignore errors  </span><br><span class=\"line\">read only = no </span><br><span class=\"line\">write only = no </span><br><span class=\"line\">hosts allow = 192.168.1.1  </span><br><span class=\"line\">hosts deny = *  </span><br><span class=\"line\">list = false </span><br><span class=\"line\">uid = root </span><br><span class=\"line\">gid = root </span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">secrets file = /usr/local/rsync/rsync.passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动远B的rsync\"><a href=\"#启动远B的rsync\" class=\"headerlink\" title=\"启动远B的rsync\"></a>启动远B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf</span><br></pre></td></tr></table></figure>\n\n\n<p>为了方便，可以让远B的rsync随机启动，我们需要将启动命令加入&#x2F;etc&#x2F;rc.local文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf&#x27; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>启动脚本如果没有执行权限，那么随机启动会失败，所以运行了chmod +x &#x2F;etc&#x2F;rc.local。启动后，可以通过netstat -an | grep 873 检验是否已经启动rsync</p>\n<h2 id=\"开放远B的rsync端口\"><a href=\"#开放远B的rsync端口\" class=\"headerlink\" title=\"开放远B的rsync端口\"></a>开放远B的rsync端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT 3 -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT</span><br><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"在备A创建备份脚本\"><a href=\"#在备A创建备份脚本\" class=\"headerlink\" title=\"在备A创建备份脚本\"></a>在备A创建备份脚本</h2><p>假设，我们需要备份的是&#x2F;data&#x2F;leo文件夹，我们需要排除&#x2F;data&#x2F;leo&#x2F;root文件夹和&#x2F;data&#x2F;leo&#x2F;sh.sh文件<br>我们在&#x2F;data&#x2F;leo创建rsync.sh，并填充如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">host=192.168.1.2</span><br><span class=\"line\">src=/data/leo/</span><br><span class=\"line\">des=leo</span><br><span class=\"line\">user=user</span><br><span class=\"line\">/usr/local/inotify/bin/inotifywait -mrq --timefmt &#x27;%d/%m/%y %H:%M&#x27; --format &#x27;%T %w%f%e&#x27; -e modify,delete,create,attrib $src | while read files</span><br><span class=\"line\">do</span><br><span class=\"line\">/usr/bin/rsync -vzrtopg --delete --progress --exclude-from=/usr/local/rsync/exclude.list --password-file=/usr/local/rsync/rsync.passwd $src $user@$host::$des</span><br><span class=\"line\">echo &quot;$&#123;files&#125; was rsynced&quot; &gt;&gt;/data/wwwlogs/rsync.log 2&gt;&amp;1</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>host是远B的IP；src是备A服务器上的备份源文件夹；des是远B配置文件&#x2F;usr&#x2F;local&#x2F;rsync&#x2F;rsync.conf里面的[leo]的leo，也就是说这个模块名称由远B的配置文件决定。如果备A删除文件，而要求远B保留被删除文件，则将–delete参数去除</p>\n<p>排除&#x2F;data&#x2F;leo&#x2F;root文件夹和&#x2F;data&#x2F;leo&#x2F;sh.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;root/&#x27; &gt;&gt; /usr/local/rsync/exclude.list</span><br><span class=\"line\">echo &#x27;sh.sh&#x27; &gt;&gt;/usr/local/rsync/exclude.list</span><br></pre></td></tr></table></figure>\n\n<p>一行一个排除规则，只能用相对路径</p>\n<h2 id=\"开机启动备A的启动脚本\"><a href=\"#开机启动备A的启动脚本\" class=\"headerlink\" title=\"开机启动备A的启动脚本\"></a>开机启动备A的启动脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;bash /data/leo/rsync.sh &amp;&#x27; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">chmod +x /etc/rc.local</span><br><span class=\"line\">chmod 744 /data/leo/rsync.sh</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"一些错误\"><a href=\"#一些错误\" class=\"headerlink\" title=\"一些错误\"></a>一些错误</h2><p>1.rsync: failed to connect to X.X.X.X: No route to host<br>远B没有开放873端口的原因，备A无法访问远B</p>\n<p>2.rsync failed Connection refused 111<br>远B的rsync没有启动，启动即可</p>\n","site":{"data":{}},"length":4046,"excerpt":"","more":"<blockquote>\n<p>数据的价值和重要性历来都很重要。大数据时代，更是如此。而备份数据是最常用也是最有效的保护数据的方式。而我利用inotify+rsync达到了实时同步数据从而备份数据的目的！！</p>\n</blockquote>\n<p>被备份的服务器简称备A，IP是192.168.1.1；<br>备份数据存放的服务器简称远B，IP是192.168.1.2<br>两个服务器的系统均为Centos 7.3 64bit</p>\n<h2 id=\"安装rsync\"><a href=\"#安装rsync\" class=\"headerlink\" title=\"安装rsync\"></a>安装rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep rsync #检查是否安装过rsync，whereis rsync也可以</span><br><span class=\"line\">yum install rsync -y #如果未安装，使用yum安装rsync</span><br></pre></td></tr></table></figure>\n\n\n<p>备A和远B都必须安装rsync，而且版本最好一样！！Centos一般都默认自带rsync，可利用rsync –version或者rsync -h查看版本。</p>\n<h2 id=\"在备A上安装inotify\"><a href=\"#在备A上安装inotify\" class=\"headerlink\" title=\"在备A上安装inotify\"></a>在备A上安装inotify</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz  </span><br><span class=\"line\">tar zxvf inotify-tools-3.14.tar.gz  </span><br><span class=\"line\">cd inotify-tools-3.14  </span><br><span class=\"line\">./configure --prefix=/usr/local/inotify  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"配置备A的rsync\"><a href=\"#配置备A的rsync\" class=\"headerlink\" title=\"配置备A的rsync\"></a>配置备A的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/rsync</span><br><span class=\"line\">touch /usr/local/rsync/exclude.list</span><br><span class=\"line\">echo &#x27;testpassword&#x27; &gt;/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">chmod 600 /usr/local/rsync/rsync.passwd</span><br></pre></td></tr></table></figure>\n\n\n<p>exclude.list是用来排除文件和目录，先暂时留空；rsync.passwd是密码文件，只存放密码。密码文件必须给读写权限，否则会报错</p>\n<h2 id=\"配置远B的rsync\"><a href=\"#配置远B的rsync\" class=\"headerlink\" title=\"配置远B的rsync\"></a>配置远B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/rsync</span><br><span class=\"line\">echo &#x27;user:testpassword&#x27; &gt;/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">chmod 600 /usr/local/rsync/rsync.passwd</span><br><span class=\"line\">touch /usr/local/rsync/rsync.conf</span><br></pre></td></tr></table></figure>\n\n<p>rsync.passwd是用来存放用户名和密码的，user和testpassword分别是用户名和密码，testpassword必须和备A的rsync.passwd里面的密码一样！！rsync.conf是配置文件，内容设置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid file = /var/run/rsyncd.pid  </span><br><span class=\"line\">lock file = /var/run/rsync.lock  </span><br><span class=\"line\">log file = /var/log/rsyncd.log </span><br><span class=\"line\">port = 873</span><br><span class=\"line\">address = 192.168.1.2</span><br><span class=\"line\">secrets file=/usr/local/rsync/rsync.passwd</span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\">use chroot = yes</span><br><span class=\"line\">read only = no</span><br><span class=\"line\">write only = no</span><br><span class=\"line\">#允许访问rsyncd服务的ip，ip端或者单独ip之间使用空格隔开</span><br><span class=\"line\">hosts allow = 192.168.1.1</span><br><span class=\"line\">#不允许访问rsyncd服务的ip，*是全部(不涵盖在hosts allow中声明的ip，注意和hosts allow的先后顺序)</span><br><span class=\"line\">hosts deny = *</span><br><span class=\"line\">#客户端最大连接数</span><br><span class=\"line\">max connections = 5</span><br><span class=\"line\">#日志相关</span><br><span class=\"line\">#    log file 指定rsync发送消息日志文件，而不是发送给syslog，如果不填这个参数默认发送给syslog</span><br><span class=\"line\">#    transfer logging 是否记录传输文件日志</span><br><span class=\"line\">#    log format 日志文件格式，格式参数请google</span><br><span class=\"line\">#    syslog facility rsync发送消息给syslog时的消息级别，</span><br><span class=\"line\">#    timeout连接超时时间</span><br><span class=\"line\">log file = /usr/local/logs/rsync.log</span><br><span class=\"line\">transfer logging = yes</span><br><span class=\"line\">log format = %t %a %m %f %b</span><br><span class=\"line\">syslog facility = local3</span><br><span class=\"line\">timeout = 300</span><br><span class=\"line\">[leo]</span><br><span class=\"line\">#模块根目录，必须指定 用于存放备份数据，可以任意指定，文件夹是在远B服务器上</span><br><span class=\"line\">path=/data/leo/</span><br><span class=\"line\">#是否允许列出模块里的内容</span><br><span class=\"line\">list=yes</span><br><span class=\"line\">#忽略错误</span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">#模块验证用户名称，可使用空格或者逗号隔开多个用户名</span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">#注释</span><br><span class=\"line\">comment = some description about this moudle</span><br><span class=\"line\">#排除目录，多个之间使用空格隔开 一般只要在备A配置排除就好</span><br><span class=\"line\">#exclude = test1/ test2/</span><br></pre></td></tr></table></figure>\n\n\n<p>配置还可以稍微修改并简化一点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uid = root </span><br><span class=\"line\">gid = root </span><br><span class=\"line\">use chroot = no </span><br><span class=\"line\">max connections = 10 </span><br><span class=\"line\">strict modes = yes </span><br><span class=\"line\">pid file = /var/run/rsyncd.pid  </span><br><span class=\"line\">lock file = /var/run/rsync.lock  </span><br><span class=\"line\">log file = /var/log/rsyncd.log  </span><br><span class=\"line\">[leo]  </span><br><span class=\"line\">path = /data/leo/  </span><br><span class=\"line\">comment = backup wwwroot  </span><br><span class=\"line\">ignore errors  </span><br><span class=\"line\">read only = no </span><br><span class=\"line\">write only = no </span><br><span class=\"line\">hosts allow = 192.168.1.1  </span><br><span class=\"line\">hosts deny = *  </span><br><span class=\"line\">list = false </span><br><span class=\"line\">uid = root </span><br><span class=\"line\">gid = root </span><br><span class=\"line\">auth users = user</span><br><span class=\"line\">secrets file = /usr/local/rsync/rsync.passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动远B的rsync\"><a href=\"#启动远B的rsync\" class=\"headerlink\" title=\"启动远B的rsync\"></a>启动远B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf</span><br></pre></td></tr></table></figure>\n\n\n<p>为了方便，可以让远B的rsync随机启动，我们需要将启动命令加入&#x2F;etc&#x2F;rc.local文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf&#x27; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>启动脚本如果没有执行权限，那么随机启动会失败，所以运行了chmod +x &#x2F;etc&#x2F;rc.local。启动后，可以通过netstat -an | grep 873 检验是否已经启动rsync</p>\n<h2 id=\"开放远B的rsync端口\"><a href=\"#开放远B的rsync端口\" class=\"headerlink\" title=\"开放远B的rsync端口\"></a>开放远B的rsync端口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT 3 -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT</span><br><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables reload</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"在备A创建备份脚本\"><a href=\"#在备A创建备份脚本\" class=\"headerlink\" title=\"在备A创建备份脚本\"></a>在备A创建备份脚本</h2><p>假设，我们需要备份的是&#x2F;data&#x2F;leo文件夹，我们需要排除&#x2F;data&#x2F;leo&#x2F;root文件夹和&#x2F;data&#x2F;leo&#x2F;sh.sh文件<br>我们在&#x2F;data&#x2F;leo创建rsync.sh，并填充如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">host=192.168.1.2</span><br><span class=\"line\">src=/data/leo/</span><br><span class=\"line\">des=leo</span><br><span class=\"line\">user=user</span><br><span class=\"line\">/usr/local/inotify/bin/inotifywait -mrq --timefmt &#x27;%d/%m/%y %H:%M&#x27; --format &#x27;%T %w%f%e&#x27; -e modify,delete,create,attrib $src | while read files</span><br><span class=\"line\">do</span><br><span class=\"line\">/usr/bin/rsync -vzrtopg --delete --progress --exclude-from=/usr/local/rsync/exclude.list --password-file=/usr/local/rsync/rsync.passwd $src $user@$host::$des</span><br><span class=\"line\">echo &quot;$&#123;files&#125; was rsynced&quot; &gt;&gt;/data/wwwlogs/rsync.log 2&gt;&amp;1</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>host是远B的IP；src是备A服务器上的备份源文件夹；des是远B配置文件&#x2F;usr&#x2F;local&#x2F;rsync&#x2F;rsync.conf里面的[leo]的leo，也就是说这个模块名称由远B的配置文件决定。如果备A删除文件，而要求远B保留被删除文件，则将–delete参数去除</p>\n<p>排除&#x2F;data&#x2F;leo&#x2F;root文件夹和&#x2F;data&#x2F;leo&#x2F;sh.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;root/&#x27; &gt;&gt; /usr/local/rsync/exclude.list</span><br><span class=\"line\">echo &#x27;sh.sh&#x27; &gt;&gt;/usr/local/rsync/exclude.list</span><br></pre></td></tr></table></figure>\n\n<p>一行一个排除规则，只能用相对路径</p>\n<h2 id=\"开机启动备A的启动脚本\"><a href=\"#开机启动备A的启动脚本\" class=\"headerlink\" title=\"开机启动备A的启动脚本\"></a>开机启动备A的启动脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;bash /data/leo/rsync.sh &amp;&#x27; &gt;&gt; /etc/rc.local</span><br><span class=\"line\">chmod +x /etc/rc.local</span><br><span class=\"line\">chmod 744 /data/leo/rsync.sh</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"一些错误\"><a href=\"#一些错误\" class=\"headerlink\" title=\"一些错误\"></a>一些错误</h2><p>1.rsync: failed to connect to X.X.X.X: No route to host<br>远B没有开放873端口的原因，备A无法访问远B</p>\n<p>2.rsync failed Connection refused 111<br>远B的rsync没有启动，启动即可</p>\n"},{"title":"利用inotify+rsync实时同步数据到远程服务器之二","date":"2018-06-21T23:47:00.000Z","url":"sync-data-realtime-with-inotify-rsync-v2","description":"inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。","_content":"\n> inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。它的Github地址是<https://github.com/rvoicilas/inotify-tools>\n\n最近因为备份数据，在服务器上面配置inotify+rsync实时同步（参考《[利用inotify+rsync实时同步数据到远程服务器](/sync-data-realtime-with-inotify-rsync)》）时发现inotify升级了。于是打算把inotify升级一下，顺便把原来用/etc/rc.local开机启动的方式改成用supervisor守护进程。\n\n## 安装inotify\n\n对比以前的inotify老版本，比较新的版本的源码包里面都没有configure这个文件，所以呢，安装的时候需要生成configure可执行文件。参考原来的文章，发现以前的下载链接已经没有了，所以，前后文件变化，我也懒得去比较了。不过，确定的一点是，在inotify迁移到github上面之后的所有版本都没有configure。\n\n新版本源码里面有autogen.sh，是用来自动构造一些配置和可执行文件的shell脚本。而需要的configure文件也是通过它构造的！\n\n```\nwget https://github.com/rvoicilas/inotify-tools/archive/3.20.1.tar.gz  \ntar zxvf 3.20.1.tar.gz \ncd inotify-tools-3.20.1 \n./autogen.sh\n./configure --prefix=/usr/local/inotify  \nmake  \nmake install \n```\n\n和原来差不多，多了一步执行autogen.sh\n\n## supervisor守护远程服务器B的rsync\n\n```\n[program:rsync]\ncommand=/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf\nnumprocs=1\nautostart=true\nautorestart=true\nstartretries=10\nexitcodes=0\nstopsignal=KILL\nstopwaitsecs=10\nredirect_stderr=true\nstdout_logfile=logfile\nuser=root\nredirect_stderr=true\nstdout_logfile=/data/supervisor/log/rsync.log\nloglevel=error\n```\n\n\n这里守护的远程服务器B的rsync（参考原来文章），因为需要确保远程服务器的rsync处于常开状态！\n\n## supervisor守护被备份服务器A的服务\n\n```\n[program:rsync]\ncommand=bash /data/leo/rsync.sh\nnumprocs=1\nautostart=true\nautorestart=true\nstartretries=10\nexitcodes=0\nstopsignal=KILL\nstopwaitsecs=10\nredirect_stderr=true\nstdout_logfile=logfile\nuser=root\nredirect_stderr=true\nstdout_logfile=/data/supervisor/log/rsync.log\nloglevel=error\nstdout_logfile_maxbytes=5MB\nstdout_logfile_backups=3\n```\n\n被备份服务器的情况是，利用inotify侦听目录变化，然后循环调用rsync同步数据到远程服务器B。\n\n## 最后\n\nsupervisor守护进程的说明，可参考《[Linux上用supervisor守护进程](/run-daemon-process-with-supervisor-on-linux)》。","source":"_posts/利用inotify+rsync实时同步数据到远程服务器之二.md","raw":"---\ntitle: 利用inotify+rsync实时同步数据到远程服务器之二\ndate: 2018-06-22 07:47:00\ntags: \n  - inotify\n  - 实时同步\ncategories:\n  - 技术\nurl: sync-data-realtime-with-inotify-rsync-v2\ndescription: inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。\n---\n\n> inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。它的Github地址是<https://github.com/rvoicilas/inotify-tools>\n\n最近因为备份数据，在服务器上面配置inotify+rsync实时同步（参考《[利用inotify+rsync实时同步数据到远程服务器](/sync-data-realtime-with-inotify-rsync)》）时发现inotify升级了。于是打算把inotify升级一下，顺便把原来用/etc/rc.local开机启动的方式改成用supervisor守护进程。\n\n## 安装inotify\n\n对比以前的inotify老版本，比较新的版本的源码包里面都没有configure这个文件，所以呢，安装的时候需要生成configure可执行文件。参考原来的文章，发现以前的下载链接已经没有了，所以，前后文件变化，我也懒得去比较了。不过，确定的一点是，在inotify迁移到github上面之后的所有版本都没有configure。\n\n新版本源码里面有autogen.sh，是用来自动构造一些配置和可执行文件的shell脚本。而需要的configure文件也是通过它构造的！\n\n```\nwget https://github.com/rvoicilas/inotify-tools/archive/3.20.1.tar.gz  \ntar zxvf 3.20.1.tar.gz \ncd inotify-tools-3.20.1 \n./autogen.sh\n./configure --prefix=/usr/local/inotify  \nmake  \nmake install \n```\n\n和原来差不多，多了一步执行autogen.sh\n\n## supervisor守护远程服务器B的rsync\n\n```\n[program:rsync]\ncommand=/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf\nnumprocs=1\nautostart=true\nautorestart=true\nstartretries=10\nexitcodes=0\nstopsignal=KILL\nstopwaitsecs=10\nredirect_stderr=true\nstdout_logfile=logfile\nuser=root\nredirect_stderr=true\nstdout_logfile=/data/supervisor/log/rsync.log\nloglevel=error\n```\n\n\n这里守护的远程服务器B的rsync（参考原来文章），因为需要确保远程服务器的rsync处于常开状态！\n\n## supervisor守护被备份服务器A的服务\n\n```\n[program:rsync]\ncommand=bash /data/leo/rsync.sh\nnumprocs=1\nautostart=true\nautorestart=true\nstartretries=10\nexitcodes=0\nstopsignal=KILL\nstopwaitsecs=10\nredirect_stderr=true\nstdout_logfile=logfile\nuser=root\nredirect_stderr=true\nstdout_logfile=/data/supervisor/log/rsync.log\nloglevel=error\nstdout_logfile_maxbytes=5MB\nstdout_logfile_backups=3\n```\n\n被备份服务器的情况是，利用inotify侦听目录变化，然后循环调用rsync同步数据到远程服务器B。\n\n## 最后\n\nsupervisor守护进程的说明，可参考《[Linux上用supervisor守护进程](/run-daemon-process-with-supervisor-on-linux)》。","slug":"利用inotify+rsync实时同步数据到远程服务器之二","published":1,"updated":"2022-05-12T17:05:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aue0010lvtdeab97br8","content":"<blockquote>\n<p>inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。它的Github地址是<a href=\"https://github.com/rvoicilas/inotify-tools\">https://github.com/rvoicilas/inotify-tools</a></p>\n</blockquote>\n<p>最近因为备份数据，在服务器上面配置inotify+rsync实时同步（参考《<a href=\"/sync-data-realtime-with-inotify-rsync\">利用inotify+rsync实时同步数据到远程服务器</a>》）时发现inotify升级了。于是打算把inotify升级一下，顺便把原来用&#x2F;etc&#x2F;rc.local开机启动的方式改成用supervisor守护进程。</p>\n<h2 id=\"安装inotify\"><a href=\"#安装inotify\" class=\"headerlink\" title=\"安装inotify\"></a>安装inotify</h2><p>对比以前的inotify老版本，比较新的版本的源码包里面都没有configure这个文件，所以呢，安装的时候需要生成configure可执行文件。参考原来的文章，发现以前的下载链接已经没有了，所以，前后文件变化，我也懒得去比较了。不过，确定的一点是，在inotify迁移到github上面之后的所有版本都没有configure。</p>\n<p>新版本源码里面有autogen.sh，是用来自动构造一些配置和可执行文件的shell脚本。而需要的configure文件也是通过它构造的！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/rvoicilas/inotify-tools/archive/3.20.1.tar.gz  </span><br><span class=\"line\">tar zxvf 3.20.1.tar.gz </span><br><span class=\"line\">cd inotify-tools-3.20.1 </span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\">./configure --prefix=/usr/local/inotify  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install </span><br></pre></td></tr></table></figure>\n\n<p>和原来差不多，多了一步执行autogen.sh</p>\n<h2 id=\"supervisor守护远程服务器B的rsync\"><a href=\"#supervisor守护远程服务器B的rsync\" class=\"headerlink\" title=\"supervisor守护远程服务器B的rsync\"></a>supervisor守护远程服务器B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:rsync]</span><br><span class=\"line\">command=/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf</span><br><span class=\"line\">numprocs=1</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startretries=10</span><br><span class=\"line\">exitcodes=0</span><br><span class=\"line\">stopsignal=KILL</span><br><span class=\"line\">stopwaitsecs=10</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=logfile</span><br><span class=\"line\">user=root</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/supervisor/log/rsync.log</span><br><span class=\"line\">loglevel=error</span><br></pre></td></tr></table></figure>\n\n\n<p>这里守护的远程服务器B的rsync（参考原来文章），因为需要确保远程服务器的rsync处于常开状态！</p>\n<h2 id=\"supervisor守护被备份服务器A的服务\"><a href=\"#supervisor守护被备份服务器A的服务\" class=\"headerlink\" title=\"supervisor守护被备份服务器A的服务\"></a>supervisor守护被备份服务器A的服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:rsync]</span><br><span class=\"line\">command=bash /data/leo/rsync.sh</span><br><span class=\"line\">numprocs=1</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startretries=10</span><br><span class=\"line\">exitcodes=0</span><br><span class=\"line\">stopsignal=KILL</span><br><span class=\"line\">stopwaitsecs=10</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=logfile</span><br><span class=\"line\">user=root</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/supervisor/log/rsync.log</span><br><span class=\"line\">loglevel=error</span><br><span class=\"line\">stdout_logfile_maxbytes=5MB</span><br><span class=\"line\">stdout_logfile_backups=3</span><br></pre></td></tr></table></figure>\n\n<p>被备份服务器的情况是，利用inotify侦听目录变化，然后循环调用rsync同步数据到远程服务器B。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>supervisor守护进程的说明，可参考《<a href=\"/run-daemon-process-with-supervisor-on-linux\">Linux上用supervisor守护进程</a>》。</p>\n","site":{"data":{}},"length":1574,"excerpt":"","more":"<blockquote>\n<p>inotify的新版本出来许久，我才发现，现在把它升级一下吧。目下，inotify的新版本号是3.20.1。它的Github地址是<a href=\"https://github.com/rvoicilas/inotify-tools\">https://github.com/rvoicilas/inotify-tools</a></p>\n</blockquote>\n<p>最近因为备份数据，在服务器上面配置inotify+rsync实时同步（参考《<a href=\"/sync-data-realtime-with-inotify-rsync\">利用inotify+rsync实时同步数据到远程服务器</a>》）时发现inotify升级了。于是打算把inotify升级一下，顺便把原来用&#x2F;etc&#x2F;rc.local开机启动的方式改成用supervisor守护进程。</p>\n<h2 id=\"安装inotify\"><a href=\"#安装inotify\" class=\"headerlink\" title=\"安装inotify\"></a>安装inotify</h2><p>对比以前的inotify老版本，比较新的版本的源码包里面都没有configure这个文件，所以呢，安装的时候需要生成configure可执行文件。参考原来的文章，发现以前的下载链接已经没有了，所以，前后文件变化，我也懒得去比较了。不过，确定的一点是，在inotify迁移到github上面之后的所有版本都没有configure。</p>\n<p>新版本源码里面有autogen.sh，是用来自动构造一些配置和可执行文件的shell脚本。而需要的configure文件也是通过它构造的！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/rvoicilas/inotify-tools/archive/3.20.1.tar.gz  </span><br><span class=\"line\">tar zxvf 3.20.1.tar.gz </span><br><span class=\"line\">cd inotify-tools-3.20.1 </span><br><span class=\"line\">./autogen.sh</span><br><span class=\"line\">./configure --prefix=/usr/local/inotify  </span><br><span class=\"line\">make  </span><br><span class=\"line\">make install </span><br></pre></td></tr></table></figure>\n\n<p>和原来差不多，多了一步执行autogen.sh</p>\n<h2 id=\"supervisor守护远程服务器B的rsync\"><a href=\"#supervisor守护远程服务器B的rsync\" class=\"headerlink\" title=\"supervisor守护远程服务器B的rsync\"></a>supervisor守护远程服务器B的rsync</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:rsync]</span><br><span class=\"line\">command=/usr/bin/rsync --daemon --config=/usr/local/rsync/rsync.conf</span><br><span class=\"line\">numprocs=1</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startretries=10</span><br><span class=\"line\">exitcodes=0</span><br><span class=\"line\">stopsignal=KILL</span><br><span class=\"line\">stopwaitsecs=10</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=logfile</span><br><span class=\"line\">user=root</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/supervisor/log/rsync.log</span><br><span class=\"line\">loglevel=error</span><br></pre></td></tr></table></figure>\n\n\n<p>这里守护的远程服务器B的rsync（参考原来文章），因为需要确保远程服务器的rsync处于常开状态！</p>\n<h2 id=\"supervisor守护被备份服务器A的服务\"><a href=\"#supervisor守护被备份服务器A的服务\" class=\"headerlink\" title=\"supervisor守护被备份服务器A的服务\"></a>supervisor守护被备份服务器A的服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:rsync]</span><br><span class=\"line\">command=bash /data/leo/rsync.sh</span><br><span class=\"line\">numprocs=1</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startretries=10</span><br><span class=\"line\">exitcodes=0</span><br><span class=\"line\">stopsignal=KILL</span><br><span class=\"line\">stopwaitsecs=10</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=logfile</span><br><span class=\"line\">user=root</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/supervisor/log/rsync.log</span><br><span class=\"line\">loglevel=error</span><br><span class=\"line\">stdout_logfile_maxbytes=5MB</span><br><span class=\"line\">stdout_logfile_backups=3</span><br></pre></td></tr></table></figure>\n\n<p>被备份服务器的情况是，利用inotify侦听目录变化，然后循环调用rsync同步数据到远程服务器B。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>supervisor守护进程的说明，可参考《<a href=\"/run-daemon-process-with-supervisor-on-linux\">Linux上用supervisor守护进程</a>》。</p>\n"},{"title":"启用Google Authenticator两步验证登录Linux SSH","date":"2018-11-02T02:48:47.000Z","url":"login-ssh-with-2fa-authentication-by-google-authencator","description":"Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。","_content":"\n> Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。\n\n## 安装ntpd\n\n```\nyum install -y ntpdate\nsystemctl start ntpd\nsystemctl enable ntpd\n```\n\n\nntpdate 是用来自动同步时间的程序，这里启动它并设置它开机自动启动。\n\n## 安装必需的组件\n\n```\nyum install -y git make gcc libtool pam-devel\n```\n\n## 安装Google Authenticator\n\n```\ngit clone https://github.com/google/google-authenticator\ncd google-authenticator/libpam\n./bootstrap.sh\n./configure\nmake\nmake install\nln -s /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/\n```\n\n安装epel-release的前提下，可利用yum install google-authenticator快速安装\n\n## 配置 SSH 服务\n\n编辑 /etc/ssh/sshd_config 文件\n\n```\nvim /etc/ssh/sshd_config\n```\n\n修改下面字段的配置\n\n```\nChallengeResponseAuthentication yes\nPasswordAuthentication no\nPubkeyAuthentication yes\nUsePAM yes\n```\n\n然后重启一下 sshd 服务，使配置生效\n\n```\nsystemctl restart sshd\n```\n\n\n这里将 PubkeyAuthentication 配置成了 yes 表示支持公钥验证登录，即使某个账号启用了 Google Authenticator\n验证，只要登录者机器的公钥在这个账号的授权下，就可以不输入密码和 Google Authenticator 的认证码直接登录。\n\n## 配置 PAM\n\n打开 /etc/pam.d/sshd 文件\n\n```\nvim /etc/pam.d/sshd\n```\n\n在文件顶部加入下列代码\n\n```\nauth required pam_google_authenticator.so nullok\n```\n\n\n## 启用 Google Authenticator\n\n切换至想要使用 Google Authenticator 来做登录验证的账号，执行下面操作\n\n```\ngoogle-authenticator\n```\n\n然后一路Y，再扫码就好！！登录验证的时候，只保留interactive和password，先输入手机Google Authenticator的验证码，再输入密码，就可以登录\n\n\n\n","source":"_posts/启用Google Authenticator两步验证登录Linux SSH.md","raw":"---\ntitle: 启用Google Authenticator两步验证登录Linux SSH\ndate: 2018-11-02 10:48:47\ntags: \n  - SSH安全\n  - 二步验证\ncategories:\n  - 技术\nurl: login-ssh-with-2fa-authentication-by-google-authencator\ndescription: Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。\n---\n\n> Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。\n\n## 安装ntpd\n\n```\nyum install -y ntpdate\nsystemctl start ntpd\nsystemctl enable ntpd\n```\n\n\nntpdate 是用来自动同步时间的程序，这里启动它并设置它开机自动启动。\n\n## 安装必需的组件\n\n```\nyum install -y git make gcc libtool pam-devel\n```\n\n## 安装Google Authenticator\n\n```\ngit clone https://github.com/google/google-authenticator\ncd google-authenticator/libpam\n./bootstrap.sh\n./configure\nmake\nmake install\nln -s /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/\n```\n\n安装epel-release的前提下，可利用yum install google-authenticator快速安装\n\n## 配置 SSH 服务\n\n编辑 /etc/ssh/sshd_config 文件\n\n```\nvim /etc/ssh/sshd_config\n```\n\n修改下面字段的配置\n\n```\nChallengeResponseAuthentication yes\nPasswordAuthentication no\nPubkeyAuthentication yes\nUsePAM yes\n```\n\n然后重启一下 sshd 服务，使配置生效\n\n```\nsystemctl restart sshd\n```\n\n\n这里将 PubkeyAuthentication 配置成了 yes 表示支持公钥验证登录，即使某个账号启用了 Google Authenticator\n验证，只要登录者机器的公钥在这个账号的授权下，就可以不输入密码和 Google Authenticator 的认证码直接登录。\n\n## 配置 PAM\n\n打开 /etc/pam.d/sshd 文件\n\n```\nvim /etc/pam.d/sshd\n```\n\n在文件顶部加入下列代码\n\n```\nauth required pam_google_authenticator.so nullok\n```\n\n\n## 启用 Google Authenticator\n\n切换至想要使用 Google Authenticator 来做登录验证的账号，执行下面操作\n\n```\ngoogle-authenticator\n```\n\n然后一路Y，再扫码就好！！登录验证的时候，只保留interactive和password，先输入手机Google Authenticator的验证码，再输入密码，就可以登录\n\n\n\n","slug":"启用Google Authenticator两步验证登录Linux SSH","published":1,"updated":"2022-05-12T17:05:53.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6auf0013lvtd59b7amy5","content":"<blockquote>\n<p>Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。</p>\n</blockquote>\n<h2 id=\"安装ntpd\"><a href=\"#安装ntpd\" class=\"headerlink\" title=\"安装ntpd\"></a>安装ntpd</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ntpdate</span><br><span class=\"line\">systemctl start ntpd</span><br><span class=\"line\">systemctl enable ntpd</span><br></pre></td></tr></table></figure>\n\n\n<p>ntpdate 是用来自动同步时间的程序，这里启动它并设置它开机自动启动。</p>\n<h2 id=\"安装必需的组件\"><a href=\"#安装必需的组件\" class=\"headerlink\" title=\"安装必需的组件\"></a>安装必需的组件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y git make gcc libtool pam-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Google-Authenticator\"><a href=\"#安装Google-Authenticator\" class=\"headerlink\" title=\"安装Google Authenticator\"></a>安装Google Authenticator</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/google/google-authenticator</span><br><span class=\"line\">cd google-authenticator/libpam</span><br><span class=\"line\">./bootstrap.sh</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\">ln -s /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/</span><br></pre></td></tr></table></figure>\n\n<p>安装epel-release的前提下，可利用yum install google-authenticator快速安装</p>\n<h2 id=\"配置-SSH-服务\"><a href=\"#配置-SSH-服务\" class=\"headerlink\" title=\"配置 SSH 服务\"></a>配置 SSH 服务</h2><p>编辑 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>修改下面字段的配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChallengeResponseAuthentication yes</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">UsePAM yes</span><br></pre></td></tr></table></figure>\n\n<p>然后重启一下 sshd 服务，使配置生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n\n<p>这里将 PubkeyAuthentication 配置成了 yes 表示支持公钥验证登录，即使某个账号启用了 Google Authenticator<br>验证，只要登录者机器的公钥在这个账号的授权下，就可以不输入密码和 Google Authenticator 的认证码直接登录。</p>\n<h2 id=\"配置-PAM\"><a href=\"#配置-PAM\" class=\"headerlink\" title=\"配置 PAM\"></a>配置 PAM</h2><p>打开 &#x2F;etc&#x2F;pam.d&#x2F;sshd 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/pam.d/sshd</span><br></pre></td></tr></table></figure>\n\n<p>在文件顶部加入下列代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth required pam_google_authenticator.so nullok</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"启用-Google-Authenticator\"><a href=\"#启用-Google-Authenticator\" class=\"headerlink\" title=\"启用 Google Authenticator\"></a>启用 Google Authenticator</h2><p>切换至想要使用 Google Authenticator 来做登录验证的账号，执行下面操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google-authenticator</span><br></pre></td></tr></table></figure>\n\n<p>然后一路Y，再扫码就好！！登录验证的时候，只保留interactive和password，先输入手机Google Authenticator的验证码，再输入密码，就可以登录</p>\n","site":{"data":{}},"length":1149,"excerpt":"","more":"<blockquote>\n<p>Linux的SSH是系统的大门，安全重要性可想而知。下面我以Linux的发行版Centos7为栗子，介绍一下如何启用Google Authenticator作为两步验证的工具保护我们的SSH。</p>\n</blockquote>\n<h2 id=\"安装ntpd\"><a href=\"#安装ntpd\" class=\"headerlink\" title=\"安装ntpd\"></a>安装ntpd</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ntpdate</span><br><span class=\"line\">systemctl start ntpd</span><br><span class=\"line\">systemctl enable ntpd</span><br></pre></td></tr></table></figure>\n\n\n<p>ntpdate 是用来自动同步时间的程序，这里启动它并设置它开机自动启动。</p>\n<h2 id=\"安装必需的组件\"><a href=\"#安装必需的组件\" class=\"headerlink\" title=\"安装必需的组件\"></a>安装必需的组件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y git make gcc libtool pam-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Google-Authenticator\"><a href=\"#安装Google-Authenticator\" class=\"headerlink\" title=\"安装Google Authenticator\"></a>安装Google Authenticator</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/google/google-authenticator</span><br><span class=\"line\">cd google-authenticator/libpam</span><br><span class=\"line\">./bootstrap.sh</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\">ln -s /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/</span><br></pre></td></tr></table></figure>\n\n<p>安装epel-release的前提下，可利用yum install google-authenticator快速安装</p>\n<h2 id=\"配置-SSH-服务\"><a href=\"#配置-SSH-服务\" class=\"headerlink\" title=\"配置 SSH 服务\"></a>配置 SSH 服务</h2><p>编辑 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>修改下面字段的配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChallengeResponseAuthentication yes</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">UsePAM yes</span><br></pre></td></tr></table></figure>\n\n<p>然后重启一下 sshd 服务，使配置生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n\n<p>这里将 PubkeyAuthentication 配置成了 yes 表示支持公钥验证登录，即使某个账号启用了 Google Authenticator<br>验证，只要登录者机器的公钥在这个账号的授权下，就可以不输入密码和 Google Authenticator 的认证码直接登录。</p>\n<h2 id=\"配置-PAM\"><a href=\"#配置-PAM\" class=\"headerlink\" title=\"配置 PAM\"></a>配置 PAM</h2><p>打开 &#x2F;etc&#x2F;pam.d&#x2F;sshd 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/pam.d/sshd</span><br></pre></td></tr></table></figure>\n\n<p>在文件顶部加入下列代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth required pam_google_authenticator.so nullok</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"启用-Google-Authenticator\"><a href=\"#启用-Google-Authenticator\" class=\"headerlink\" title=\"启用 Google Authenticator\"></a>启用 Google Authenticator</h2><p>切换至想要使用 Google Authenticator 来做登录验证的账号，执行下面操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google-authenticator</span><br></pre></td></tr></table></figure>\n\n<p>然后一路Y，再扫码就好！！登录验证的时候，只保留interactive和password，先输入手机Google Authenticator的验证码，再输入密码，就可以登录</p>\n"},{"title":"在Centos7上面安装ffmpeg及其开发包ffmpeg-devel","date":"2018-04-19T23:41:00.000Z","url":"install-ffpmeg-and-ffmpeg-devel-on-centos7","description":"ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。","_content":"\n> ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。\n\n## 约定\n\n我所用的系统是Centos 7.4 64bit。至于其他的Linux发行版或者macOS，请自行变通处理，这里仅作为一个参考。\n\n## yum安装\n\n1. 首先确保已经安装了EPEL，如果已经安装，可跳过\n\n```\nyum -y install epel-release\n```\n\n\n2. 安装完EPEL之后，导入Nux Dextop仓库\n\n```\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\n```\n\n3. 最后执行安装命令就好\n\n```\nyum -y install ffmpeg ffmpeg-devel\n```\n\n\n## shell自动安装\n\n值得注意的是，这个脚本安装的是一个预编译版本的ffmpeg。\n\n1. 下载shell脚本\n\n```\nwget https://raw.githubusercontent.com/q3aql/ffmpeg-install/master/ffmpeg-install\n```\n\n2. 给脚本添加可执行权限\n\n```\nchmod a+x ffmpeg-install\n```\n\n3. 安装已发行版本的ffmpeg\n\n```\n./ffmpeg-install --install release\n```\n\n## 验证安装\n\n最后，我们最好验证一下ffmpeg是否已经安装成功了。\n\n```\nffmpeg -version\n```","source":"_posts/在Centos7上面安装ffmpeg及其开发包ffmpeg-devel.md","raw":"---\ntitle: 在Centos7上面安装ffmpeg及其开发包ffmpeg-devel\ndate: 2018-04-20 07:41:00\ntags: \n  - ffmpeg\ncategories:\n  - 技术\nurl: install-ffpmeg-and-ffmpeg-devel-on-centos7\ndescription: ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。\n---\n\n> ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。\n\n## 约定\n\n我所用的系统是Centos 7.4 64bit。至于其他的Linux发行版或者macOS，请自行变通处理，这里仅作为一个参考。\n\n## yum安装\n\n1. 首先确保已经安装了EPEL，如果已经安装，可跳过\n\n```\nyum -y install epel-release\n```\n\n\n2. 安装完EPEL之后，导入Nux Dextop仓库\n\n```\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\n```\n\n3. 最后执行安装命令就好\n\n```\nyum -y install ffmpeg ffmpeg-devel\n```\n\n\n## shell自动安装\n\n值得注意的是，这个脚本安装的是一个预编译版本的ffmpeg。\n\n1. 下载shell脚本\n\n```\nwget https://raw.githubusercontent.com/q3aql/ffmpeg-install/master/ffmpeg-install\n```\n\n2. 给脚本添加可执行权限\n\n```\nchmod a+x ffmpeg-install\n```\n\n3. 安装已发行版本的ffmpeg\n\n```\n./ffmpeg-install --install release\n```\n\n## 验证安装\n\n最后，我们最好验证一下ffmpeg是否已经安装成功了。\n\n```\nffmpeg -version\n```","slug":"在Centos7上面安装ffmpeg及其开发包ffmpeg-devel","published":1,"updated":"2022-05-12T17:07:23.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aug0017lvtd1of2f3xe","content":"<blockquote>\n<p>ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。</p>\n</blockquote>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>我所用的系统是Centos 7.4 64bit。至于其他的Linux发行版或者macOS，请自行变通处理，这里仅作为一个参考。</p>\n<h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><ol>\n<li>首先确保已经安装了EPEL，如果已经安装，可跳过</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>安装完EPEL之后，导入Nux Dextop仓库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>最后执行安装命令就好</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"shell自动安装\"><a href=\"#shell自动安装\" class=\"headerlink\" title=\"shell自动安装\"></a>shell自动安装</h2><p>值得注意的是，这个脚本安装的是一个预编译版本的ffmpeg。</p>\n<ol>\n<li>下载shell脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/q3aql/ffmpeg-install/master/ffmpeg-install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>给脚本添加可执行权限</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x ffmpeg-install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装已发行版本的ffmpeg</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ffmpeg-install --install release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>最后，我们最好验证一下ffmpeg是否已经安装成功了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -version</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":649,"excerpt":"","more":"<blockquote>\n<p>ffmpeg作为一个开源，成熟的多媒体播放、转换、压缩解决方案，是广大多媒体资源从业者的最好的一个选择。最近，新上线的一个项目也用到了ffmpeg，所以也来说说怎么在centos上面安装ffmpeg及其开发包ffmpeg-evel。</p>\n</blockquote>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>我所用的系统是Centos 7.4 64bit。至于其他的Linux发行版或者macOS，请自行变通处理，这里仅作为一个参考。</p>\n<h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><ol>\n<li>首先确保已经安装了EPEL，如果已经安装，可跳过</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>安装完EPEL之后，导入Nux Dextop仓库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>最后执行安装命令就好</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"shell自动安装\"><a href=\"#shell自动安装\" class=\"headerlink\" title=\"shell自动安装\"></a>shell自动安装</h2><p>值得注意的是，这个脚本安装的是一个预编译版本的ffmpeg。</p>\n<ol>\n<li>下载shell脚本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/q3aql/ffmpeg-install/master/ffmpeg-install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>给脚本添加可执行权限</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x ffmpeg-install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装已发行版本的ffmpeg</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ffmpeg-install --install release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>最后，我们最好验证一下ffmpeg是否已经安装成功了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -version</span><br></pre></td></tr></table></figure>"},{"title":"在centos7上安装OpenCC以及PHP C扩展opencc4php","date":"2018-03-30T23:39:00.000Z","url":"install-the-php-c-extension-opencc","description":"基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C/C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。","_content":"\n> 基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C/C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。\n\n## 安装EPEL\n\nEPEL全称Extra Packages for Enterprise\nLinux，老鸟们都知道安装上epel就相当于添加了一个很可靠的软件源一样，以后安装软件就省事情好多。如果已经安装可以跳过！\n\n```\nyum -y install epel-release\n```\n\n## 安装Doxygen\n\n官方并没有说到需要Doxygen，是我第一次编译OpenCC的时候发现了报错Could NOT find Doxygen (missing:\n DOXYGEN_EXECUTABLE)，所以才知道也需要安装Doxygen。当然，安装过了，也可以跳过。\n\n```\nyum -y install doxygen\n```\n\n## 安装OpenCC\n\n```\ngit clone https://github.com/BYVoid/OpenCC.git --depth 1\ncd OpenCC\nmake\nsudo make install\n```\n\n## 安装opencc4php\n\n```\ngit clone https://github.com/NauxLiu/opencc4php.git --depth 1\ncd opencc4php\nphpize\n./configure\nmake && sudo make install\n```\n\n## 可能的报错\n\n在我把opencc.so添加到php.ini配置以后，重载了php-fpm，原本以为已经OK，但是还是报错了。\n\n```\nphp -m\n```\n\n执行上面的命令查看安装成功没有的时候，发现报错如下，虽然只是一条警告级别的报错，却让opencc没办法工作：\n\n```\n**PHP Startup: Unable to load dynamic library\n'/usr/local/php/lib/php/extensions/no-debug-non-zts-20160303/opencc.so' -\nlibopencc.so.2: cannot open shared object file: No such file or directory in\nUnknown on line 0\n**\n```\n\n其实就是说找不到libopencc.so.2文件，只要建立一个软连接就搞定了\n\n```\nln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2\n```\n\n建立软连接后，再重载php-fpm，就可以愉快地在php里面使用opencc了","source":"_posts/在centos7上安装OpenCC以及PHP C扩展opencc4php.md","raw":"---\ntitle: 在centos7上安装OpenCC以及PHP C扩展opencc4php\ndate: 2018-03-31 07:39:00\ntags: \n  - OpenCC\ncategories:\n  - 技术\nurl: install-the-php-c-extension-opencc\ndescription: 基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C/C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。\n---\n\n> 基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C/C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。\n\n## 安装EPEL\n\nEPEL全称Extra Packages for Enterprise\nLinux，老鸟们都知道安装上epel就相当于添加了一个很可靠的软件源一样，以后安装软件就省事情好多。如果已经安装可以跳过！\n\n```\nyum -y install epel-release\n```\n\n## 安装Doxygen\n\n官方并没有说到需要Doxygen，是我第一次编译OpenCC的时候发现了报错Could NOT find Doxygen (missing:\n DOXYGEN_EXECUTABLE)，所以才知道也需要安装Doxygen。当然，安装过了，也可以跳过。\n\n```\nyum -y install doxygen\n```\n\n## 安装OpenCC\n\n```\ngit clone https://github.com/BYVoid/OpenCC.git --depth 1\ncd OpenCC\nmake\nsudo make install\n```\n\n## 安装opencc4php\n\n```\ngit clone https://github.com/NauxLiu/opencc4php.git --depth 1\ncd opencc4php\nphpize\n./configure\nmake && sudo make install\n```\n\n## 可能的报错\n\n在我把opencc.so添加到php.ini配置以后，重载了php-fpm，原本以为已经OK，但是还是报错了。\n\n```\nphp -m\n```\n\n执行上面的命令查看安装成功没有的时候，发现报错如下，虽然只是一条警告级别的报错，却让opencc没办法工作：\n\n```\n**PHP Startup: Unable to load dynamic library\n'/usr/local/php/lib/php/extensions/no-debug-non-zts-20160303/opencc.so' -\nlibopencc.so.2: cannot open shared object file: No such file or directory in\nUnknown on line 0\n**\n```\n\n其实就是说找不到libopencc.so.2文件，只要建立一个软连接就搞定了\n\n```\nln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2\n```\n\n建立软连接后，再重载php-fpm，就可以愉快地在php里面使用opencc了","slug":"在centos7上安装OpenCC以及PHP C扩展opencc4php","published":1,"updated":"2022-05-12T17:07:15.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aug0019lvtd4ev37ibn","content":"<blockquote>\n<p>基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C&#x2F;C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。</p>\n</blockquote>\n<h2 id=\"安装EPEL\"><a href=\"#安装EPEL\" class=\"headerlink\" title=\"安装EPEL\"></a>安装EPEL</h2><p>EPEL全称Extra Packages for Enterprise<br>Linux，老鸟们都知道安装上epel就相当于添加了一个很可靠的软件源一样，以后安装软件就省事情好多。如果已经安装可以跳过！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Doxygen\"><a href=\"#安装Doxygen\" class=\"headerlink\" title=\"安装Doxygen\"></a>安装Doxygen</h2><p>官方并没有说到需要Doxygen，是我第一次编译OpenCC的时候发现了报错Could NOT find Doxygen (missing:<br> DOXYGEN_EXECUTABLE)，所以才知道也需要安装Doxygen。当然，安装过了，也可以跳过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install doxygen</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装OpenCC\"><a href=\"#安装OpenCC\" class=\"headerlink\" title=\"安装OpenCC\"></a>安装OpenCC</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/BYVoid/OpenCC.git --depth 1</span><br><span class=\"line\">cd OpenCC</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装opencc4php\"><a href=\"#安装opencc4php\" class=\"headerlink\" title=\"安装opencc4php\"></a>安装opencc4php</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/NauxLiu/opencc4php.git --depth 1</span><br><span class=\"line\">cd opencc4php</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可能的报错\"><a href=\"#可能的报错\" class=\"headerlink\" title=\"可能的报错\"></a>可能的报错</h2><p>在我把opencc.so添加到php.ini配置以后，重载了php-fpm，原本以为已经OK，但是还是报错了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令查看安装成功没有的时候，发现报错如下，虽然只是一条警告级别的报错，却让opencc没办法工作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**PHP Startup: Unable to load dynamic library</span><br><span class=\"line\">&#x27;/usr/local/php/lib/php/extensions/no-debug-non-zts-20160303/opencc.so&#x27; -</span><br><span class=\"line\">libopencc.so.2: cannot open shared object file: No such file or directory in</span><br><span class=\"line\">Unknown on line 0</span><br><span class=\"line\">**</span><br></pre></td></tr></table></figure>\n\n<p>其实就是说找不到libopencc.so.2文件，只要建立一个软连接就搞定了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2</span><br></pre></td></tr></table></figure>\n\n<p>建立软连接后，再重载php-fpm，就可以愉快地在php里面使用opencc了</p>\n","site":{"data":{}},"length":1097,"excerpt":"","more":"<blockquote>\n<p>基于一个项目的需要，需要在PHP上面实现繁体转简体汉字相互转换的需求。为了保证运行效率，基于C&#x2F;C++写出来的PHP扩展当然是首选，所以我找到了OpenCC。下面就说说在centos7上面安装OpenCC的整个过程，PHP版本PHP7.1.12，编译了Zend OPcache扩展。</p>\n</blockquote>\n<h2 id=\"安装EPEL\"><a href=\"#安装EPEL\" class=\"headerlink\" title=\"安装EPEL\"></a>安装EPEL</h2><p>EPEL全称Extra Packages for Enterprise<br>Linux，老鸟们都知道安装上epel就相当于添加了一个很可靠的软件源一样，以后安装软件就省事情好多。如果已经安装可以跳过！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Doxygen\"><a href=\"#安装Doxygen\" class=\"headerlink\" title=\"安装Doxygen\"></a>安装Doxygen</h2><p>官方并没有说到需要Doxygen，是我第一次编译OpenCC的时候发现了报错Could NOT find Doxygen (missing:<br> DOXYGEN_EXECUTABLE)，所以才知道也需要安装Doxygen。当然，安装过了，也可以跳过。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install doxygen</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装OpenCC\"><a href=\"#安装OpenCC\" class=\"headerlink\" title=\"安装OpenCC\"></a>安装OpenCC</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/BYVoid/OpenCC.git --depth 1</span><br><span class=\"line\">cd OpenCC</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装opencc4php\"><a href=\"#安装opencc4php\" class=\"headerlink\" title=\"安装opencc4php\"></a>安装opencc4php</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/NauxLiu/opencc4php.git --depth 1</span><br><span class=\"line\">cd opencc4php</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可能的报错\"><a href=\"#可能的报错\" class=\"headerlink\" title=\"可能的报错\"></a>可能的报错</h2><p>在我把opencc.so添加到php.ini配置以后，重载了php-fpm，原本以为已经OK，但是还是报错了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令查看安装成功没有的时候，发现报错如下，虽然只是一条警告级别的报错，却让opencc没办法工作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**PHP Startup: Unable to load dynamic library</span><br><span class=\"line\">&#x27;/usr/local/php/lib/php/extensions/no-debug-non-zts-20160303/opencc.so&#x27; -</span><br><span class=\"line\">libopencc.so.2: cannot open shared object file: No such file or directory in</span><br><span class=\"line\">Unknown on line 0</span><br><span class=\"line\">**</span><br></pre></td></tr></table></figure>\n\n<p>其实就是说找不到libopencc.so.2文件，只要建立一个软连接就搞定了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2</span><br></pre></td></tr></table></figure>\n\n<p>建立软连接后，再重载php-fpm，就可以愉快地在php里面使用opencc了</p>\n"},{"title":"在centos7上安装iptables作为防火墙","date":"2018-01-29T23:15:00.000Z","url":"install-iptables-as-firewall-on-centos7","description":"从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。","_content":"\n> 从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。\n\n## 安装iptables并启动它\n\n```\nyum install iptables -y\nyum update iptables  -y\nyum install iptables-services -y\n/usr/sbin/iptables\n```\n\n## 禁用自带的firewalld服务\n\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\n\n## 设置iptables规则\n\n```\niptables -P INPUT ACCEPT\niptables -F\niptables -X\niptables -Z\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -A INPUT -p tcp --dport 21 -j ACCEPT\niptables -A INPUT -p tcp --dport 80 -j ACCEPT\niptables -A INPUT -p tcp --dport 443 -j ACCEPT\niptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT\niptables -P INPUT DROP\niptables -P OUTPUT ACCEPT\niptables -P FORWARD DROP\n```\n\n## 保存iptables\n\n```\nservice iptables save\n```\n\n## 启用iptables服务\n\n```\nsystemctl enable iptables.service\nsystemctl start iptables.service\n```\n\n## 补充\n\n如果想快速设置默认规则，也可以直接编辑/etc/sysconfig/iptables，并加入如下内容：\n\n```\n# Firewall configuration written by system-config-securitylevel\n# Manual customization of this file is not recommended.\n*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT\n-A INPUT -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n```\n\n保存后，启用iptables服务后后刷新重启iptables（先不要使用service iptables save保存，否则会被清空），然后重启系统。\n\n```\nsystemctl enable iptables.service #centos7的用法\nchkconfig --level 3 iptables on #centos7以下的用法\nservice iptables restart\nreboot\n```","source":"_posts/在centos7上安装iptables作为防火墙.md","raw":"---\ntitle: 在centos7上安装iptables作为防火墙\ndate: 2018-01-30 07:15:00\ntags: \n  - iptables\n  - 防火墙\ncategories:\n  - 技术\nurl: install-iptables-as-firewall-on-centos7\ndescription: 从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。\n---\n\n> 从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。\n\n## 安装iptables并启动它\n\n```\nyum install iptables -y\nyum update iptables  -y\nyum install iptables-services -y\n/usr/sbin/iptables\n```\n\n## 禁用自带的firewalld服务\n\n```\nsystemctl stop firewalld\nsystemctl mask firewalld\n```\n\n## 设置iptables规则\n\n```\niptables -P INPUT ACCEPT\niptables -F\niptables -X\niptables -Z\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -A INPUT -p tcp --dport 21 -j ACCEPT\niptables -A INPUT -p tcp --dport 80 -j ACCEPT\niptables -A INPUT -p tcp --dport 443 -j ACCEPT\niptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT\niptables -P INPUT DROP\niptables -P OUTPUT ACCEPT\niptables -P FORWARD DROP\n```\n\n## 保存iptables\n\n```\nservice iptables save\n```\n\n## 启用iptables服务\n\n```\nsystemctl enable iptables.service\nsystemctl start iptables.service\n```\n\n## 补充\n\n如果想快速设置默认规则，也可以直接编辑/etc/sysconfig/iptables，并加入如下内容：\n\n```\n# Firewall configuration written by system-config-securitylevel\n# Manual customization of this file is not recommended.\n*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT\n-A INPUT -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n```\n\n保存后，启用iptables服务后后刷新重启iptables（先不要使用service iptables save保存，否则会被清空），然后重启系统。\n\n```\nsystemctl enable iptables.service #centos7的用法\nchkconfig --level 3 iptables on #centos7以下的用法\nservice iptables restart\nreboot\n```","slug":"在centos7上安装iptables作为防火墙","published":1,"updated":"2022-05-12T17:07:09.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6auj001clvtd0c1m7lib","content":"<blockquote>\n<p>从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。</p>\n</blockquote>\n<h2 id=\"安装iptables并启动它\"><a href=\"#安装iptables并启动它\" class=\"headerlink\" title=\"安装iptables并启动它\"></a>安装iptables并启动它</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables -y</span><br><span class=\"line\">yum update iptables  -y</span><br><span class=\"line\">yum install iptables-services -y</span><br><span class=\"line\">/usr/sbin/iptables</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用自带的firewalld服务\"><a href=\"#禁用自带的firewalld服务\" class=\"headerlink\" title=\"禁用自带的firewalld服务\"></a>禁用自带的firewalld服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置iptables规则\"><a href=\"#设置iptables规则\" class=\"headerlink\" title=\"设置iptables规则\"></a>设置iptables规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT ACCEPT</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -X</span><br><span class=\"line\">iptables -Z</span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存iptables\"><a href=\"#保存iptables\" class=\"headerlink\" title=\"保存iptables\"></a>保存iptables</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用iptables服务\"><a href=\"#启用iptables服务\" class=\"headerlink\" title=\"启用iptables服务\"></a>启用iptables服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables.service</span><br><span class=\"line\">systemctl start iptables.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>如果想快速设置默认规则，也可以直接编辑&#x2F;etc&#x2F;sysconfig&#x2F;iptables，并加入如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Firewall configuration written by system-config-securitylevel</span><br><span class=\"line\"># Manual customization of this file is not recommended.</span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT DROP [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">:syn-flood - [0:0]</span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT</span><br><span class=\"line\">-A INPUT -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood</span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN</span><br><span class=\"line\">-A syn-flood -j REJECT --reject-with icmp-port-unreachable</span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>保存后，启用iptables服务后后刷新重启iptables（先不要使用service iptables save保存，否则会被清空），然后重启系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables.service #centos7的用法</span><br><span class=\"line\">chkconfig --level 3 iptables on #centos7以下的用法</span><br><span class=\"line\">service iptables restart</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1723,"excerpt":"","more":"<blockquote>\n<p>从centos7开始，centos就默认firewalld作为系统的防火墙。但在一些情况下，我们就不得不换回iptables。</p>\n</blockquote>\n<h2 id=\"安装iptables并启动它\"><a href=\"#安装iptables并启动它\" class=\"headerlink\" title=\"安装iptables并启动它\"></a>安装iptables并启动它</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install iptables -y</span><br><span class=\"line\">yum update iptables  -y</span><br><span class=\"line\">yum install iptables-services -y</span><br><span class=\"line\">/usr/sbin/iptables</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁用自带的firewalld服务\"><a href=\"#禁用自带的firewalld服务\" class=\"headerlink\" title=\"禁用自带的firewalld服务\"></a>禁用自带的firewalld服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置iptables规则\"><a href=\"#设置iptables规则\" class=\"headerlink\" title=\"设置iptables规则\"></a>设置iptables规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -P INPUT ACCEPT</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -X</span><br><span class=\"line\">iptables -Z</span><br><span class=\"line\">iptables -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存iptables\"><a href=\"#保存iptables\" class=\"headerlink\" title=\"保存iptables\"></a>保存iptables</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用iptables服务\"><a href=\"#启用iptables服务\" class=\"headerlink\" title=\"启用iptables服务\"></a>启用iptables服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables.service</span><br><span class=\"line\">systemctl start iptables.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>如果想快速设置默认规则，也可以直接编辑&#x2F;etc&#x2F;sysconfig&#x2F;iptables，并加入如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Firewall configuration written by system-config-securitylevel</span><br><span class=\"line\"># Manual customization of this file is not recommended.</span><br><span class=\"line\">*filter</span><br><span class=\"line\">:INPUT DROP [0:0]</span><br><span class=\"line\">:FORWARD ACCEPT [0:0]</span><br><span class=\"line\">:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">:syn-flood - [0:0]</span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT</span><br><span class=\"line\">-A INPUT -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT</span><br><span class=\"line\">-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood</span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN</span><br><span class=\"line\">-A syn-flood -j REJECT --reject-with icmp-port-unreachable</span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>保存后，启用iptables服务后后刷新重启iptables（先不要使用service iptables save保存，否则会被清空），然后重启系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable iptables.service #centos7的用法</span><br><span class=\"line\">chkconfig --level 3 iptables on #centos7以下的用法</span><br><span class=\"line\">service iptables restart</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>"},{"title":"在centos7上面安装Kafka","date":"2018-01-02T23:03:00.000Z","url":"install-kafka-on-centos-7","description":"Kafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。","_content":"\n## 简介\n\nKafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。\n\n本教程主要介绍Kafka 在Centos 7上的安装和使用，包括功能验证和集群的简单配置。\n\n## 安装JDK\n\nKafka 使用Zookeeper 来保存相关配置信息，Kafka及Zookeeper 依赖Java 运行环境，从oracle网站下载JDK 安装包，解压安装：\n\n```\ntar zxvf jdk-8u65-linux-x64.tar.gz\nmv jdk1.8.0_65 java\n```\n\n设置Java 环境变量：\n\n```\nJAVA_HOME=/opt/java\nPATH=$PATH:$JAVA_HOME/bin\nexport JAVA_HOME PATH\n```\n\n也可以选择yum install安装，相应设置环境变量。\n\n## 安装Kafka\n\n从官网下载Kafka 安装包，解压安装：\n\n```\ntar zxvf kafka_2.11-0.8.2.2.tgz\nmv kafka_2.11-0.8.2.2 kafka\ncd kafka\n```\n\n## 功能验证\n\n1.启动Zookeeper\n\n使用安装包中的脚本启动单节点Zookeeper 实例：\n\n```\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\n[2015-10-26 04:26:59,585] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)....\n```\n\n2.启动Kafka 服务\n\n使用kafka-server-start.sh 启动kafka 服务：\n\n```\nbin/kafka-server-start.sh config/server.properties\n[2015-10-26 04:28:56,115] INFO Verifying properties (kafka.utils.VerifiableProperties) [2015-10-26 04:28:56,141] INFO Property broker.id is overridden to 0 (kafka.utils.VerifiableProperties)\n```\n\n3.创建topic\n\n使用kafka-topics.sh 创建单分区单副本的topic test：\n\n```\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n```\n\n\n4. 查看topic：\n\n```\nbin/kafka-topics.sh --list --zookeeper localhost:2181\ntest\n```\n\n\n5. 产生消息\n\n使用kafka-console-producer.sh 发送消息：\n\n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\nHello world！ Hello Kafka\n```\n\n6. 消费消息\n\n使用kafka-console-consumer.sh 接收消息并在终端打印：\n\n```\nbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```\n\n## 集群配置\n\n ### 单机多broker 集群配置\n\n利用单节点部署多个broker。 不同的broker 设置不同的 id，监听端口及日志目录。 例如：\n\n```\ncp config/server.properties config/server-1.properties\n```\n\n编辑配置：\n\n```\nconfig/server-1.properties:\n    broker.id=1\n    port=9093\n    log.dir=/tmp/kafka-logs-1\n```\n\n启动Kafka服务：\n\n```\nbin/kafka-server-start.sh config/server-1.properties &\n```\n\n启动多个服务，按上文类似方式产生和消费消息。\n\n### 多机多broker 集群配置\n\n分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。 例如：\n在10.4.253.22，10.4.253.23，10.4.253.24三台机器部署，Zookeeper配置如下：\n\n```\ninitLimit=5\nsyncLimit=2\nserver.1=10.4.253.22:2888:3888\nserver.2=10.4.253.23:2888:3888\nserver.3=10.4.253.24:2888:3888\n```\n\n分别配置多个机器上的Kafka服务 设置不同的broke id，zookeeper.connect设置如下:\n\n```\nzookeeper.connect=10.4.253.22:2181,10.4.253.23:2181,10.4.253.24:2181\n```\n\n启动Zookeeper与Kafka服务，按上文方式产生和消费消息，验证集群功能。","source":"_posts/在centos7上面安装Kafka.md","raw":"---\ntitle: 在centos7上面安装Kafka\ndate: 2018-01-03 07:03:00\ntags: \n  - kafka\n  - 队列\ncategories:\n  - 技术\nurl: install-kafka-on-centos-7\ndescription: Kafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。\n---\n\n## 简介\n\nKafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。\n\n本教程主要介绍Kafka 在Centos 7上的安装和使用，包括功能验证和集群的简单配置。\n\n## 安装JDK\n\nKafka 使用Zookeeper 来保存相关配置信息，Kafka及Zookeeper 依赖Java 运行环境，从oracle网站下载JDK 安装包，解压安装：\n\n```\ntar zxvf jdk-8u65-linux-x64.tar.gz\nmv jdk1.8.0_65 java\n```\n\n设置Java 环境变量：\n\n```\nJAVA_HOME=/opt/java\nPATH=$PATH:$JAVA_HOME/bin\nexport JAVA_HOME PATH\n```\n\n也可以选择yum install安装，相应设置环境变量。\n\n## 安装Kafka\n\n从官网下载Kafka 安装包，解压安装：\n\n```\ntar zxvf kafka_2.11-0.8.2.2.tgz\nmv kafka_2.11-0.8.2.2 kafka\ncd kafka\n```\n\n## 功能验证\n\n1.启动Zookeeper\n\n使用安装包中的脚本启动单节点Zookeeper 实例：\n\n```\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\n[2015-10-26 04:26:59,585] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)....\n```\n\n2.启动Kafka 服务\n\n使用kafka-server-start.sh 启动kafka 服务：\n\n```\nbin/kafka-server-start.sh config/server.properties\n[2015-10-26 04:28:56,115] INFO Verifying properties (kafka.utils.VerifiableProperties) [2015-10-26 04:28:56,141] INFO Property broker.id is overridden to 0 (kafka.utils.VerifiableProperties)\n```\n\n3.创建topic\n\n使用kafka-topics.sh 创建单分区单副本的topic test：\n\n```\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n```\n\n\n4. 查看topic：\n\n```\nbin/kafka-topics.sh --list --zookeeper localhost:2181\ntest\n```\n\n\n5. 产生消息\n\n使用kafka-console-producer.sh 发送消息：\n\n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\nHello world！ Hello Kafka\n```\n\n6. 消费消息\n\n使用kafka-console-consumer.sh 接收消息并在终端打印：\n\n```\nbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```\n\n## 集群配置\n\n ### 单机多broker 集群配置\n\n利用单节点部署多个broker。 不同的broker 设置不同的 id，监听端口及日志目录。 例如：\n\n```\ncp config/server.properties config/server-1.properties\n```\n\n编辑配置：\n\n```\nconfig/server-1.properties:\n    broker.id=1\n    port=9093\n    log.dir=/tmp/kafka-logs-1\n```\n\n启动Kafka服务：\n\n```\nbin/kafka-server-start.sh config/server-1.properties &\n```\n\n启动多个服务，按上文类似方式产生和消费消息。\n\n### 多机多broker 集群配置\n\n分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。 例如：\n在10.4.253.22，10.4.253.23，10.4.253.24三台机器部署，Zookeeper配置如下：\n\n```\ninitLimit=5\nsyncLimit=2\nserver.1=10.4.253.22:2888:3888\nserver.2=10.4.253.23:2888:3888\nserver.3=10.4.253.24:2888:3888\n```\n\n分别配置多个机器上的Kafka服务 设置不同的broke id，zookeeper.connect设置如下:\n\n```\nzookeeper.connect=10.4.253.22:2181,10.4.253.23:2181,10.4.253.24:2181\n```\n\n启动Zookeeper与Kafka服务，按上文方式产生和消费消息，验证集群功能。","slug":"在centos7上面安装Kafka","published":1,"updated":"2022-05-12T17:07:28.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6auk001elvtdflv469n2","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Kafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。</p>\n<p>本教程主要介绍Kafka 在Centos 7上的安装和使用，包括功能验证和集群的简单配置。</p>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>Kafka 使用Zookeeper 来保存相关配置信息，Kafka及Zookeeper 依赖Java 运行环境，从oracle网站下载JDK 安装包，解压安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf jdk-8u65-linux-x64.tar.gz</span><br><span class=\"line\">mv jdk1.8.0_65 java</span><br></pre></td></tr></table></figure>\n\n<p>设置Java 环境变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/opt/java</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure>\n\n<p>也可以选择yum install安装，相应设置环境变量。</p>\n<h2 id=\"安装Kafka\"><a href=\"#安装Kafka\" class=\"headerlink\" title=\"安装Kafka\"></a>安装Kafka</h2><p>从官网下载Kafka 安装包，解压安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf kafka_2.11-0.8.2.2.tgz</span><br><span class=\"line\">mv kafka_2.11-0.8.2.2 kafka</span><br><span class=\"line\">cd kafka</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能验证\"><a href=\"#功能验证\" class=\"headerlink\" title=\"功能验证\"></a>功能验证</h2><p>1.启动Zookeeper</p>\n<p>使用安装包中的脚本启动单节点Zookeeper 实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br><span class=\"line\">[2015-10-26 04:26:59,585] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)....</span><br></pre></td></tr></table></figure>\n\n<p>2.启动Kafka 服务</p>\n<p>使用kafka-server-start.sh 启动kafka 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties</span><br><span class=\"line\">[2015-10-26 04:28:56,115] INFO Verifying properties (kafka.utils.VerifiableProperties) [2015-10-26 04:28:56,141] INFO Property broker.id is overridden to 0 (kafka.utils.VerifiableProperties)</span><br></pre></td></tr></table></figure>\n\n<p>3.创建topic</p>\n<p>使用kafka-topics.sh 创建单分区单副本的topic test：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"4\">\n<li>查看topic：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"5\">\n<li>产生消息</li>\n</ol>\n<p>使用kafka-console-producer.sh 发送消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class=\"line\">Hello world！ Hello Kafka</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>消费消息</li>\n</ol>\n<p>使用kafka-console-consumer.sh 接收消息并在终端打印：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"单机多broker-集群配置\"><a href=\"#单机多broker-集群配置\" class=\"headerlink\" title=\"单机多broker 集群配置\"></a>单机多broker 集群配置</h3><p>利用单节点部署多个broker。 不同的broker 设置不同的 id，监听端口及日志目录。 例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp config/server.properties config/server-1.properties</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/server-1.properties:</span><br><span class=\"line\">    broker.id=1</span><br><span class=\"line\">    port=9093</span><br><span class=\"line\">    log.dir=/tmp/kafka-logs-1</span><br></pre></td></tr></table></figure>\n\n<p>启动Kafka服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server-1.properties &amp;</span><br></pre></td></tr></table></figure>\n\n<p>启动多个服务，按上文类似方式产生和消费消息。</p>\n<h3 id=\"多机多broker-集群配置\"><a href=\"#多机多broker-集群配置\" class=\"headerlink\" title=\"多机多broker 集群配置\"></a>多机多broker 集群配置</h3><p>分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。 例如：<br>在10.4.253.22，10.4.253.23，10.4.253.24三台机器部署，Zookeeper配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLimit=5</span><br><span class=\"line\">syncLimit=2</span><br><span class=\"line\">server.1=10.4.253.22:2888:3888</span><br><span class=\"line\">server.2=10.4.253.23:2888:3888</span><br><span class=\"line\">server.3=10.4.253.24:2888:3888</span><br></pre></td></tr></table></figure>\n\n<p>分别配置多个机器上的Kafka服务 设置不同的broke id，zookeeper.connect设置如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.connect=10.4.253.22:2181,10.4.253.23:2181,10.4.253.24:2181</span><br></pre></td></tr></table></figure>\n\n<p>启动Zookeeper与Kafka服务，按上文方式产生和消费消息，验证集群功能。</p>\n","site":{"data":{}},"length":2168,"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Kafka是一种高吞吐的分布式发布订阅消息系统，能够替代传统的消息队列用于解耦合数据处理，缓存未处理消息等，同时具有更高的吞吐率，支持分区、多副本、冗余，因此被广泛用于大规模消息数据处理应用。Kafka支持Java 及多种其它语言客户端，可与Hadoop、Storm、Spark等其它大数据工具结合使用。</p>\n<p>本教程主要介绍Kafka 在Centos 7上的安装和使用，包括功能验证和集群的简单配置。</p>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>Kafka 使用Zookeeper 来保存相关配置信息，Kafka及Zookeeper 依赖Java 运行环境，从oracle网站下载JDK 安装包，解压安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf jdk-8u65-linux-x64.tar.gz</span><br><span class=\"line\">mv jdk1.8.0_65 java</span><br></pre></td></tr></table></figure>\n\n<p>设置Java 环境变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=/opt/java</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure>\n\n<p>也可以选择yum install安装，相应设置环境变量。</p>\n<h2 id=\"安装Kafka\"><a href=\"#安装Kafka\" class=\"headerlink\" title=\"安装Kafka\"></a>安装Kafka</h2><p>从官网下载Kafka 安装包，解压安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf kafka_2.11-0.8.2.2.tgz</span><br><span class=\"line\">mv kafka_2.11-0.8.2.2 kafka</span><br><span class=\"line\">cd kafka</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"功能验证\"><a href=\"#功能验证\" class=\"headerlink\" title=\"功能验证\"></a>功能验证</h2><p>1.启动Zookeeper</p>\n<p>使用安装包中的脚本启动单节点Zookeeper 实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br><span class=\"line\">[2015-10-26 04:26:59,585] INFO Reading configuration from: config/zookeeper.properties (org.apache.zookeeper.server.quorum.QuorumPeerConfig)....</span><br></pre></td></tr></table></figure>\n\n<p>2.启动Kafka 服务</p>\n<p>使用kafka-server-start.sh 启动kafka 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties</span><br><span class=\"line\">[2015-10-26 04:28:56,115] INFO Verifying properties (kafka.utils.VerifiableProperties) [2015-10-26 04:28:56,141] INFO Property broker.id is overridden to 0 (kafka.utils.VerifiableProperties)</span><br></pre></td></tr></table></figure>\n\n<p>3.创建topic</p>\n<p>使用kafka-topics.sh 创建单分区单副本的topic test：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"4\">\n<li>查看topic：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"5\">\n<li>产生消息</li>\n</ol>\n<p>使用kafka-console-producer.sh 发送消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class=\"line\">Hello world！ Hello Kafka</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>消费消息</li>\n</ol>\n<p>使用kafka-console-consumer.sh 接收消息并在终端打印：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h2><h3 id=\"单机多broker-集群配置\"><a href=\"#单机多broker-集群配置\" class=\"headerlink\" title=\"单机多broker 集群配置\"></a>单机多broker 集群配置</h3><p>利用单节点部署多个broker。 不同的broker 设置不同的 id，监听端口及日志目录。 例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp config/server.properties config/server-1.properties</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/server-1.properties:</span><br><span class=\"line\">    broker.id=1</span><br><span class=\"line\">    port=9093</span><br><span class=\"line\">    log.dir=/tmp/kafka-logs-1</span><br></pre></td></tr></table></figure>\n\n<p>启动Kafka服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server-1.properties &amp;</span><br></pre></td></tr></table></figure>\n\n<p>启动多个服务，按上文类似方式产生和消费消息。</p>\n<h3 id=\"多机多broker-集群配置\"><a href=\"#多机多broker-集群配置\" class=\"headerlink\" title=\"多机多broker 集群配置\"></a>多机多broker 集群配置</h3><p>分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。 例如：<br>在10.4.253.22，10.4.253.23，10.4.253.24三台机器部署，Zookeeper配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLimit=5</span><br><span class=\"line\">syncLimit=2</span><br><span class=\"line\">server.1=10.4.253.22:2888:3888</span><br><span class=\"line\">server.2=10.4.253.23:2888:3888</span><br><span class=\"line\">server.3=10.4.253.24:2888:3888</span><br></pre></td></tr></table></figure>\n\n<p>分别配置多个机器上的Kafka服务 设置不同的broke id，zookeeper.connect设置如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.connect=10.4.253.22:2181,10.4.253.23:2181,10.4.253.24:2181</span><br></pre></td></tr></table></figure>\n\n<p>启动Zookeeper与Kafka服务，按上文方式产生和消费消息，验证集群功能。</p>\n"},{"title":"在linux上安装rabbitmq","date":"2018-08-17T00:00:00.000Z","url":"install-rabbitmq-on-linux","description":"最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。","_content":"\n最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。\n\n## 环境说明\n\n服务器系统是centos7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP\nC扩展，所以也补充一下PHP的版本，是7.1.19。\n\n## 安装RabbitMQ服务端\n\nRabbitMQ服务端的安装就比较简单了，只需要通过yum包管理器安装即可。安装完成之后，启动RabbitMQ.\n\n```\nyum install rabbitmq-server -y\nsystemctl start rabbitmq-server\n```\n\n如果提示找不到RabbitMQ包，可先安装EPEL源之后，再执行上面的步骤。\n\n```\nyum install epel-release -y\n```\n\nEPEL源虽然不是官方维护的源，但是却也是一个第三方里最大的一个源。它不仅提供了大量的RPM包，且绝大多数RPM包要比官方源的RPM包版本更新，是一个RHEL\n及衍生发行版如 CentOS、Scientific Linux最可靠的一个源！\n\n## 安装rabbitmq-c\n\nRabbitMQ对应的PHP C扩展amqp是基于C客户端rabbitmq-c开发的，所以，安装amqp之前，我们必须把rabbitmq-c安装上。当前最新版本是v0.9.0。\n\n```\nwget https://github.com/alanxz/rabbitmq-c/archive/v0.9.0.tar.gz\ntar xzf v0.9.0.tar.gz\ncd rabbitmq-c*\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..\ncmake --build .  --target install\nln -s /usr/local/rabbitmq-c/lib64 /usr/local/rabbitmq-c/lib\n```\n\ncmake是一个很好用的一个编译工具，它最大的特点就是无关平台，即跨平台性。上面的cmake命令作用在于生成Makefile。-DCMAKE_INSTALL_PREFIX，可以拆分看成-D和CMAKE_INSTALL_PREFIX。CMAKE_INSTALL_PREFIX是一个变量，类似于在使用configure脚本时候用的PREFIX。\n\n至于给lib64创建软连接，是因为在编译安装amqp时候，系统会到/usr/local/rabbitmq-c/lib扫描，查找依赖库，而不巧的是压根没有/usr/local/rabbitmq-c/lib目录。\n\n## 安装amqp\n\n```\nwget https://pecl.php.net/get/amqp-1.9.3.tgz\ncd amqp-1.9.3\nphpize\n./configure --with-php-config=/usr/local/php/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\nmake\nmake install\n```\n\n## 加载amqp\n\n```\necho 'extension=amqp.so' >> /usr/local/php/etc/php.ini\nservice php-fpm restart\n```\n\n## 最后验证一下amqp正常加载\n\n```\nphp -m\n```\n\n发现有amqp，那就OK了！","source":"_posts/在linux上安装rabbitmq.md","raw":"---\ntitle: 在linux上安装rabbitmq\ndate: 2018-08-17 08:00:00\ntags: \n  - rabbitmq\n  - 队列\ncategories:\n  - 技术\nurl: install-rabbitmq-on-linux\ndescription: 最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。\n---\n\n最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。\n\n## 环境说明\n\n服务器系统是centos7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP\nC扩展，所以也补充一下PHP的版本，是7.1.19。\n\n## 安装RabbitMQ服务端\n\nRabbitMQ服务端的安装就比较简单了，只需要通过yum包管理器安装即可。安装完成之后，启动RabbitMQ.\n\n```\nyum install rabbitmq-server -y\nsystemctl start rabbitmq-server\n```\n\n如果提示找不到RabbitMQ包，可先安装EPEL源之后，再执行上面的步骤。\n\n```\nyum install epel-release -y\n```\n\nEPEL源虽然不是官方维护的源，但是却也是一个第三方里最大的一个源。它不仅提供了大量的RPM包，且绝大多数RPM包要比官方源的RPM包版本更新，是一个RHEL\n及衍生发行版如 CentOS、Scientific Linux最可靠的一个源！\n\n## 安装rabbitmq-c\n\nRabbitMQ对应的PHP C扩展amqp是基于C客户端rabbitmq-c开发的，所以，安装amqp之前，我们必须把rabbitmq-c安装上。当前最新版本是v0.9.0。\n\n```\nwget https://github.com/alanxz/rabbitmq-c/archive/v0.9.0.tar.gz\ntar xzf v0.9.0.tar.gz\ncd rabbitmq-c*\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..\ncmake --build .  --target install\nln -s /usr/local/rabbitmq-c/lib64 /usr/local/rabbitmq-c/lib\n```\n\ncmake是一个很好用的一个编译工具，它最大的特点就是无关平台，即跨平台性。上面的cmake命令作用在于生成Makefile。-DCMAKE_INSTALL_PREFIX，可以拆分看成-D和CMAKE_INSTALL_PREFIX。CMAKE_INSTALL_PREFIX是一个变量，类似于在使用configure脚本时候用的PREFIX。\n\n至于给lib64创建软连接，是因为在编译安装amqp时候，系统会到/usr/local/rabbitmq-c/lib扫描，查找依赖库，而不巧的是压根没有/usr/local/rabbitmq-c/lib目录。\n\n## 安装amqp\n\n```\nwget https://pecl.php.net/get/amqp-1.9.3.tgz\ncd amqp-1.9.3\nphpize\n./configure --with-php-config=/usr/local/php/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\nmake\nmake install\n```\n\n## 加载amqp\n\n```\necho 'extension=amqp.so' >> /usr/local/php/etc/php.ini\nservice php-fpm restart\n```\n\n## 最后验证一下amqp正常加载\n\n```\nphp -m\n```\n\n发现有amqp，那就OK了！","slug":"在linux上安装rabbitmq","published":1,"updated":"2022-05-12T17:07:33.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6aul001hlvtdby89cx0d","content":"<p>最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>服务器系统是centos7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP<br>C扩展，所以也补充一下PHP的版本，是7.1.19。</p>\n<h2 id=\"安装RabbitMQ服务端\"><a href=\"#安装RabbitMQ服务端\" class=\"headerlink\" title=\"安装RabbitMQ服务端\"></a>安装RabbitMQ服务端</h2><p>RabbitMQ服务端的安装就比较简单了，只需要通过yum包管理器安装即可。安装完成之后，启动RabbitMQ.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install rabbitmq-server -y</span><br><span class=\"line\">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>如果提示找不到RabbitMQ包，可先安装EPEL源之后，再执行上面的步骤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release -y</span><br></pre></td></tr></table></figure>\n\n<p>EPEL源虽然不是官方维护的源，但是却也是一个第三方里最大的一个源。它不仅提供了大量的RPM包，且绝大多数RPM包要比官方源的RPM包版本更新，是一个RHEL<br>及衍生发行版如 CentOS、Scientific Linux最可靠的一个源！</p>\n<h2 id=\"安装rabbitmq-c\"><a href=\"#安装rabbitmq-c\" class=\"headerlink\" title=\"安装rabbitmq-c\"></a>安装rabbitmq-c</h2><p>RabbitMQ对应的PHP C扩展amqp是基于C客户端rabbitmq-c开发的，所以，安装amqp之前，我们必须把rabbitmq-c安装上。当前最新版本是v0.9.0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/alanxz/rabbitmq-c/archive/v0.9.0.tar.gz</span><br><span class=\"line\">tar xzf v0.9.0.tar.gz</span><br><span class=\"line\">cd rabbitmq-c*</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..</span><br><span class=\"line\">cmake --build .  --target install</span><br><span class=\"line\">ln -s /usr/local/rabbitmq-c/lib64 /usr/local/rabbitmq-c/lib</span><br></pre></td></tr></table></figure>\n\n<p>cmake是一个很好用的一个编译工具，它最大的特点就是无关平台，即跨平台性。上面的cmake命令作用在于生成Makefile。-DCMAKE_INSTALL_PREFIX，可以拆分看成-D和CMAKE_INSTALL_PREFIX。CMAKE_INSTALL_PREFIX是一个变量，类似于在使用configure脚本时候用的PREFIX。</p>\n<p>至于给lib64创建软连接，是因为在编译安装amqp时候，系统会到&#x2F;usr&#x2F;local&#x2F;rabbitmq-c&#x2F;lib扫描，查找依赖库，而不巧的是压根没有&#x2F;usr&#x2F;local&#x2F;rabbitmq-c&#x2F;lib目录。</p>\n<h2 id=\"安装amqp\"><a href=\"#安装amqp\" class=\"headerlink\" title=\"安装amqp\"></a>安装amqp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pecl.php.net/get/amqp-1.9.3.tgz</span><br><span class=\"line\">cd amqp-1.9.3</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure --with-php-config=/usr/local/php/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载amqp\"><a href=\"#加载amqp\" class=\"headerlink\" title=\"加载amqp\"></a>加载amqp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;extension=amqp.so&#x27; &gt;&gt; /usr/local/php/etc/php.ini</span><br><span class=\"line\">service php-fpm restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后验证一下amqp正常加载\"><a href=\"#最后验证一下amqp正常加载\" class=\"headerlink\" title=\"最后验证一下amqp正常加载\"></a>最后验证一下amqp正常加载</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m</span><br></pre></td></tr></table></figure>\n\n<p>发现有amqp，那就OK了！</p>\n","site":{"data":{}},"length":1497,"excerpt":"","more":"<p>最近，在一个项目里面用到了RabbitMQ。消息队列用过不少，不过，RabbitMQ还真的是第一次接触。第一次也碰上了一个很有意思的小地方。</p>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>服务器系统是centos7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP<br>C扩展，所以也补充一下PHP的版本，是7.1.19。</p>\n<h2 id=\"安装RabbitMQ服务端\"><a href=\"#安装RabbitMQ服务端\" class=\"headerlink\" title=\"安装RabbitMQ服务端\"></a>安装RabbitMQ服务端</h2><p>RabbitMQ服务端的安装就比较简单了，只需要通过yum包管理器安装即可。安装完成之后，启动RabbitMQ.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install rabbitmq-server -y</span><br><span class=\"line\">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>如果提示找不到RabbitMQ包，可先安装EPEL源之后，再执行上面的步骤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release -y</span><br></pre></td></tr></table></figure>\n\n<p>EPEL源虽然不是官方维护的源，但是却也是一个第三方里最大的一个源。它不仅提供了大量的RPM包，且绝大多数RPM包要比官方源的RPM包版本更新，是一个RHEL<br>及衍生发行版如 CentOS、Scientific Linux最可靠的一个源！</p>\n<h2 id=\"安装rabbitmq-c\"><a href=\"#安装rabbitmq-c\" class=\"headerlink\" title=\"安装rabbitmq-c\"></a>安装rabbitmq-c</h2><p>RabbitMQ对应的PHP C扩展amqp是基于C客户端rabbitmq-c开发的，所以，安装amqp之前，我们必须把rabbitmq-c安装上。当前最新版本是v0.9.0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/alanxz/rabbitmq-c/archive/v0.9.0.tar.gz</span><br><span class=\"line\">tar xzf v0.9.0.tar.gz</span><br><span class=\"line\">cd rabbitmq-c*</span><br><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..</span><br><span class=\"line\">cmake --build .  --target install</span><br><span class=\"line\">ln -s /usr/local/rabbitmq-c/lib64 /usr/local/rabbitmq-c/lib</span><br></pre></td></tr></table></figure>\n\n<p>cmake是一个很好用的一个编译工具，它最大的特点就是无关平台，即跨平台性。上面的cmake命令作用在于生成Makefile。-DCMAKE_INSTALL_PREFIX，可以拆分看成-D和CMAKE_INSTALL_PREFIX。CMAKE_INSTALL_PREFIX是一个变量，类似于在使用configure脚本时候用的PREFIX。</p>\n<p>至于给lib64创建软连接，是因为在编译安装amqp时候，系统会到&#x2F;usr&#x2F;local&#x2F;rabbitmq-c&#x2F;lib扫描，查找依赖库，而不巧的是压根没有&#x2F;usr&#x2F;local&#x2F;rabbitmq-c&#x2F;lib目录。</p>\n<h2 id=\"安装amqp\"><a href=\"#安装amqp\" class=\"headerlink\" title=\"安装amqp\"></a>安装amqp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pecl.php.net/get/amqp-1.9.3.tgz</span><br><span class=\"line\">cd amqp-1.9.3</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure --with-php-config=/usr/local/php/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载amqp\"><a href=\"#加载amqp\" class=\"headerlink\" title=\"加载amqp\"></a>加载amqp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;extension=amqp.so&#x27; &gt;&gt; /usr/local/php/etc/php.ini</span><br><span class=\"line\">service php-fpm restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后验证一下amqp正常加载\"><a href=\"#最后验证一下amqp正常加载\" class=\"headerlink\" title=\"最后验证一下amqp正常加载\"></a>最后验证一下amqp正常加载</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m</span><br></pre></td></tr></table></figure>\n\n<p>发现有amqp，那就OK了！</p>\n"},{"title":"好用轻量的内网穿透软件NPS","date":"2020-03-04T00:16:00.000Z","photos":["/images/b9be3cae2d0a1c308d21909145aebf70.jpeg"],"url":"a-light-weight-network-penetration-tool-nps","description":"内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。","_content":"\n> 内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。\n\n## 内网穿透干嘛\n\n干啥用呢，说几个使用场景吧。第一，公司电脑上有工作需要的文件，家里电脑没有，突然需要工作需要的文件，可以通过内网穿透实现文件访问获取到需要的文件；第二，公司电脑上有特定的程序，在家里电脑安装不了，突然需要使用那个程序，可以通过内网穿透实现远程控制公司电脑使用程序；第三，公司的电脑需要开机，那么可以通过内网穿透远程访问路由器（作为堡垒机），利用WOL（局域网唤醒）唤醒目标电脑；第四，想玩的游戏的服务器架设在国内，国外玩起来很卡，那么可以通过内网穿透代理UDP，实现游戏加速……\n\n## 服务端\n\nNPS服务端的安装非常简单，这里给出简单的步骤，同时给出一个简单的配置。我的服务器是Linux 64Bit，其他的平台类似。当前，NPS最新版本是0.26.4。\n\n```\nmkdir -p /data/nps #创建目录\nwget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_server.tar.gz -O /data/linux_amd64_server.tar.gz #下载文件\ntar xzf /data/linux_amd64_server.tar.gz -C /data/nps/ #解压文件\n```\n\n编辑配置/data/nps/conf/nps.conf文件，修改成如下（public_vkey、web_username和web_password分别代表验证密钥、web管理需要的用户名和密码，自行修改）：\n\n```\nappname = nps\n#Boot mode(dev|pro)\nrunmode = pro\n\n#HTTP(S) proxy port, no startup if empty\nhttp_proxy_ip=0.0.0.0\nhttp_proxy_port=20080\nhttps_proxy_port=20443\nhttps_just_proxy=true\n#default https certificate setting\nhttps_default_cert_file=conf/server.pem\nhttps_default_key_file=conf/server.key\n\n##bridge\nbridge_type=tcp\nbridge_port=8024\nbridge_ip=0.0.0.0\n\n# Public password, which clients can use to connect to the server\n# After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.\npublic_vkey=leochan1234556789\n\n#Traffic data persistence interval(minute)\n#Ignorance means no persistence\n#flow_store_interval=1\n\n# log level LevelEmergency->0  LevelAlert->1 LevelCritical->2 LevelError->3 LevelWarning->4 LevelNotice->5 LevelInformational->6 LevelDebug->7\nlog_level=7\n#log_path=nps.log\n\n#Whether to restrict IP access, true or false or ignore\n#ip_limit=true\n\n#p2p\n#p2p_ip=127.0.0.1\n#p2p_port=6000\n\n#web\n#web_host=host\nweb_username=yonghuming\nweb_password=mima123456\nweb_port = 8080\nweb_ip=0.0.0.0\nweb_base_url=\nweb_open_ssl=false\nweb_cert_file=conf/server.pem\nweb_key_file=conf/server.key\n# if web under proxy use sub path. like http://host/nps need this.\n#web_base_url=/nps\n\n#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)\n#Remove comments if needed\n#auth_key=test\nauth_crypt_key =1234567812345678\n\n#allow_ports=9001-9009,10001,11000-12000\n\n#Web management multi-user login\nallow_user_login=false\nallow_user_register=false\nallow_user_change_username=false\n\n\n#extension\nallow_flow_limit=false\nallow_rate_limit=false\nallow_tunnel_num_limit=false\nallow_local_proxy=false\nallow_connection_num_limit=false\nallow_multi_ip=false\nsystem_info_display=false\n\n#c\nhttp_cache=true\nhttp_cache_length=100\n\n#get origin ip\nhttp_add_origin_header=false\n\n#pprof debug options\n#pprof_ip=0.0.0.0\n#pprof_port=9999\n```\n\n\n继续执行以下命令完成安装并启动！！\n\n```\ncd /data/nps #切换目录\n./nps install #开始安装\nnps start #启动引擎\n```\n\n\n## 反向代理\n\n反向代理，我用的是Caddy，因为简单高效，最重要的是不用管证书，可以自动获取更新SSL证书。Caddy的2.0版本已经出来，但还处于beta版本，所以我用的是1.0系列版本。Caddy自带启动脚本，我用的服务器系统是centos 7.4 64bit，所以，我用到的启动脚本是init/linux-systemd/caddy.service。根据启动脚本的内容，得知需要把caddy可执行文件放到/usr/local/bin目录，并且确定配置文件是/etc/caddy/Caddyfile。\n\n```\nmkdir -p /data/caddy #建立基地\nwget https://github.com/caddyserver/caddy/releases/download/v1.0.3/caddy_v1.0.3_linux_amd64.tar.gz -O /data/caddy/caddy_v1.0.3_linux_amd64.tar.gz #运货到基地\ncp /data/caddy/caddy /usr/local/bin/ #拷贝可执行文件到目标目录\nchmod a+x /usr/local/bin/caddy #更改权限\ncat /data/caddy/init/linux-systemd/caddy.service > /etc/systemd/system/caddy.service #搬动启动脚本内容\nsed -i  ’s/www-data/root/g’ /etc/systemd/system/caddy.service #替换caddy运行用户，懒得去处理权限问题\nchmod 755 /etc/systemd/system/caddy.service #更改脚本文件权限\nsystemctl enable caddy.service #自启动\nmkdir -p /etc/ssl/caddy #建立caddy证书存取目录\nmkdir -p /var/log/caddy #建立日志目录\nmkdir -p /etc/caddy #建立以下配置存放目录\ntouch /etc/caddy/Caddyfile #建立配置文件\n```\n\n修改/etc/caddy/Caddyfile文件并保存，内容如下（nps.domain.tls是绑定的域名，10000@163.com\n是邮箱地址，请按照自己的实际内容修改）：\n\n```\nnps.domain.tls{\n  gzip\n  redir 301{\n    if {>X-Forwarded-Proto} is http\n    / https://nps.domain.ltd{uri}                  \n  }\n  tls 10000@163.com                                                    \n  log /var/log/caddy/nps.domain.tls.log{\n    rotate_size 5\n    rotate_age 5\n    rotate_keep 2\n    rotate_compress\n  }\n  proxy / 127.0.0.1:8080{\n    transparent\n  }\n}\n```\n\n## 启动服务端\n\n```\necho $PATH #查看以下/usr/local/bin是否包含在环境变量里，如果没有匹配，请执行下三步的环境变量配置和环境变量生效，否则跳过；\necho ‘PATH=$PATH:/usr/local/bin’ >> ~/.bash_profile #环境变量配置\necho ‘export PATH’ >> ~/.bash_profile #环境变量配置\nsource ~/.bash_profile #环境变量生效\nsystemctl start caddy.service #启动caddy\n```\n\n## caddy网页端管理\n\n访问“https://nps.domain.tls”，输入上面配置文件里面的web_username和web_password登录。点击左边菜单“客户端”，点击“新增”按钮新增客户端。按照下图填写表单，填写好了，点击“新增”按钮保存。\n\n![新增客户端](/images/nps1.jpg \"新增客户端\")\n\n![查看客户端ID](/images/nps3.jpg \"查看客户端ID\")\n\n## 客户端\n\n大部分的客户端安装都比较简单，也基本是一键安装。这里还是以Linux 64Bit为例安装客户端。\n\n```\nmkdir -p /data/npc #找块地\nwget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_client.tar.gz -O /data/linux_amd64_client.tar.gz #拿到货\ntar xzf /data/linux_amd64_client.tar.gz -C /data/npc/ #卸货\n```\n\n编辑配置/data/npc/conf/npc.conf，内容如下（vkey是添加客户端时候需要用到的，详看caddy网页端管理那一步的图片，8.8.8.8换成真实的服务器IP地址）\n\n```\n[common]\nserver_addr=8.8.8.8:8024\nconn_type=tcp\nvkey=leochan.me\nauto_reconnection=true\nmax_conn=1000\nflow_limit=1000\nrate_limit=1000\ncrypt=true\ncompress=true\n```\n\n执行以下命令，完成安装并启动客户端\n\n```\ncd /data/npc #找到解压目录\n./npc install -config=/data/npc/conf/npc.conf #执行安装\nnpc start #启动客户端\n```\n\n## 域名解析\n\n假设，本地局域网有一台机器，局域网IP是192.168.2.50，服务绑定的端口号是5000，绑定的域名是file.domain.tls。那么，请按照下图配置：\n\n![新增主机](/images/nps2.jpg \"新增主机\")\n\n\n配置好之后，我们回到反向代理那一步，处理一下域名。编辑/etc/caddy/Caddyfile，追加如下内容：\n\n```\nfile.domain.tls {\n  gzip\n  redir  301 {\n    if {>X-Forwarded-Proto} is http\n    / https://{host}{uri}\n  }\n  tls 10000@163.com\n  log /var/log/caddy/nps.log {\n    rotate_size 5\n    rotate_age 5\n    rotate_keep 2\n    rotate_compress\n  }\n  proxy / 127.0.0.1:20080 {\n    ransparent\n  }\n}\n```\n\n重启一下caddy，收工了！！\n\n## 后话\n\n需要开辟另一篇来做以下nps的其他代理的介绍！！","source":"_posts/好用轻量的内网穿透软件NPS.md","raw":"---\ntitle: 好用轻量的内网穿透软件NPS\ndate: 2020-03-04 08:16:00\ntags: \n  - nps\n  - 内网穿透\ncategories:\n  - 技术\nphotos:\n  - \"/images/b9be3cae2d0a1c308d21909145aebf70.jpeg\"\nurl: a-light-weight-network-penetration-tool-nps\ndescription: 内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。\n---\n\n> 内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。\n\n## 内网穿透干嘛\n\n干啥用呢，说几个使用场景吧。第一，公司电脑上有工作需要的文件，家里电脑没有，突然需要工作需要的文件，可以通过内网穿透实现文件访问获取到需要的文件；第二，公司电脑上有特定的程序，在家里电脑安装不了，突然需要使用那个程序，可以通过内网穿透实现远程控制公司电脑使用程序；第三，公司的电脑需要开机，那么可以通过内网穿透远程访问路由器（作为堡垒机），利用WOL（局域网唤醒）唤醒目标电脑；第四，想玩的游戏的服务器架设在国内，国外玩起来很卡，那么可以通过内网穿透代理UDP，实现游戏加速……\n\n## 服务端\n\nNPS服务端的安装非常简单，这里给出简单的步骤，同时给出一个简单的配置。我的服务器是Linux 64Bit，其他的平台类似。当前，NPS最新版本是0.26.4。\n\n```\nmkdir -p /data/nps #创建目录\nwget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_server.tar.gz -O /data/linux_amd64_server.tar.gz #下载文件\ntar xzf /data/linux_amd64_server.tar.gz -C /data/nps/ #解压文件\n```\n\n编辑配置/data/nps/conf/nps.conf文件，修改成如下（public_vkey、web_username和web_password分别代表验证密钥、web管理需要的用户名和密码，自行修改）：\n\n```\nappname = nps\n#Boot mode(dev|pro)\nrunmode = pro\n\n#HTTP(S) proxy port, no startup if empty\nhttp_proxy_ip=0.0.0.0\nhttp_proxy_port=20080\nhttps_proxy_port=20443\nhttps_just_proxy=true\n#default https certificate setting\nhttps_default_cert_file=conf/server.pem\nhttps_default_key_file=conf/server.key\n\n##bridge\nbridge_type=tcp\nbridge_port=8024\nbridge_ip=0.0.0.0\n\n# Public password, which clients can use to connect to the server\n# After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.\npublic_vkey=leochan1234556789\n\n#Traffic data persistence interval(minute)\n#Ignorance means no persistence\n#flow_store_interval=1\n\n# log level LevelEmergency->0  LevelAlert->1 LevelCritical->2 LevelError->3 LevelWarning->4 LevelNotice->5 LevelInformational->6 LevelDebug->7\nlog_level=7\n#log_path=nps.log\n\n#Whether to restrict IP access, true or false or ignore\n#ip_limit=true\n\n#p2p\n#p2p_ip=127.0.0.1\n#p2p_port=6000\n\n#web\n#web_host=host\nweb_username=yonghuming\nweb_password=mima123456\nweb_port = 8080\nweb_ip=0.0.0.0\nweb_base_url=\nweb_open_ssl=false\nweb_cert_file=conf/server.pem\nweb_key_file=conf/server.key\n# if web under proxy use sub path. like http://host/nps need this.\n#web_base_url=/nps\n\n#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)\n#Remove comments if needed\n#auth_key=test\nauth_crypt_key =1234567812345678\n\n#allow_ports=9001-9009,10001,11000-12000\n\n#Web management multi-user login\nallow_user_login=false\nallow_user_register=false\nallow_user_change_username=false\n\n\n#extension\nallow_flow_limit=false\nallow_rate_limit=false\nallow_tunnel_num_limit=false\nallow_local_proxy=false\nallow_connection_num_limit=false\nallow_multi_ip=false\nsystem_info_display=false\n\n#c\nhttp_cache=true\nhttp_cache_length=100\n\n#get origin ip\nhttp_add_origin_header=false\n\n#pprof debug options\n#pprof_ip=0.0.0.0\n#pprof_port=9999\n```\n\n\n继续执行以下命令完成安装并启动！！\n\n```\ncd /data/nps #切换目录\n./nps install #开始安装\nnps start #启动引擎\n```\n\n\n## 反向代理\n\n反向代理，我用的是Caddy，因为简单高效，最重要的是不用管证书，可以自动获取更新SSL证书。Caddy的2.0版本已经出来，但还处于beta版本，所以我用的是1.0系列版本。Caddy自带启动脚本，我用的服务器系统是centos 7.4 64bit，所以，我用到的启动脚本是init/linux-systemd/caddy.service。根据启动脚本的内容，得知需要把caddy可执行文件放到/usr/local/bin目录，并且确定配置文件是/etc/caddy/Caddyfile。\n\n```\nmkdir -p /data/caddy #建立基地\nwget https://github.com/caddyserver/caddy/releases/download/v1.0.3/caddy_v1.0.3_linux_amd64.tar.gz -O /data/caddy/caddy_v1.0.3_linux_amd64.tar.gz #运货到基地\ncp /data/caddy/caddy /usr/local/bin/ #拷贝可执行文件到目标目录\nchmod a+x /usr/local/bin/caddy #更改权限\ncat /data/caddy/init/linux-systemd/caddy.service > /etc/systemd/system/caddy.service #搬动启动脚本内容\nsed -i  ’s/www-data/root/g’ /etc/systemd/system/caddy.service #替换caddy运行用户，懒得去处理权限问题\nchmod 755 /etc/systemd/system/caddy.service #更改脚本文件权限\nsystemctl enable caddy.service #自启动\nmkdir -p /etc/ssl/caddy #建立caddy证书存取目录\nmkdir -p /var/log/caddy #建立日志目录\nmkdir -p /etc/caddy #建立以下配置存放目录\ntouch /etc/caddy/Caddyfile #建立配置文件\n```\n\n修改/etc/caddy/Caddyfile文件并保存，内容如下（nps.domain.tls是绑定的域名，10000@163.com\n是邮箱地址，请按照自己的实际内容修改）：\n\n```\nnps.domain.tls{\n  gzip\n  redir 301{\n    if {>X-Forwarded-Proto} is http\n    / https://nps.domain.ltd{uri}                  \n  }\n  tls 10000@163.com                                                    \n  log /var/log/caddy/nps.domain.tls.log{\n    rotate_size 5\n    rotate_age 5\n    rotate_keep 2\n    rotate_compress\n  }\n  proxy / 127.0.0.1:8080{\n    transparent\n  }\n}\n```\n\n## 启动服务端\n\n```\necho $PATH #查看以下/usr/local/bin是否包含在环境变量里，如果没有匹配，请执行下三步的环境变量配置和环境变量生效，否则跳过；\necho ‘PATH=$PATH:/usr/local/bin’ >> ~/.bash_profile #环境变量配置\necho ‘export PATH’ >> ~/.bash_profile #环境变量配置\nsource ~/.bash_profile #环境变量生效\nsystemctl start caddy.service #启动caddy\n```\n\n## caddy网页端管理\n\n访问“https://nps.domain.tls”，输入上面配置文件里面的web_username和web_password登录。点击左边菜单“客户端”，点击“新增”按钮新增客户端。按照下图填写表单，填写好了，点击“新增”按钮保存。\n\n![新增客户端](/images/nps1.jpg \"新增客户端\")\n\n![查看客户端ID](/images/nps3.jpg \"查看客户端ID\")\n\n## 客户端\n\n大部分的客户端安装都比较简单，也基本是一键安装。这里还是以Linux 64Bit为例安装客户端。\n\n```\nmkdir -p /data/npc #找块地\nwget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_client.tar.gz -O /data/linux_amd64_client.tar.gz #拿到货\ntar xzf /data/linux_amd64_client.tar.gz -C /data/npc/ #卸货\n```\n\n编辑配置/data/npc/conf/npc.conf，内容如下（vkey是添加客户端时候需要用到的，详看caddy网页端管理那一步的图片，8.8.8.8换成真实的服务器IP地址）\n\n```\n[common]\nserver_addr=8.8.8.8:8024\nconn_type=tcp\nvkey=leochan.me\nauto_reconnection=true\nmax_conn=1000\nflow_limit=1000\nrate_limit=1000\ncrypt=true\ncompress=true\n```\n\n执行以下命令，完成安装并启动客户端\n\n```\ncd /data/npc #找到解压目录\n./npc install -config=/data/npc/conf/npc.conf #执行安装\nnpc start #启动客户端\n```\n\n## 域名解析\n\n假设，本地局域网有一台机器，局域网IP是192.168.2.50，服务绑定的端口号是5000，绑定的域名是file.domain.tls。那么，请按照下图配置：\n\n![新增主机](/images/nps2.jpg \"新增主机\")\n\n\n配置好之后，我们回到反向代理那一步，处理一下域名。编辑/etc/caddy/Caddyfile，追加如下内容：\n\n```\nfile.domain.tls {\n  gzip\n  redir  301 {\n    if {>X-Forwarded-Proto} is http\n    / https://{host}{uri}\n  }\n  tls 10000@163.com\n  log /var/log/caddy/nps.log {\n    rotate_size 5\n    rotate_age 5\n    rotate_keep 2\n    rotate_compress\n  }\n  proxy / 127.0.0.1:20080 {\n    ransparent\n  }\n}\n```\n\n重启一下caddy，收工了！！\n\n## 后话\n\n需要开辟另一篇来做以下nps的其他代理的介绍！！","slug":"好用轻量的内网穿透软件NPS","published":1,"updated":"2022-05-22T05:55:11.471Z","comments":1,"layout":"post","link":"","_id":"cl3in6av4003qlvtddrz1dvxk","content":"<blockquote>\n<p>内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。</p>\n</blockquote>\n<h2 id=\"内网穿透干嘛\"><a href=\"#内网穿透干嘛\" class=\"headerlink\" title=\"内网穿透干嘛\"></a>内网穿透干嘛</h2><p>干啥用呢，说几个使用场景吧。第一，公司电脑上有工作需要的文件，家里电脑没有，突然需要工作需要的文件，可以通过内网穿透实现文件访问获取到需要的文件；第二，公司电脑上有特定的程序，在家里电脑安装不了，突然需要使用那个程序，可以通过内网穿透实现远程控制公司电脑使用程序；第三，公司的电脑需要开机，那么可以通过内网穿透远程访问路由器（作为堡垒机），利用WOL（局域网唤醒）唤醒目标电脑；第四，想玩的游戏的服务器架设在国内，国外玩起来很卡，那么可以通过内网穿透代理UDP，实现游戏加速……</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>NPS服务端的安装非常简单，这里给出简单的步骤，同时给出一个简单的配置。我的服务器是Linux 64Bit，其他的平台类似。当前，NPS最新版本是0.26.4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nps #创建目录</span><br><span class=\"line\">wget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_server.tar.gz -O /data/linux_amd64_server.tar.gz #下载文件</span><br><span class=\"line\">tar xzf /data/linux_amd64_server.tar.gz -C /data/nps/ #解压文件</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置&#x2F;data&#x2F;nps&#x2F;conf&#x2F;nps.conf文件，修改成如下（public_vkey、web_username和web_password分别代表验证密钥、web管理需要的用户名和密码，自行修改）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appname = nps</span><br><span class=\"line\">#Boot mode(dev|pro)</span><br><span class=\"line\">runmode = pro</span><br><span class=\"line\"></span><br><span class=\"line\">#HTTP(S) proxy port, no startup if empty</span><br><span class=\"line\">http_proxy_ip=0.0.0.0</span><br><span class=\"line\">http_proxy_port=20080</span><br><span class=\"line\">https_proxy_port=20443</span><br><span class=\"line\">https_just_proxy=true</span><br><span class=\"line\">#default https certificate setting</span><br><span class=\"line\">https_default_cert_file=conf/server.pem</span><br><span class=\"line\">https_default_key_file=conf/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">##bridge</span><br><span class=\"line\">bridge_type=tcp</span><br><span class=\"line\">bridge_port=8024</span><br><span class=\"line\">bridge_ip=0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Public password, which clients can use to connect to the server</span><br><span class=\"line\"># After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.</span><br><span class=\"line\">public_vkey=leochan1234556789</span><br><span class=\"line\"></span><br><span class=\"line\">#Traffic data persistence interval(minute)</span><br><span class=\"line\">#Ignorance means no persistence</span><br><span class=\"line\">#flow_store_interval=1</span><br><span class=\"line\"></span><br><span class=\"line\"># log level LevelEmergency-&gt;0  LevelAlert-&gt;1 LevelCritical-&gt;2 LevelError-&gt;3 LevelWarning-&gt;4 LevelNotice-&gt;5 LevelInformational-&gt;6 LevelDebug-&gt;7</span><br><span class=\"line\">log_level=7</span><br><span class=\"line\">#log_path=nps.log</span><br><span class=\"line\"></span><br><span class=\"line\">#Whether to restrict IP access, true or false or ignore</span><br><span class=\"line\">#ip_limit=true</span><br><span class=\"line\"></span><br><span class=\"line\">#p2p</span><br><span class=\"line\">#p2p_ip=127.0.0.1</span><br><span class=\"line\">#p2p_port=6000</span><br><span class=\"line\"></span><br><span class=\"line\">#web</span><br><span class=\"line\">#web_host=host</span><br><span class=\"line\">web_username=yonghuming</span><br><span class=\"line\">web_password=mima123456</span><br><span class=\"line\">web_port = 8080</span><br><span class=\"line\">web_ip=0.0.0.0</span><br><span class=\"line\">web_base_url=</span><br><span class=\"line\">web_open_ssl=false</span><br><span class=\"line\">web_cert_file=conf/server.pem</span><br><span class=\"line\">web_key_file=conf/server.key</span><br><span class=\"line\"># if web under proxy use sub path. like http://host/nps need this.</span><br><span class=\"line\">#web_base_url=/nps</span><br><span class=\"line\"></span><br><span class=\"line\">#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)</span><br><span class=\"line\">#Remove comments if needed</span><br><span class=\"line\">#auth_key=test</span><br><span class=\"line\">auth_crypt_key =1234567812345678</span><br><span class=\"line\"></span><br><span class=\"line\">#allow_ports=9001-9009,10001,11000-12000</span><br><span class=\"line\"></span><br><span class=\"line\">#Web management multi-user login</span><br><span class=\"line\">allow_user_login=false</span><br><span class=\"line\">allow_user_register=false</span><br><span class=\"line\">allow_user_change_username=false</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#extension</span><br><span class=\"line\">allow_flow_limit=false</span><br><span class=\"line\">allow_rate_limit=false</span><br><span class=\"line\">allow_tunnel_num_limit=false</span><br><span class=\"line\">allow_local_proxy=false</span><br><span class=\"line\">allow_connection_num_limit=false</span><br><span class=\"line\">allow_multi_ip=false</span><br><span class=\"line\">system_info_display=false</span><br><span class=\"line\"></span><br><span class=\"line\">#c</span><br><span class=\"line\">http_cache=true</span><br><span class=\"line\">http_cache_length=100</span><br><span class=\"line\"></span><br><span class=\"line\">#get origin ip</span><br><span class=\"line\">http_add_origin_header=false</span><br><span class=\"line\"></span><br><span class=\"line\">#pprof debug options</span><br><span class=\"line\">#pprof_ip=0.0.0.0</span><br><span class=\"line\">#pprof_port=9999</span><br></pre></td></tr></table></figure>\n\n\n<p>继续执行以下命令完成安装并启动！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/nps #切换目录</span><br><span class=\"line\">./nps install #开始安装</span><br><span class=\"line\">nps start #启动引擎</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>反向代理，我用的是Caddy，因为简单高效，最重要的是不用管证书，可以自动获取更新SSL证书。Caddy的2.0版本已经出来，但还处于beta版本，所以我用的是1.0系列版本。Caddy自带启动脚本，我用的服务器系统是centos 7.4 64bit，所以，我用到的启动脚本是init&#x2F;linux-systemd&#x2F;caddy.service。根据启动脚本的内容，得知需要把caddy可执行文件放到&#x2F;usr&#x2F;local&#x2F;bin目录，并且确定配置文件是&#x2F;etc&#x2F;caddy&#x2F;Caddyfile。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/caddy #建立基地</span><br><span class=\"line\">wget https://github.com/caddyserver/caddy/releases/download/v1.0.3/caddy_v1.0.3_linux_amd64.tar.gz -O /data/caddy/caddy_v1.0.3_linux_amd64.tar.gz #运货到基地</span><br><span class=\"line\">cp /data/caddy/caddy /usr/local/bin/ #拷贝可执行文件到目标目录</span><br><span class=\"line\">chmod a+x /usr/local/bin/caddy #更改权限</span><br><span class=\"line\">cat /data/caddy/init/linux-systemd/caddy.service &gt; /etc/systemd/system/caddy.service #搬动启动脚本内容</span><br><span class=\"line\">sed -i  ’s/www-data/root/g’ /etc/systemd/system/caddy.service #替换caddy运行用户，懒得去处理权限问题</span><br><span class=\"line\">chmod 755 /etc/systemd/system/caddy.service #更改脚本文件权限</span><br><span class=\"line\">systemctl enable caddy.service #自启动</span><br><span class=\"line\">mkdir -p /etc/ssl/caddy #建立caddy证书存取目录</span><br><span class=\"line\">mkdir -p /var/log/caddy #建立日志目录</span><br><span class=\"line\">mkdir -p /etc/caddy #建立以下配置存放目录</span><br><span class=\"line\">touch /etc/caddy/Caddyfile #建立配置文件</span><br></pre></td></tr></table></figure>\n\n<p>修改&#x2F;etc&#x2F;caddy&#x2F;Caddyfile文件并保存，内容如下（nps.domain.tls是绑定的域名，<a href=\"mailto:&#49;&#x30;&#48;&#48;&#48;&#64;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;\">&#49;&#x30;&#48;&#48;&#48;&#64;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a><br>是邮箱地址，请按照自己的实际内容修改）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nps.domain.tls&#123;</span><br><span class=\"line\">  gzip</span><br><span class=\"line\">  redir 301&#123;</span><br><span class=\"line\">    if &#123;&gt;X-Forwarded-Proto&#125; is http</span><br><span class=\"line\">    / https://nps.domain.ltd&#123;uri&#125;                  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tls 10000@163.com                                                    </span><br><span class=\"line\">  log /var/log/caddy/nps.domain.tls.log&#123;</span><br><span class=\"line\">    rotate_size 5</span><br><span class=\"line\">    rotate_age 5</span><br><span class=\"line\">    rotate_keep 2</span><br><span class=\"line\">    rotate_compress</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  proxy / 127.0.0.1:8080&#123;</span><br><span class=\"line\">    transparent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动服务端\"><a href=\"#启动服务端\" class=\"headerlink\" title=\"启动服务端\"></a>启动服务端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH #查看以下/usr/local/bin是否包含在环境变量里，如果没有匹配，请执行下三步的环境变量配置和环境变量生效，否则跳过；</span><br><span class=\"line\">echo ‘PATH=$PATH:/usr/local/bin’ &gt;&gt; ~/.bash_profile #环境变量配置</span><br><span class=\"line\">echo ‘export PATH’ &gt;&gt; ~/.bash_profile #环境变量配置</span><br><span class=\"line\">source ~/.bash_profile #环境变量生效</span><br><span class=\"line\">systemctl start caddy.service #启动caddy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"caddy网页端管理\"><a href=\"#caddy网页端管理\" class=\"headerlink\" title=\"caddy网页端管理\"></a>caddy网页端管理</h2><p>访问“<a href=\"https://nps.domain.tls”,输入上面配置文件里面的web_username和web_password登录.点击左边菜单“客户端”,点击“新增”按钮新增客户端.按照下图填写表单,填写好了,点击“新增”按钮保存./\">https://nps.domain.tls”，输入上面配置文件里面的web_username和web_password登录。点击左边菜单“客户端”，点击“新增”按钮新增客户端。按照下图填写表单，填写好了，点击“新增”按钮保存。</a></p>\n<p><img src=\"/images/nps1.jpg\" alt=\"新增客户端\" title=\"新增客户端\"></p>\n<p><img src=\"/images/nps3.jpg\" alt=\"查看客户端ID\" title=\"查看客户端ID\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>大部分的客户端安装都比较简单，也基本是一键安装。这里还是以Linux 64Bit为例安装客户端。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/npc #找块地</span><br><span class=\"line\">wget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_client.tar.gz -O /data/linux_amd64_client.tar.gz #拿到货</span><br><span class=\"line\">tar xzf /data/linux_amd64_client.tar.gz -C /data/npc/ #卸货</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置&#x2F;data&#x2F;npc&#x2F;conf&#x2F;npc.conf，内容如下（vkey是添加客户端时候需要用到的，详看caddy网页端管理那一步的图片，8.8.8.8换成真实的服务器IP地址）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr=8.8.8.8:8024</span><br><span class=\"line\">conn_type=tcp</span><br><span class=\"line\">vkey=leochan.me</span><br><span class=\"line\">auto_reconnection=true</span><br><span class=\"line\">max_conn=1000</span><br><span class=\"line\">flow_limit=1000</span><br><span class=\"line\">rate_limit=1000</span><br><span class=\"line\">crypt=true</span><br><span class=\"line\">compress=true</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，完成安装并启动客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/npc #找到解压目录</span><br><span class=\"line\">./npc install -config=/data/npc/conf/npc.conf #执行安装</span><br><span class=\"line\">npc start #启动客户端</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>假设，本地局域网有一台机器，局域网IP是192.168.2.50，服务绑定的端口号是5000，绑定的域名是file.domain.tls。那么，请按照下图配置：</p>\n<p><img src=\"/images/nps2.jpg\" alt=\"新增主机\" title=\"新增主机\"></p>\n<p>配置好之后，我们回到反向代理那一步，处理一下域名。编辑&#x2F;etc&#x2F;caddy&#x2F;Caddyfile，追加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file.domain.tls &#123;</span><br><span class=\"line\">  gzip</span><br><span class=\"line\">  redir  301 &#123;</span><br><span class=\"line\">    if &#123;&gt;X-Forwarded-Proto&#125; is http</span><br><span class=\"line\">    / https://&#123;host&#125;&#123;uri&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tls 10000@163.com</span><br><span class=\"line\">  log /var/log/caddy/nps.log &#123;</span><br><span class=\"line\">    rotate_size 5</span><br><span class=\"line\">    rotate_age 5</span><br><span class=\"line\">    rotate_keep 2</span><br><span class=\"line\">    rotate_compress</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  proxy / 127.0.0.1:20080 &#123;</span><br><span class=\"line\">    ransparent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启一下caddy，收工了！！</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>需要开辟另一篇来做以下nps的其他代理的介绍！！</p>\n","site":{"data":{}},"length":5621,"excerpt":"","more":"<blockquote>\n<p>内网穿透用过几个了，有用过群晖自带，用过FRP，用过ngrok，用过阿里云DDNS，还尝试用过LEDE自带的Kool DDNS。但是说到最满意的，还是当下使用的NPS。NPS的特点嘛，简单、好用、硬件要求低、轻量，还有配置简单和跨平台性极好。</p>\n</blockquote>\n<h2 id=\"内网穿透干嘛\"><a href=\"#内网穿透干嘛\" class=\"headerlink\" title=\"内网穿透干嘛\"></a>内网穿透干嘛</h2><p>干啥用呢，说几个使用场景吧。第一，公司电脑上有工作需要的文件，家里电脑没有，突然需要工作需要的文件，可以通过内网穿透实现文件访问获取到需要的文件；第二，公司电脑上有特定的程序，在家里电脑安装不了，突然需要使用那个程序，可以通过内网穿透实现远程控制公司电脑使用程序；第三，公司的电脑需要开机，那么可以通过内网穿透远程访问路由器（作为堡垒机），利用WOL（局域网唤醒）唤醒目标电脑；第四，想玩的游戏的服务器架设在国内，国外玩起来很卡，那么可以通过内网穿透代理UDP，实现游戏加速……</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><p>NPS服务端的安装非常简单，这里给出简单的步骤，同时给出一个简单的配置。我的服务器是Linux 64Bit，其他的平台类似。当前，NPS最新版本是0.26.4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nps #创建目录</span><br><span class=\"line\">wget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_server.tar.gz -O /data/linux_amd64_server.tar.gz #下载文件</span><br><span class=\"line\">tar xzf /data/linux_amd64_server.tar.gz -C /data/nps/ #解压文件</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置&#x2F;data&#x2F;nps&#x2F;conf&#x2F;nps.conf文件，修改成如下（public_vkey、web_username和web_password分别代表验证密钥、web管理需要的用户名和密码，自行修改）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appname = nps</span><br><span class=\"line\">#Boot mode(dev|pro)</span><br><span class=\"line\">runmode = pro</span><br><span class=\"line\"></span><br><span class=\"line\">#HTTP(S) proxy port, no startup if empty</span><br><span class=\"line\">http_proxy_ip=0.0.0.0</span><br><span class=\"line\">http_proxy_port=20080</span><br><span class=\"line\">https_proxy_port=20443</span><br><span class=\"line\">https_just_proxy=true</span><br><span class=\"line\">#default https certificate setting</span><br><span class=\"line\">https_default_cert_file=conf/server.pem</span><br><span class=\"line\">https_default_key_file=conf/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">##bridge</span><br><span class=\"line\">bridge_type=tcp</span><br><span class=\"line\">bridge_port=8024</span><br><span class=\"line\">bridge_ip=0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"># Public password, which clients can use to connect to the server</span><br><span class=\"line\"># After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.</span><br><span class=\"line\">public_vkey=leochan1234556789</span><br><span class=\"line\"></span><br><span class=\"line\">#Traffic data persistence interval(minute)</span><br><span class=\"line\">#Ignorance means no persistence</span><br><span class=\"line\">#flow_store_interval=1</span><br><span class=\"line\"></span><br><span class=\"line\"># log level LevelEmergency-&gt;0  LevelAlert-&gt;1 LevelCritical-&gt;2 LevelError-&gt;3 LevelWarning-&gt;4 LevelNotice-&gt;5 LevelInformational-&gt;6 LevelDebug-&gt;7</span><br><span class=\"line\">log_level=7</span><br><span class=\"line\">#log_path=nps.log</span><br><span class=\"line\"></span><br><span class=\"line\">#Whether to restrict IP access, true or false or ignore</span><br><span class=\"line\">#ip_limit=true</span><br><span class=\"line\"></span><br><span class=\"line\">#p2p</span><br><span class=\"line\">#p2p_ip=127.0.0.1</span><br><span class=\"line\">#p2p_port=6000</span><br><span class=\"line\"></span><br><span class=\"line\">#web</span><br><span class=\"line\">#web_host=host</span><br><span class=\"line\">web_username=yonghuming</span><br><span class=\"line\">web_password=mima123456</span><br><span class=\"line\">web_port = 8080</span><br><span class=\"line\">web_ip=0.0.0.0</span><br><span class=\"line\">web_base_url=</span><br><span class=\"line\">web_open_ssl=false</span><br><span class=\"line\">web_cert_file=conf/server.pem</span><br><span class=\"line\">web_key_file=conf/server.key</span><br><span class=\"line\"># if web under proxy use sub path. like http://host/nps need this.</span><br><span class=\"line\">#web_base_url=/nps</span><br><span class=\"line\"></span><br><span class=\"line\">#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)</span><br><span class=\"line\">#Remove comments if needed</span><br><span class=\"line\">#auth_key=test</span><br><span class=\"line\">auth_crypt_key =1234567812345678</span><br><span class=\"line\"></span><br><span class=\"line\">#allow_ports=9001-9009,10001,11000-12000</span><br><span class=\"line\"></span><br><span class=\"line\">#Web management multi-user login</span><br><span class=\"line\">allow_user_login=false</span><br><span class=\"line\">allow_user_register=false</span><br><span class=\"line\">allow_user_change_username=false</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#extension</span><br><span class=\"line\">allow_flow_limit=false</span><br><span class=\"line\">allow_rate_limit=false</span><br><span class=\"line\">allow_tunnel_num_limit=false</span><br><span class=\"line\">allow_local_proxy=false</span><br><span class=\"line\">allow_connection_num_limit=false</span><br><span class=\"line\">allow_multi_ip=false</span><br><span class=\"line\">system_info_display=false</span><br><span class=\"line\"></span><br><span class=\"line\">#c</span><br><span class=\"line\">http_cache=true</span><br><span class=\"line\">http_cache_length=100</span><br><span class=\"line\"></span><br><span class=\"line\">#get origin ip</span><br><span class=\"line\">http_add_origin_header=false</span><br><span class=\"line\"></span><br><span class=\"line\">#pprof debug options</span><br><span class=\"line\">#pprof_ip=0.0.0.0</span><br><span class=\"line\">#pprof_port=9999</span><br></pre></td></tr></table></figure>\n\n\n<p>继续执行以下命令完成安装并启动！！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/nps #切换目录</span><br><span class=\"line\">./nps install #开始安装</span><br><span class=\"line\">nps start #启动引擎</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>反向代理，我用的是Caddy，因为简单高效，最重要的是不用管证书，可以自动获取更新SSL证书。Caddy的2.0版本已经出来，但还处于beta版本，所以我用的是1.0系列版本。Caddy自带启动脚本，我用的服务器系统是centos 7.4 64bit，所以，我用到的启动脚本是init&#x2F;linux-systemd&#x2F;caddy.service。根据启动脚本的内容，得知需要把caddy可执行文件放到&#x2F;usr&#x2F;local&#x2F;bin目录，并且确定配置文件是&#x2F;etc&#x2F;caddy&#x2F;Caddyfile。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/caddy #建立基地</span><br><span class=\"line\">wget https://github.com/caddyserver/caddy/releases/download/v1.0.3/caddy_v1.0.3_linux_amd64.tar.gz -O /data/caddy/caddy_v1.0.3_linux_amd64.tar.gz #运货到基地</span><br><span class=\"line\">cp /data/caddy/caddy /usr/local/bin/ #拷贝可执行文件到目标目录</span><br><span class=\"line\">chmod a+x /usr/local/bin/caddy #更改权限</span><br><span class=\"line\">cat /data/caddy/init/linux-systemd/caddy.service &gt; /etc/systemd/system/caddy.service #搬动启动脚本内容</span><br><span class=\"line\">sed -i  ’s/www-data/root/g’ /etc/systemd/system/caddy.service #替换caddy运行用户，懒得去处理权限问题</span><br><span class=\"line\">chmod 755 /etc/systemd/system/caddy.service #更改脚本文件权限</span><br><span class=\"line\">systemctl enable caddy.service #自启动</span><br><span class=\"line\">mkdir -p /etc/ssl/caddy #建立caddy证书存取目录</span><br><span class=\"line\">mkdir -p /var/log/caddy #建立日志目录</span><br><span class=\"line\">mkdir -p /etc/caddy #建立以下配置存放目录</span><br><span class=\"line\">touch /etc/caddy/Caddyfile #建立配置文件</span><br></pre></td></tr></table></figure>\n\n<p>修改&#x2F;etc&#x2F;caddy&#x2F;Caddyfile文件并保存，内容如下（nps.domain.tls是绑定的域名，<a href=\"mailto:&#49;&#x30;&#48;&#48;&#48;&#64;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;\">&#49;&#x30;&#48;&#48;&#48;&#64;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;</a><br>是邮箱地址，请按照自己的实际内容修改）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nps.domain.tls&#123;</span><br><span class=\"line\">  gzip</span><br><span class=\"line\">  redir 301&#123;</span><br><span class=\"line\">    if &#123;&gt;X-Forwarded-Proto&#125; is http</span><br><span class=\"line\">    / https://nps.domain.ltd&#123;uri&#125;                  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tls 10000@163.com                                                    </span><br><span class=\"line\">  log /var/log/caddy/nps.domain.tls.log&#123;</span><br><span class=\"line\">    rotate_size 5</span><br><span class=\"line\">    rotate_age 5</span><br><span class=\"line\">    rotate_keep 2</span><br><span class=\"line\">    rotate_compress</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  proxy / 127.0.0.1:8080&#123;</span><br><span class=\"line\">    transparent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动服务端\"><a href=\"#启动服务端\" class=\"headerlink\" title=\"启动服务端\"></a>启动服务端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH #查看以下/usr/local/bin是否包含在环境变量里，如果没有匹配，请执行下三步的环境变量配置和环境变量生效，否则跳过；</span><br><span class=\"line\">echo ‘PATH=$PATH:/usr/local/bin’ &gt;&gt; ~/.bash_profile #环境变量配置</span><br><span class=\"line\">echo ‘export PATH’ &gt;&gt; ~/.bash_profile #环境变量配置</span><br><span class=\"line\">source ~/.bash_profile #环境变量生效</span><br><span class=\"line\">systemctl start caddy.service #启动caddy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"caddy网页端管理\"><a href=\"#caddy网页端管理\" class=\"headerlink\" title=\"caddy网页端管理\"></a>caddy网页端管理</h2><p>访问“<a href=\"https://nps.domain.tls”,输入上面配置文件里面的web_username和web_password登录.点击左边菜单“客户端”,点击“新增”按钮新增客户端.按照下图填写表单,填写好了,点击“新增”按钮保存./\">https://nps.domain.tls”，输入上面配置文件里面的web_username和web_password登录。点击左边菜单“客户端”，点击“新增”按钮新增客户端。按照下图填写表单，填写好了，点击“新增”按钮保存。</a></p>\n<p><img src=\"/images/nps1.jpg\" alt=\"新增客户端\" title=\"新增客户端\"></p>\n<p><img src=\"/images/nps3.jpg\" alt=\"查看客户端ID\" title=\"查看客户端ID\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>大部分的客户端安装都比较简单，也基本是一键安装。这里还是以Linux 64Bit为例安装客户端。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/npc #找块地</span><br><span class=\"line\">wget https://github.com/ehang-io/nps/releases/download/v0.26.4/linux_amd64_client.tar.gz -O /data/linux_amd64_client.tar.gz #拿到货</span><br><span class=\"line\">tar xzf /data/linux_amd64_client.tar.gz -C /data/npc/ #卸货</span><br></pre></td></tr></table></figure>\n\n<p>编辑配置&#x2F;data&#x2F;npc&#x2F;conf&#x2F;npc.conf，内容如下（vkey是添加客户端时候需要用到的，详看caddy网页端管理那一步的图片，8.8.8.8换成真实的服务器IP地址）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr=8.8.8.8:8024</span><br><span class=\"line\">conn_type=tcp</span><br><span class=\"line\">vkey=leochan.me</span><br><span class=\"line\">auto_reconnection=true</span><br><span class=\"line\">max_conn=1000</span><br><span class=\"line\">flow_limit=1000</span><br><span class=\"line\">rate_limit=1000</span><br><span class=\"line\">crypt=true</span><br><span class=\"line\">compress=true</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，完成安装并启动客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data/npc #找到解压目录</span><br><span class=\"line\">./npc install -config=/data/npc/conf/npc.conf #执行安装</span><br><span class=\"line\">npc start #启动客户端</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>假设，本地局域网有一台机器，局域网IP是192.168.2.50，服务绑定的端口号是5000，绑定的域名是file.domain.tls。那么，请按照下图配置：</p>\n<p><img src=\"/images/nps2.jpg\" alt=\"新增主机\" title=\"新增主机\"></p>\n<p>配置好之后，我们回到反向代理那一步，处理一下域名。编辑&#x2F;etc&#x2F;caddy&#x2F;Caddyfile，追加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file.domain.tls &#123;</span><br><span class=\"line\">  gzip</span><br><span class=\"line\">  redir  301 &#123;</span><br><span class=\"line\">    if &#123;&gt;X-Forwarded-Proto&#125; is http</span><br><span class=\"line\">    / https://&#123;host&#125;&#123;uri&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tls 10000@163.com</span><br><span class=\"line\">  log /var/log/caddy/nps.log &#123;</span><br><span class=\"line\">    rotate_size 5</span><br><span class=\"line\">    rotate_age 5</span><br><span class=\"line\">    rotate_keep 2</span><br><span class=\"line\">    rotate_compress</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  proxy / 127.0.0.1:20080 &#123;</span><br><span class=\"line\">    ransparent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启一下caddy，收工了！！</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>需要开辟另一篇来做以下nps的其他代理的介绍！！</p>\n"},{"title":"定时开关OpenWRT的LED","date":"2020-03-03T15:46:07.000Z","url":"ding-shi-kai-guan-openwrtde-led","description":"家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。","_content":"\n> 家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。\n \n## 确定配置文件所在\n\n首先，我通过Google搜索，查到了[OpenWRT官网LED的说明文档](https://openwrt.org/docs/guide-user/base-system/led_configuration)。查到了相关的配置文件夹以及基本工作原理。经过比对文档和文件，发现我们可以控制触发器（trigger）和亮度（brightness）来达到控制LED。在这里，只通过控制亮度去控制LED，简单高效。\n\n## 任务脚本\n\n首先，我们需要做简单的准备。需要确定的是，我们需要一个文件夹备份原来的亮度配置文件。关掉灯就是把亮度变成0即可，开灯就把原来的配置恢复即可。\n\n```\nmkdir -p /data/leds #创建一个基本文件夹\ntouch switch.sh #创建脚本文件\nchmod a+x switch.sh\n```\n\n\n编辑并保存一下内容到switch.sh\n\n```\n#!/bin/bash\n#\n# author: Leo Chan\n# Blog: https://leochan.me\n#\n\nbackPath=\"/data/leds/backup/\"\nledsPath=\"/sys/class/leds/\"\n\nbackupConfig(){\n\tif [ ! -d $backPath ]; then\n\t\tmkdir -p $backPath\n\t\tfor i in `find / -name brightness`; do\n\t\t\tname=`dirname $i | grep -o '[^/]*$'`\n\t\t\tcat $i > $backPath$name\n\t\tdone\n\tfi\n}\n\nturnOff(){\n\tfor i in `ls \"$backPath\"`\n\tdo\n\t  \techo 0 > \"$ledsPath$i/brightness\"\n\tdone\n}\n\nturnOn(){\n\tfor i in `ls \"$backPath\"`\n\tdo\n\t  \tcat $backPath$i > \"$ledsPath$i/brightness\"\n\tdone\n}\n\nswitchLed(){\n\tif [ `date +%H` -gt 19 ]; then\n\t\tturnOff\n\telse\n\t\tturnOn\n\tfi\n}\n\nbackupConfig\nswitchLed\n```\n\n\n## 添加定时任务\n\n可以通过界面添加，也可以通过crontab命令编辑添加。我自己是让它在晚上8点钟和白天八点钟各执行一次。\n\n```\n* 8 * * * /data/leds/switch.sh >/dev/null 2>&1\n* 20 * * * /data/leds/switch.sh >/dev/null 2>&1\n```","source":"_posts/定时开关OpenWRT的LED.md","raw":"---\ntitle: 定时开关OpenWRT的LED\ndate: 2020-03-03 23:46:07\ntags: \n  - 软路由\n  - OpenWRT\ncategories:\n  - 技术\nurl: ding-shi-kai-guan-openwrtde-led\ndescription: 家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。\n---\n\n> 家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。\n \n## 确定配置文件所在\n\n首先，我通过Google搜索，查到了[OpenWRT官网LED的说明文档](https://openwrt.org/docs/guide-user/base-system/led_configuration)。查到了相关的配置文件夹以及基本工作原理。经过比对文档和文件，发现我们可以控制触发器（trigger）和亮度（brightness）来达到控制LED。在这里，只通过控制亮度去控制LED，简单高效。\n\n## 任务脚本\n\n首先，我们需要做简单的准备。需要确定的是，我们需要一个文件夹备份原来的亮度配置文件。关掉灯就是把亮度变成0即可，开灯就把原来的配置恢复即可。\n\n```\nmkdir -p /data/leds #创建一个基本文件夹\ntouch switch.sh #创建脚本文件\nchmod a+x switch.sh\n```\n\n\n编辑并保存一下内容到switch.sh\n\n```\n#!/bin/bash\n#\n# author: Leo Chan\n# Blog: https://leochan.me\n#\n\nbackPath=\"/data/leds/backup/\"\nledsPath=\"/sys/class/leds/\"\n\nbackupConfig(){\n\tif [ ! -d $backPath ]; then\n\t\tmkdir -p $backPath\n\t\tfor i in `find / -name brightness`; do\n\t\t\tname=`dirname $i | grep -o '[^/]*$'`\n\t\t\tcat $i > $backPath$name\n\t\tdone\n\tfi\n}\n\nturnOff(){\n\tfor i in `ls \"$backPath\"`\n\tdo\n\t  \techo 0 > \"$ledsPath$i/brightness\"\n\tdone\n}\n\nturnOn(){\n\tfor i in `ls \"$backPath\"`\n\tdo\n\t  \tcat $backPath$i > \"$ledsPath$i/brightness\"\n\tdone\n}\n\nswitchLed(){\n\tif [ `date +%H` -gt 19 ]; then\n\t\tturnOff\n\telse\n\t\tturnOn\n\tfi\n}\n\nbackupConfig\nswitchLed\n```\n\n\n## 添加定时任务\n\n可以通过界面添加，也可以通过crontab命令编辑添加。我自己是让它在晚上8点钟和白天八点钟各执行一次。\n\n```\n* 8 * * * /data/leds/switch.sh >/dev/null 2>&1\n* 20 * * * /data/leds/switch.sh >/dev/null 2>&1\n```","slug":"定时开关OpenWRT的LED","published":1,"updated":"2022-05-14T01:40:58.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6av5003rlvtd07fv0wkb","content":"<blockquote>\n<p>家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。</p>\n</blockquote>\n<h2 id=\"确定配置文件所在\"><a href=\"#确定配置文件所在\" class=\"headerlink\" title=\"确定配置文件所在\"></a>确定配置文件所在</h2><p>首先，我通过Google搜索，查到了<a href=\"https://openwrt.org/docs/guide-user/base-system/led_configuration\">OpenWRT官网LED的说明文档</a>。查到了相关的配置文件夹以及基本工作原理。经过比对文档和文件，发现我们可以控制触发器（trigger）和亮度（brightness）来达到控制LED。在这里，只通过控制亮度去控制LED，简单高效。</p>\n<h2 id=\"任务脚本\"><a href=\"#任务脚本\" class=\"headerlink\" title=\"任务脚本\"></a>任务脚本</h2><p>首先，我们需要做简单的准备。需要确定的是，我们需要一个文件夹备份原来的亮度配置文件。关掉灯就是把亮度变成0即可，开灯就把原来的配置恢复即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/leds #创建一个基本文件夹</span><br><span class=\"line\">touch switch.sh #创建脚本文件</span><br><span class=\"line\">chmod a+x switch.sh</span><br></pre></td></tr></table></figure>\n\n\n<p>编辑并保存一下内容到switch.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># author: Leo Chan</span><br><span class=\"line\"># Blog: https://leochan.me</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">backPath=&quot;/data/leds/backup/&quot;</span><br><span class=\"line\">ledsPath=&quot;/sys/class/leds/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">backupConfig()&#123;</span><br><span class=\"line\">\tif [ ! -d $backPath ]; then</span><br><span class=\"line\">\t\tmkdir -p $backPath</span><br><span class=\"line\">\t\tfor i in `find / -name brightness`; do</span><br><span class=\"line\">\t\t\tname=`dirname $i | grep -o &#x27;[^/]*$&#x27;`</span><br><span class=\"line\">\t\t\tcat $i &gt; $backPath$name</span><br><span class=\"line\">\t\tdone</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">turnOff()&#123;</span><br><span class=\"line\">\tfor i in `ls &quot;$backPath&quot;`</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t  \techo 0 &gt; &quot;$ledsPath$i/brightness&quot;</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">turnOn()&#123;</span><br><span class=\"line\">\tfor i in `ls &quot;$backPath&quot;`</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t  \tcat $backPath$i &gt; &quot;$ledsPath$i/brightness&quot;</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">switchLed()&#123;</span><br><span class=\"line\">\tif [ `date +%H` -gt 19 ]; then</span><br><span class=\"line\">\t\tturnOff</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tturnOn</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">backupConfig</span><br><span class=\"line\">switchLed</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h2><p>可以通过界面添加，也可以通过crontab命令编辑添加。我自己是让它在晚上8点钟和白天八点钟各执行一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 8 * * * /data/leds/switch.sh &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">* 20 * * * /data/leds/switch.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1240,"excerpt":"","more":"<blockquote>\n<p>家里面，不管是老家用的路由器，还是在美食之都用的软路由，用的都是OpenWRT系统。用上OpenWRT之后，抖音不卡，微信666。不过，它的指示灯实在是太亮了，尤其是夜里面！所以呢，就折腾了一下，定时开关OpenWRT的LED。</p>\n</blockquote>\n<h2 id=\"确定配置文件所在\"><a href=\"#确定配置文件所在\" class=\"headerlink\" title=\"确定配置文件所在\"></a>确定配置文件所在</h2><p>首先，我通过Google搜索，查到了<a href=\"https://openwrt.org/docs/guide-user/base-system/led_configuration\">OpenWRT官网LED的说明文档</a>。查到了相关的配置文件夹以及基本工作原理。经过比对文档和文件，发现我们可以控制触发器（trigger）和亮度（brightness）来达到控制LED。在这里，只通过控制亮度去控制LED，简单高效。</p>\n<h2 id=\"任务脚本\"><a href=\"#任务脚本\" class=\"headerlink\" title=\"任务脚本\"></a>任务脚本</h2><p>首先，我们需要做简单的准备。需要确定的是，我们需要一个文件夹备份原来的亮度配置文件。关掉灯就是把亮度变成0即可，开灯就把原来的配置恢复即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/leds #创建一个基本文件夹</span><br><span class=\"line\">touch switch.sh #创建脚本文件</span><br><span class=\"line\">chmod a+x switch.sh</span><br></pre></td></tr></table></figure>\n\n\n<p>编辑并保存一下内容到switch.sh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># author: Leo Chan</span><br><span class=\"line\"># Blog: https://leochan.me</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">backPath=&quot;/data/leds/backup/&quot;</span><br><span class=\"line\">ledsPath=&quot;/sys/class/leds/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">backupConfig()&#123;</span><br><span class=\"line\">\tif [ ! -d $backPath ]; then</span><br><span class=\"line\">\t\tmkdir -p $backPath</span><br><span class=\"line\">\t\tfor i in `find / -name brightness`; do</span><br><span class=\"line\">\t\t\tname=`dirname $i | grep -o &#x27;[^/]*$&#x27;`</span><br><span class=\"line\">\t\t\tcat $i &gt; $backPath$name</span><br><span class=\"line\">\t\tdone</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">turnOff()&#123;</span><br><span class=\"line\">\tfor i in `ls &quot;$backPath&quot;`</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t  \techo 0 &gt; &quot;$ledsPath$i/brightness&quot;</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">turnOn()&#123;</span><br><span class=\"line\">\tfor i in `ls &quot;$backPath&quot;`</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t  \tcat $backPath$i &gt; &quot;$ledsPath$i/brightness&quot;</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">switchLed()&#123;</span><br><span class=\"line\">\tif [ `date +%H` -gt 19 ]; then</span><br><span class=\"line\">\t\tturnOff</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tturnOn</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">backupConfig</span><br><span class=\"line\">switchLed</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h2><p>可以通过界面添加，也可以通过crontab命令编辑添加。我自己是让它在晚上8点钟和白天八点钟各执行一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 8 * * * /data/leds/switch.sh &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">* 20 * * * /data/leds/switch.sh &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>"},{"title":"小型mysql数据库的备份偏方","date":"2018-07-11T23:57:00.000Z","url":"a-backup-method-for-mini-mysql-database","description":"有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！","_content":"\n> 有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！\n\n## 前言\n\n我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。这里会用到mysql自带的mysqldump工具。\n\n```\nshell脚本内容\n#!/bin/sh\n#mysql账户\nmysql_user=\"leo\"\n#mysql密码\nmysql_password=\"leo123456789\"\n#mysql自带的可执行文件目录\nmysql_dir=/usr/local/mysql/bin\n#要导出的数据库名称，多个用半角逗号隔开\nmysql_databases=\"leo\"\n#备份目录，一定要事先创建好\nbackup_dir=/data/backup/mysql/leo\n#导出数据库文件前缀\ntoday=$(date +%Y%m%d_%H%M%S)\n#日志目录 也要提前创建\nlog_dir=/data/logs/mysql/leo\n#日志名称\nlog_file=backup.log\n#追加开始备份的提示文字到日志文件\necho -e '['$(date +\"%Y-%m-%d %H:%M:%S\")'] - '$mysql_databases' - '\"备份开始\\n\" >> $log_dir/$log_file\n#使用mysqldump导出数据\n$mysql_dir/mysqldump -u$mysql_user -p$mysql_password --apply-slave-statements --hex-blob --routines --single-transaction --databases $mysql_databases | gzip > $backup_dir/$today.sql.gz\n#追加删除旧备份数据的提示文字到日志\necho -e '['$(date +\"%Y-%m-%d %H:%M:%S\")'] - '$mysql_databases' - '\"删除以前的备份\\n\" >> $log_dir/$log_file\n#保留多少天内的备份\ndays=3\n#查找应该删除的数据 并删除\nfind $full_backup_dir -mtime +$days -name \"*.sql.gz\" -exec rm -f {} \\;\n#休息一下\nsleep 600\n```\n\n我们把上面的脚本内容保存成backup.sh文件，保存在/data目录（即，文件地址是/data/backup.sh）。注意转换编码，不然会报错，提示找不到/bin/sh，最好在Linux或者类Unix系统下面保存成文件。\n\n## 定时执行脚本\n\n```\ncrontab -e\n```\n\n执行上面的命令，进入编辑定时任务模式。按一下“i”，把下面的内容放到新的一行。每6小时执行一次。\n\n```\n1 */6 * * * /data/backup.sh >> /dev/null\n```\n\n按一下“Esc”键，输入:wq!，按一下回车键保存。\n\n如果害怕搞错，可以直接使用echo命令追加内容到定时任务文件里面！\n\n```\necho '1 */6 * * * /data/backup.sh >> /dev/null' >> /var/spool/cron/root\n```\n\n\ncentos系统的定时任务文件对应的目录是 /var/spool/cron，文件以用户名命名！\n\n## 拓展一下\n\n如果觉得还是不够6，可以参考一下《[利用inotify+rsync实时同步数据到远程服务器之二](/sync-data-realtime-with-inotify-rsync-v2)》，把备份出来的数据实时同步到其他服务器上面！不费力，也很稳定，小型数据库，足矣！","source":"_posts/小型mysql数据库的备份偏方.md","raw":"---\ntitle: 小型mysql数据库的备份偏方\ndate: 2018-07-12 07:57:00\ntags: \n  - mysql\n  - 数据库备份\ncategories:\n  - 技术\nurl: a-backup-method-for-mini-mysql-database\ndescription: 有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！\n---\n\n> 有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！\n\n## 前言\n\n我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。这里会用到mysql自带的mysqldump工具。\n\n```\nshell脚本内容\n#!/bin/sh\n#mysql账户\nmysql_user=\"leo\"\n#mysql密码\nmysql_password=\"leo123456789\"\n#mysql自带的可执行文件目录\nmysql_dir=/usr/local/mysql/bin\n#要导出的数据库名称，多个用半角逗号隔开\nmysql_databases=\"leo\"\n#备份目录，一定要事先创建好\nbackup_dir=/data/backup/mysql/leo\n#导出数据库文件前缀\ntoday=$(date +%Y%m%d_%H%M%S)\n#日志目录 也要提前创建\nlog_dir=/data/logs/mysql/leo\n#日志名称\nlog_file=backup.log\n#追加开始备份的提示文字到日志文件\necho -e '['$(date +\"%Y-%m-%d %H:%M:%S\")'] - '$mysql_databases' - '\"备份开始\\n\" >> $log_dir/$log_file\n#使用mysqldump导出数据\n$mysql_dir/mysqldump -u$mysql_user -p$mysql_password --apply-slave-statements --hex-blob --routines --single-transaction --databases $mysql_databases | gzip > $backup_dir/$today.sql.gz\n#追加删除旧备份数据的提示文字到日志\necho -e '['$(date +\"%Y-%m-%d %H:%M:%S\")'] - '$mysql_databases' - '\"删除以前的备份\\n\" >> $log_dir/$log_file\n#保留多少天内的备份\ndays=3\n#查找应该删除的数据 并删除\nfind $full_backup_dir -mtime +$days -name \"*.sql.gz\" -exec rm -f {} \\;\n#休息一下\nsleep 600\n```\n\n我们把上面的脚本内容保存成backup.sh文件，保存在/data目录（即，文件地址是/data/backup.sh）。注意转换编码，不然会报错，提示找不到/bin/sh，最好在Linux或者类Unix系统下面保存成文件。\n\n## 定时执行脚本\n\n```\ncrontab -e\n```\n\n执行上面的命令，进入编辑定时任务模式。按一下“i”，把下面的内容放到新的一行。每6小时执行一次。\n\n```\n1 */6 * * * /data/backup.sh >> /dev/null\n```\n\n按一下“Esc”键，输入:wq!，按一下回车键保存。\n\n如果害怕搞错，可以直接使用echo命令追加内容到定时任务文件里面！\n\n```\necho '1 */6 * * * /data/backup.sh >> /dev/null' >> /var/spool/cron/root\n```\n\n\ncentos系统的定时任务文件对应的目录是 /var/spool/cron，文件以用户名命名！\n\n## 拓展一下\n\n如果觉得还是不够6，可以参考一下《[利用inotify+rsync实时同步数据到远程服务器之二](/sync-data-realtime-with-inotify-rsync-v2)》，把备份出来的数据实时同步到其他服务器上面！不费力，也很稳定，小型数据库，足矣！","slug":"小型mysql数据库的备份偏方","published":1,"updated":"2022-05-12T17:06:48.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6av5003tlvtd4ogy95e4","content":"<blockquote>\n<p>有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。这里会用到mysql自带的mysqldump工具。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell脚本内容</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#mysql账户</span><br><span class=\"line\">mysql_user=&quot;leo&quot;</span><br><span class=\"line\">#mysql密码</span><br><span class=\"line\">mysql_password=&quot;leo123456789&quot;</span><br><span class=\"line\">#mysql自带的可执行文件目录</span><br><span class=\"line\">mysql_dir=/usr/local/mysql/bin</span><br><span class=\"line\">#要导出的数据库名称，多个用半角逗号隔开</span><br><span class=\"line\">mysql_databases=&quot;leo&quot;</span><br><span class=\"line\">#备份目录，一定要事先创建好</span><br><span class=\"line\">backup_dir=/data/backup/mysql/leo</span><br><span class=\"line\">#导出数据库文件前缀</span><br><span class=\"line\">today=$(date +%Y%m%d_%H%M%S)</span><br><span class=\"line\">#日志目录 也要提前创建</span><br><span class=\"line\">log_dir=/data/logs/mysql/leo</span><br><span class=\"line\">#日志名称</span><br><span class=\"line\">log_file=backup.log</span><br><span class=\"line\">#追加开始备份的提示文字到日志文件</span><br><span class=\"line\">echo -e &#x27;[&#x27;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&#x27;] - &#x27;$mysql_databases&#x27; - &#x27;&quot;备份开始\\n&quot; &gt;&gt; $log_dir/$log_file</span><br><span class=\"line\">#使用mysqldump导出数据</span><br><span class=\"line\">$mysql_dir/mysqldump -u$mysql_user -p$mysql_password --apply-slave-statements --hex-blob --routines --single-transaction --databases $mysql_databases | gzip &gt; $backup_dir/$today.sql.gz</span><br><span class=\"line\">#追加删除旧备份数据的提示文字到日志</span><br><span class=\"line\">echo -e &#x27;[&#x27;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&#x27;] - &#x27;$mysql_databases&#x27; - &#x27;&quot;删除以前的备份\\n&quot; &gt;&gt; $log_dir/$log_file</span><br><span class=\"line\">#保留多少天内的备份</span><br><span class=\"line\">days=3</span><br><span class=\"line\">#查找应该删除的数据 并删除</span><br><span class=\"line\">find $full_backup_dir -mtime +$days -name &quot;*.sql.gz&quot; -exec rm -f &#123;&#125; \\;</span><br><span class=\"line\">#休息一下</span><br><span class=\"line\">sleep 600</span><br></pre></td></tr></table></figure>\n\n<p>我们把上面的脚本内容保存成backup.sh文件，保存在&#x2F;data目录（即，文件地址是&#x2F;data&#x2F;backup.sh）。注意转换编码，不然会报错，提示找不到&#x2F;bin&#x2F;sh，最好在Linux或者类Unix系统下面保存成文件。</p>\n<h2 id=\"定时执行脚本\"><a href=\"#定时执行脚本\" class=\"headerlink\" title=\"定时执行脚本\"></a>定时执行脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令，进入编辑定时任务模式。按一下“i”，把下面的内容放到新的一行。每6小时执行一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 */6 * * * /data/backup.sh &gt;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>按一下“Esc”键，输入:wq!，按一下回车键保存。</p>\n<p>如果害怕搞错，可以直接使用echo命令追加内容到定时任务文件里面！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;1 */6 * * * /data/backup.sh &gt;&gt; /dev/null&#x27; &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n<p>centos系统的定时任务文件对应的目录是 &#x2F;var&#x2F;spool&#x2F;cron，文件以用户名命名！</p>\n<h2 id=\"拓展一下\"><a href=\"#拓展一下\" class=\"headerlink\" title=\"拓展一下\"></a>拓展一下</h2><p>如果觉得还是不够6，可以参考一下《<a href=\"/sync-data-realtime-with-inotify-rsync-v2\">利用inotify+rsync实时同步数据到远程服务器之二</a>》，把备份出来的数据实时同步到其他服务器上面！不费力，也很稳定，小型数据库，足矣！</p>\n","site":{"data":{}},"length":1754,"excerpt":"","more":"<blockquote>\n<p>有时候，自己搞一个博客、小型论坛再或者一个小型的项目，如果又不想选择xtrabackup或者自己写个小程序备份的话，这里有一个很不错的小方案可以选择哟！</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我的Linux系统是centos，是最新版本的7.4，64bit，系统内核版本（可通过uname -a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。这里会用到mysql自带的mysqldump工具。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell脚本内容</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#mysql账户</span><br><span class=\"line\">mysql_user=&quot;leo&quot;</span><br><span class=\"line\">#mysql密码</span><br><span class=\"line\">mysql_password=&quot;leo123456789&quot;</span><br><span class=\"line\">#mysql自带的可执行文件目录</span><br><span class=\"line\">mysql_dir=/usr/local/mysql/bin</span><br><span class=\"line\">#要导出的数据库名称，多个用半角逗号隔开</span><br><span class=\"line\">mysql_databases=&quot;leo&quot;</span><br><span class=\"line\">#备份目录，一定要事先创建好</span><br><span class=\"line\">backup_dir=/data/backup/mysql/leo</span><br><span class=\"line\">#导出数据库文件前缀</span><br><span class=\"line\">today=$(date +%Y%m%d_%H%M%S)</span><br><span class=\"line\">#日志目录 也要提前创建</span><br><span class=\"line\">log_dir=/data/logs/mysql/leo</span><br><span class=\"line\">#日志名称</span><br><span class=\"line\">log_file=backup.log</span><br><span class=\"line\">#追加开始备份的提示文字到日志文件</span><br><span class=\"line\">echo -e &#x27;[&#x27;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&#x27;] - &#x27;$mysql_databases&#x27; - &#x27;&quot;备份开始\\n&quot; &gt;&gt; $log_dir/$log_file</span><br><span class=\"line\">#使用mysqldump导出数据</span><br><span class=\"line\">$mysql_dir/mysqldump -u$mysql_user -p$mysql_password --apply-slave-statements --hex-blob --routines --single-transaction --databases $mysql_databases | gzip &gt; $backup_dir/$today.sql.gz</span><br><span class=\"line\">#追加删除旧备份数据的提示文字到日志</span><br><span class=\"line\">echo -e &#x27;[&#x27;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)&#x27;] - &#x27;$mysql_databases&#x27; - &#x27;&quot;删除以前的备份\\n&quot; &gt;&gt; $log_dir/$log_file</span><br><span class=\"line\">#保留多少天内的备份</span><br><span class=\"line\">days=3</span><br><span class=\"line\">#查找应该删除的数据 并删除</span><br><span class=\"line\">find $full_backup_dir -mtime +$days -name &quot;*.sql.gz&quot; -exec rm -f &#123;&#125; \\;</span><br><span class=\"line\">#休息一下</span><br><span class=\"line\">sleep 600</span><br></pre></td></tr></table></figure>\n\n<p>我们把上面的脚本内容保存成backup.sh文件，保存在&#x2F;data目录（即，文件地址是&#x2F;data&#x2F;backup.sh）。注意转换编码，不然会报错，提示找不到&#x2F;bin&#x2F;sh，最好在Linux或者类Unix系统下面保存成文件。</p>\n<h2 id=\"定时执行脚本\"><a href=\"#定时执行脚本\" class=\"headerlink\" title=\"定时执行脚本\"></a>定时执行脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的命令，进入编辑定时任务模式。按一下“i”，把下面的内容放到新的一行。每6小时执行一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 */6 * * * /data/backup.sh &gt;&gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>按一下“Esc”键，输入:wq!，按一下回车键保存。</p>\n<p>如果害怕搞错，可以直接使用echo命令追加内容到定时任务文件里面！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;1 */6 * * * /data/backup.sh &gt;&gt; /dev/null&#x27; &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n<p>centos系统的定时任务文件对应的目录是 &#x2F;var&#x2F;spool&#x2F;cron，文件以用户名命名！</p>\n<h2 id=\"拓展一下\"><a href=\"#拓展一下\" class=\"headerlink\" title=\"拓展一下\"></a>拓展一下</h2><p>如果觉得还是不够6，可以参考一下《<a href=\"/sync-data-realtime-with-inotify-rsync-v2\">利用inotify+rsync实时同步数据到远程服务器之二</a>》，把备份出来的数据实时同步到其他服务器上面！不费力，也很稳定，小型数据库，足矣！</p>\n"},{"title":"快速清理Docker中的容器和镜像","date":"2018-10-28T22:48:47.000Z","url":"quickly-delete-dockers-containtor-and-images","description":"Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！","_content":"\n> Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！\n\n\n## 停止所有容器的进程\n\n```\ndocker kill $(docker ps -a -q)\n```\n\n\n## 删除所有已经停止的容器\n\n```\ndocker rm $(docker ps -a -q)\n```\n\n\n## 删除所有未打 dangling 标签的镜像\n\n```\ndocker rmi $(docker images -q -f dangling=true)\n```\n\n\n## 删除所有镜像\n\n```\ndocker rmi $(docker images -q)\n```\n\n\n## 为这些命令创建别名\n\n```\nvi ~/.bash_aliases\n停止所有容器的进程.\nalias dockerkill=\"docker kill $(docker ps -a -q)\"\n删除所有已经停止的容器.\nalias dockercleanc=\"docker rm $(docker ps -a -q)\"\n删除所有未打标签的镜像.\nalias dockercleani=\"docker rmi $(docker images -q -f dangling=true)\"\n删除所有已经停止的容器和未打标签的镜像.\nalias dockerclean=\"dockercleanc || true && dockercleani\"\n```\n\n","source":"_posts/快速清理Docker中的容器和镜像.md","raw":"---\ntitle: 快速清理Docker中的容器和镜像\ndate: 2018-10-29 06:48:47\ntags: \n  - Docker\ncategories:\n  - 技术\nurl: quickly-delete-dockers-containtor-and-images\ndescription: Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！\n---\n\n> Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！\n\n\n## 停止所有容器的进程\n\n```\ndocker kill $(docker ps -a -q)\n```\n\n\n## 删除所有已经停止的容器\n\n```\ndocker rm $(docker ps -a -q)\n```\n\n\n## 删除所有未打 dangling 标签的镜像\n\n```\ndocker rmi $(docker images -q -f dangling=true)\n```\n\n\n## 删除所有镜像\n\n```\ndocker rmi $(docker images -q)\n```\n\n\n## 为这些命令创建别名\n\n```\nvi ~/.bash_aliases\n停止所有容器的进程.\nalias dockerkill=\"docker kill $(docker ps -a -q)\"\n删除所有已经停止的容器.\nalias dockercleanc=\"docker rm $(docker ps -a -q)\"\n删除所有未打标签的镜像.\nalias dockercleani=\"docker rmi $(docker images -q -f dangling=true)\"\n删除所有已经停止的容器和未打标签的镜像.\nalias dockerclean=\"dockercleanc || true && dockercleani\"\n```\n\n","slug":"快速清理Docker中的容器和镜像","published":1,"updated":"2022-05-12T17:05:36.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6av6003ulvtd02vw9tkt","content":"<blockquote>\n<p>Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！</p>\n</blockquote>\n<h2 id=\"停止所有容器的进程\"><a href=\"#停止所有容器的进程\" class=\"headerlink\" title=\"停止所有容器的进程\"></a>停止所有容器的进程</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有已经停止的容器\"><a href=\"#删除所有已经停止的容器\" class=\"headerlink\" title=\"删除所有已经停止的容器\"></a>删除所有已经停止的容器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有未打-dangling-标签的镜像\"><a href=\"#删除所有未打-dangling-标签的镜像\" class=\"headerlink\" title=\"删除所有未打 dangling 标签的镜像\"></a>删除所有未打 dangling 标签的镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q -f dangling=true)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"为这些命令创建别名\"><a href=\"#为这些命令创建别名\" class=\"headerlink\" title=\"为这些命令创建别名\"></a>为这些命令创建别名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bash_aliases</span><br><span class=\"line\">停止所有容器的进程.</span><br><span class=\"line\">alias dockerkill=&quot;docker kill $(docker ps -a -q)&quot;</span><br><span class=\"line\">删除所有已经停止的容器.</span><br><span class=\"line\">alias dockercleanc=&quot;docker rm $(docker ps -a -q)&quot;</span><br><span class=\"line\">删除所有未打标签的镜像.</span><br><span class=\"line\">alias dockercleani=&quot;docker rmi $(docker images -q -f dangling=true)&quot;</span><br><span class=\"line\">删除所有已经停止的容器和未打标签的镜像.</span><br><span class=\"line\">alias dockerclean=&quot;dockercleanc || true &amp;&amp; dockercleani&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":580,"excerpt":"","more":"<blockquote>\n<p>Docker用起来很爽，但是如果不熟悉，也会很棘手！比如：怎么让Docker中的镜像随机启动，又或者怎么快速地删除镜像。下面是Docker中清理容器和镜像的命令！</p>\n</blockquote>\n<h2 id=\"停止所有容器的进程\"><a href=\"#停止所有容器的进程\" class=\"headerlink\" title=\"停止所有容器的进程\"></a>停止所有容器的进程</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有已经停止的容器\"><a href=\"#删除所有已经停止的容器\" class=\"headerlink\" title=\"删除所有已经停止的容器\"></a>删除所有已经停止的容器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有未打-dangling-标签的镜像\"><a href=\"#删除所有未打-dangling-标签的镜像\" class=\"headerlink\" title=\"删除所有未打 dangling 标签的镜像\"></a>删除所有未打 dangling 标签的镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q -f dangling=true)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"为这些命令创建别名\"><a href=\"#为这些命令创建别名\" class=\"headerlink\" title=\"为这些命令创建别名\"></a>为这些命令创建别名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bash_aliases</span><br><span class=\"line\">停止所有容器的进程.</span><br><span class=\"line\">alias dockerkill=&quot;docker kill $(docker ps -a -q)&quot;</span><br><span class=\"line\">删除所有已经停止的容器.</span><br><span class=\"line\">alias dockercleanc=&quot;docker rm $(docker ps -a -q)&quot;</span><br><span class=\"line\">删除所有未打标签的镜像.</span><br><span class=\"line\">alias dockercleani=&quot;docker rmi $(docker images -q -f dangling=true)&quot;</span><br><span class=\"line\">删除所有已经停止的容器和未打标签的镜像.</span><br><span class=\"line\">alias dockerclean=&quot;dockercleanc || true &amp;&amp; dockercleani&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"收到了英文勒索邮件","date":"2022-04-18T16:49:18.000Z","photos":["/images/1617782228929766s.png"],"url":"ransom-email","description":"前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。","_content":"\n> 前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。\n\n# 邮件内容\n\n仔细看了邮件内容，发现这家伙先是说了他知道我曾经使用过这个密码。然后，说明除了他以外并不会让第三个人知道“我给他转账”的事实。接下来嘛，捡了点内容威胁收信人，同时给了一个所谓最好的解决方案。即，给他的比特币钱包转入几千美元。最后，还信誓旦旦地跟你说，如果回复指定的内容，那么他那边就会给你亲朋好友发送所谓的他手里的证明。\n\n# 事出有因\n\n不管怎么回事，数据泄漏是事实。之前很多网站、APP都曾经爆出过用户信息泄漏的丑闻。而这位手里拿到的所谓证据其实是我多年前曾经在其他网站以这个邮箱和这个老密码注册下来的账号。虽然说，并不会真正地威胁到密码安全，但是也可以看出密码撞库的风险。所以，大伙平时设置密码的时候最好尽量不要设置一样的密码，可以开二步验证的就开。\n\n# 安全验证\n\n前段时间，借鉴了一个MIT协议开源的OTP小程序的界面，写了一个OTP验证小程序。传统的OTP验证器（如Google Authenticator）最大的缺点是以APP安装在手机、电脑等终端上。如果终端出现损坏、丢失，那么我们的验证器也随之丢失。我也曾在这个问题上深受困扰。在此之前，唯一的解决办法就是把验证码导入不同的几部手机，确保一台出状况之后，还有其他手机可以用来验证。这款验证器是基于微信小程序开发，数据会被同步到服务器。这样可以在确保数据的完整的同时，只需要手机可以登录微信就可以继续拉取之前的验证码信息，不必担心手机损坏、丢失带来的验证丢失问题。这款验证器支持导入Google Authenticator现有的验证信息，也支持分享验证信息的功能，朋友、同事之间也可以用自己手机验证信息了！！此外，这款验证器本地数据加密、网络请求数据包也被加密，安全可靠！！\n\n<img src=\"/images/qrcode.jpeg\" style=\"border-radius:50%;\" width=\"200\" height=\"200\" alt=\"小程序码\" />","source":"_posts/收到了英文勒索邮件.md","raw":"---\ntitle: 收到了英文勒索邮件\ndate: 2022-04-19 00:49:18\ntags: \n  - 账号安全\n  - 勒索\ncategories:\n  - 记录\nphotos:\n  - \"/images/1617782228929766s.png\"\nurl: ransom-email\ndescription: 前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。\n---\n\n> 前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。\n\n# 邮件内容\n\n仔细看了邮件内容，发现这家伙先是说了他知道我曾经使用过这个密码。然后，说明除了他以外并不会让第三个人知道“我给他转账”的事实。接下来嘛，捡了点内容威胁收信人，同时给了一个所谓最好的解决方案。即，给他的比特币钱包转入几千美元。最后，还信誓旦旦地跟你说，如果回复指定的内容，那么他那边就会给你亲朋好友发送所谓的他手里的证明。\n\n# 事出有因\n\n不管怎么回事，数据泄漏是事实。之前很多网站、APP都曾经爆出过用户信息泄漏的丑闻。而这位手里拿到的所谓证据其实是我多年前曾经在其他网站以这个邮箱和这个老密码注册下来的账号。虽然说，并不会真正地威胁到密码安全，但是也可以看出密码撞库的风险。所以，大伙平时设置密码的时候最好尽量不要设置一样的密码，可以开二步验证的就开。\n\n# 安全验证\n\n前段时间，借鉴了一个MIT协议开源的OTP小程序的界面，写了一个OTP验证小程序。传统的OTP验证器（如Google Authenticator）最大的缺点是以APP安装在手机、电脑等终端上。如果终端出现损坏、丢失，那么我们的验证器也随之丢失。我也曾在这个问题上深受困扰。在此之前，唯一的解决办法就是把验证码导入不同的几部手机，确保一台出状况之后，还有其他手机可以用来验证。这款验证器是基于微信小程序开发，数据会被同步到服务器。这样可以在确保数据的完整的同时，只需要手机可以登录微信就可以继续拉取之前的验证码信息，不必担心手机损坏、丢失带来的验证丢失问题。这款验证器支持导入Google Authenticator现有的验证信息，也支持分享验证信息的功能，朋友、同事之间也可以用自己手机验证信息了！！此外，这款验证器本地数据加密、网络请求数据包也被加密，安全可靠！！\n\n<img src=\"/images/qrcode.jpeg\" style=\"border-radius:50%;\" width=\"200\" height=\"200\" alt=\"小程序码\" />","slug":"收到了英文勒索邮件","published":1,"updated":"2022-05-22T05:44:15.595Z","comments":1,"layout":"post","link":"","_id":"cl3in6av7003wlvtdadmvdvea","content":"<blockquote>\n<p>前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。</p>\n</blockquote>\n<h1 id=\"邮件内容\"><a href=\"#邮件内容\" class=\"headerlink\" title=\"邮件内容\"></a>邮件内容</h1><p>仔细看了邮件内容，发现这家伙先是说了他知道我曾经使用过这个密码。然后，说明除了他以外并不会让第三个人知道“我给他转账”的事实。接下来嘛，捡了点内容威胁收信人，同时给了一个所谓最好的解决方案。即，给他的比特币钱包转入几千美元。最后，还信誓旦旦地跟你说，如果回复指定的内容，那么他那边就会给你亲朋好友发送所谓的他手里的证明。</p>\n<h1 id=\"事出有因\"><a href=\"#事出有因\" class=\"headerlink\" title=\"事出有因\"></a>事出有因</h1><p>不管怎么回事，数据泄漏是事实。之前很多网站、APP都曾经爆出过用户信息泄漏的丑闻。而这位手里拿到的所谓证据其实是我多年前曾经在其他网站以这个邮箱和这个老密码注册下来的账号。虽然说，并不会真正地威胁到密码安全，但是也可以看出密码撞库的风险。所以，大伙平时设置密码的时候最好尽量不要设置一样的密码，可以开二步验证的就开。</p>\n<h1 id=\"安全验证\"><a href=\"#安全验证\" class=\"headerlink\" title=\"安全验证\"></a>安全验证</h1><p>前段时间，借鉴了一个MIT协议开源的OTP小程序的界面，写了一个OTP验证小程序。传统的OTP验证器（如Google Authenticator）最大的缺点是以APP安装在手机、电脑等终端上。如果终端出现损坏、丢失，那么我们的验证器也随之丢失。我也曾在这个问题上深受困扰。在此之前，唯一的解决办法就是把验证码导入不同的几部手机，确保一台出状况之后，还有其他手机可以用来验证。这款验证器是基于微信小程序开发，数据会被同步到服务器。这样可以在确保数据的完整的同时，只需要手机可以登录微信就可以继续拉取之前的验证码信息，不必担心手机损坏、丢失带来的验证丢失问题。这款验证器支持导入Google Authenticator现有的验证信息，也支持分享验证信息的功能，朋友、同事之间也可以用自己手机验证信息了！！此外，这款验证器本地数据加密、网络请求数据包也被加密，安全可靠！！</p>\n<img src=\"/images/qrcode.jpeg\" style=\"border-radius:50%;\" width=\"200\" height=\"200\" alt=\"小程序码\" />","site":{"data":{}},"length":816,"excerpt":"","more":"<blockquote>\n<p>前两天，登录上了Gmail，在垃圾邮件里面发现了一封主题里面包含我邮箱曾经使用过的密码的邮件。出于好奇，点击打开，没想到是一封勒索邮件。之前一直只是在网络、媒体上看到类似的勒索事件，没想到自己也会收到这么一封。</p>\n</blockquote>\n<h1 id=\"邮件内容\"><a href=\"#邮件内容\" class=\"headerlink\" title=\"邮件内容\"></a>邮件内容</h1><p>仔细看了邮件内容，发现这家伙先是说了他知道我曾经使用过这个密码。然后，说明除了他以外并不会让第三个人知道“我给他转账”的事实。接下来嘛，捡了点内容威胁收信人，同时给了一个所谓最好的解决方案。即，给他的比特币钱包转入几千美元。最后，还信誓旦旦地跟你说，如果回复指定的内容，那么他那边就会给你亲朋好友发送所谓的他手里的证明。</p>\n<h1 id=\"事出有因\"><a href=\"#事出有因\" class=\"headerlink\" title=\"事出有因\"></a>事出有因</h1><p>不管怎么回事，数据泄漏是事实。之前很多网站、APP都曾经爆出过用户信息泄漏的丑闻。而这位手里拿到的所谓证据其实是我多年前曾经在其他网站以这个邮箱和这个老密码注册下来的账号。虽然说，并不会真正地威胁到密码安全，但是也可以看出密码撞库的风险。所以，大伙平时设置密码的时候最好尽量不要设置一样的密码，可以开二步验证的就开。</p>\n<h1 id=\"安全验证\"><a href=\"#安全验证\" class=\"headerlink\" title=\"安全验证\"></a>安全验证</h1><p>前段时间，借鉴了一个MIT协议开源的OTP小程序的界面，写了一个OTP验证小程序。传统的OTP验证器（如Google Authenticator）最大的缺点是以APP安装在手机、电脑等终端上。如果终端出现损坏、丢失，那么我们的验证器也随之丢失。我也曾在这个问题上深受困扰。在此之前，唯一的解决办法就是把验证码导入不同的几部手机，确保一台出状况之后，还有其他手机可以用来验证。这款验证器是基于微信小程序开发，数据会被同步到服务器。这样可以在确保数据的完整的同时，只需要手机可以登录微信就可以继续拉取之前的验证码信息，不必担心手机损坏、丢失带来的验证丢失问题。这款验证器支持导入Google Authenticator现有的验证信息，也支持分享验证信息的功能，朋友、同事之间也可以用自己手机验证信息了！！此外，这款验证器本地数据加密、网络请求数据包也被加密，安全可靠！！</p>\n<img src=\"/images/qrcode.jpeg\" style=\"border-radius:50%;\" width=\"200\" height=\"200\" alt=\"小程序码\" />"},{"title":"无聊，顺便说一说Safari的书签删除问题","date":"2018-02-02T23:22:00.000Z","url":"delete-all-safari-bookmarks","description":"使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。","_content":"\n> 使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。\n\n今天凌晨，早早就醒了，看着Finder里面凌乱的文件和文件夹，我决定整理一下。我花了将近六个多小时删除了不少内容，并将大部分归类好，并备份到了家里面的群晖NAS上面。身为一个有着“洁癖”的处女座，我决定一不做二不休，把Chrome上面的书签也整理一下。\n\nChrome浏览器上面的书签是我经年累月积累下来的，足足有3352条。昨天我也因为这些书签的问题很是头疼，找了[Bookmark Sentry](https://chrome.google.com/webstore/detail/bookmark-sentry-scanner/dkedglkmgegjehpknhbplkbfknlneomb)\n以及类似几款Chrome插件，原本想着等插件整理出来后，就全选批量删掉。但是等结果出来了，我又犹豫了。随机点开几个，发现链接还是可用的，我害怕删错，结果还是放弃了。今天再细细查找，发现确实很多网站都打不开了，要不404，要不403，再或者域名没有解析到具体IP了。再者，我发现很多书签即使可以打开，也已经没有存在的必要，那些问题与答案早已经烂熟于心。于我而言，它们已经还没有用处，与一堆垃圾数据无异。所以，没有花多久，我就整理好了。看着最后剩下的书签，瞬间觉得如释重负。\n\n因为之前Safari导入过Chrome的书签，加上Safari是一个僵尸应用的事实，我决定删除掉所有Safari书签。打开Safari后，却发现Safari上面并没有像Chrome一样的书签管理器。我只能选择编辑书签，书签就全部显示出来了。然后，我就想当然地全选了，右击的时候却发现没有删除全部的类似选项。后面去查看了一下资料，才知道\n全选后，拖放到垃圾桶即可。\n\n删完了，休息","source":"_posts/无聊，顺便说一说Safari的书签删除问题.md","raw":"---\ntitle: 无聊，顺便说一说Safari的书签删除问题\ndate: 2018-02-03 07:22:00\ntags: \n  - safari\ncategories:\n  - 记录\nurl: delete-all-safari-bookmarks\ndescription: 使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。\n---\n\n> 使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。\n\n今天凌晨，早早就醒了，看着Finder里面凌乱的文件和文件夹，我决定整理一下。我花了将近六个多小时删除了不少内容，并将大部分归类好，并备份到了家里面的群晖NAS上面。身为一个有着“洁癖”的处女座，我决定一不做二不休，把Chrome上面的书签也整理一下。\n\nChrome浏览器上面的书签是我经年累月积累下来的，足足有3352条。昨天我也因为这些书签的问题很是头疼，找了[Bookmark Sentry](https://chrome.google.com/webstore/detail/bookmark-sentry-scanner/dkedglkmgegjehpknhbplkbfknlneomb)\n以及类似几款Chrome插件，原本想着等插件整理出来后，就全选批量删掉。但是等结果出来了，我又犹豫了。随机点开几个，发现链接还是可用的，我害怕删错，结果还是放弃了。今天再细细查找，发现确实很多网站都打不开了，要不404，要不403，再或者域名没有解析到具体IP了。再者，我发现很多书签即使可以打开，也已经没有存在的必要，那些问题与答案早已经烂熟于心。于我而言，它们已经还没有用处，与一堆垃圾数据无异。所以，没有花多久，我就整理好了。看着最后剩下的书签，瞬间觉得如释重负。\n\n因为之前Safari导入过Chrome的书签，加上Safari是一个僵尸应用的事实，我决定删除掉所有Safari书签。打开Safari后，却发现Safari上面并没有像Chrome一样的书签管理器。我只能选择编辑书签，书签就全部显示出来了。然后，我就想当然地全选了，右击的时候却发现没有删除全部的类似选项。后面去查看了一下资料，才知道\n全选后，拖放到垃圾桶即可。\n\n删完了，休息","slug":"无聊，顺便说一说Safari的书签删除问题","published":1,"updated":"2022-05-12T17:06:41.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6av8003zlvtd9sh03poc","content":"<blockquote>\n<p>使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。</p>\n</blockquote>\n<p>今天凌晨，早早就醒了，看着Finder里面凌乱的文件和文件夹，我决定整理一下。我花了将近六个多小时删除了不少内容，并将大部分归类好，并备份到了家里面的群晖NAS上面。身为一个有着“洁癖”的处女座，我决定一不做二不休，把Chrome上面的书签也整理一下。</p>\n<p>Chrome浏览器上面的书签是我经年累月积累下来的，足足有3352条。昨天我也因为这些书签的问题很是头疼，找了<a href=\"https://chrome.google.com/webstore/detail/bookmark-sentry-scanner/dkedglkmgegjehpknhbplkbfknlneomb\">Bookmark Sentry</a><br>以及类似几款Chrome插件，原本想着等插件整理出来后，就全选批量删掉。但是等结果出来了，我又犹豫了。随机点开几个，发现链接还是可用的，我害怕删错，结果还是放弃了。今天再细细查找，发现确实很多网站都打不开了，要不404，要不403，再或者域名没有解析到具体IP了。再者，我发现很多书签即使可以打开，也已经没有存在的必要，那些问题与答案早已经烂熟于心。于我而言，它们已经还没有用处，与一堆垃圾数据无异。所以，没有花多久，我就整理好了。看着最后剩下的书签，瞬间觉得如释重负。</p>\n<p>因为之前Safari导入过Chrome的书签，加上Safari是一个僵尸应用的事实，我决定删除掉所有Safari书签。打开Safari后，却发现Safari上面并没有像Chrome一样的书签管理器。我只能选择编辑书签，书签就全部显示出来了。然后，我就想当然地全选了，右击的时候却发现没有删除全部的类似选项。后面去查看了一下资料，才知道<br>全选后，拖放到垃圾桶即可。</p>\n<p>删完了，休息</p>\n","site":{"data":{}},"length":716,"excerpt":"","more":"<blockquote>\n<p>使用苹果本已经多年，来来去去，用过几台苹果本，但是对于一些细节还是不能够很好地去使用。一直以来，我都不是很喜欢Safari，也许是因为我更喜欢Google的软件，也许是Safari确实没有那么好用吧。</p>\n</blockquote>\n<p>今天凌晨，早早就醒了，看着Finder里面凌乱的文件和文件夹，我决定整理一下。我花了将近六个多小时删除了不少内容，并将大部分归类好，并备份到了家里面的群晖NAS上面。身为一个有着“洁癖”的处女座，我决定一不做二不休，把Chrome上面的书签也整理一下。</p>\n<p>Chrome浏览器上面的书签是我经年累月积累下来的，足足有3352条。昨天我也因为这些书签的问题很是头疼，找了<a href=\"https://chrome.google.com/webstore/detail/bookmark-sentry-scanner/dkedglkmgegjehpknhbplkbfknlneomb\">Bookmark Sentry</a><br>以及类似几款Chrome插件，原本想着等插件整理出来后，就全选批量删掉。但是等结果出来了，我又犹豫了。随机点开几个，发现链接还是可用的，我害怕删错，结果还是放弃了。今天再细细查找，发现确实很多网站都打不开了，要不404，要不403，再或者域名没有解析到具体IP了。再者，我发现很多书签即使可以打开，也已经没有存在的必要，那些问题与答案早已经烂熟于心。于我而言，它们已经还没有用处，与一堆垃圾数据无异。所以，没有花多久，我就整理好了。看着最后剩下的书签，瞬间觉得如释重负。</p>\n<p>因为之前Safari导入过Chrome的书签，加上Safari是一个僵尸应用的事实，我决定删除掉所有Safari书签。打开Safari后，却发现Safari上面并没有像Chrome一样的书签管理器。我只能选择编辑书签，书签就全部显示出来了。然后，我就想当然地全选了，右击的时候却发现没有删除全部的类似选项。后面去查看了一下资料，才知道<br>全选后，拖放到垃圾桶即可。</p>\n<p>删完了，休息</p>\n"},{"title":"给ESXI创建和卸载USB分区","date":"2018-11-06T23:13:02.000Z","url":"create-and-remove-use-partition-on-esxi","description":"首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。","_content":"\n> 首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。\n\n## 故事的开头\n\n把软路由的硬件处理好，安装好爱快+Lede之后，我还想着试点其他的小东西，尴尬的是存储空间不够了。我实在不想因为一个临时性的想法去把SSD升级一下，毕竟我不打算用来存储内容。巧了，家里面有几个U盘闲置着，所以，我动了点歪脑筋。\n\n## SSH开启\n\nESXI默认并不启动SSH服务，所以，我们需要手动启动一下。打开ESXI的Web\nUI管理界面，我们在左侧选择“主机”-“管理”，在右侧选择服务，我们在列出来的服务里面直接把“TSM”和“TSM-Shell”开启。值得注意的一个小细节是，用SSH客户端连接的时候会提示使用私钥文件登录，我们选择键盘交互，回车一下即可登录。\n\n## 创建存储\n\n首先，我们需要把USB控制器服务关闭。\n\n```\n/etc/init.d/usbarbitrator stop\n```\n\n然后把USB控制器服务的自启动禁用，当然，这个是一个可选操作。\n\n```\nchkconfig usbarbitrator off\n```\n\n接下来，把U盘插入，获取U盘的标识符（类似mpx.vmhbaXX格式）。\n\n```\nls /dev/disks/\n```\n\n写入一个GPT标签（我的U盘标识符是mpx.vmhba33）\n\n```\npartedUtil mklabel /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt\n```\n\n为了创建一个分区，需要知道的数据有USB设备的起始扇区、结束扇区、USB容量大小，以及确定一个GUID\n\n```\npartedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0\n```\n\n执行以上命令之后会得到USB的结束扇区的位置，我们还可以通过以下命令直接获取到正确的结束扇区\n\n```\neval expr $(partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 | tail -1 | awk '{print $1 \" \\\\* \" $2 \" \\\\* \" $3}') - 1\n```\n\n创建分区，记得替换掉结束分区的位置\n\n```\npartedUtil setptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt \"1 2048 31278554 AA31E02A400F11DB9590000C2911D1B8 0\"\n```\n\n通过VMFS5格式化分区\n\n```\nvmkfstools -C vmfs5 -S USB-STORE /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0:1\n```\n\n需要注意的是，格式化需要一定时间，期间最好耐心等待，不要去马上去操作出现在ESXI的USB-STORE分。格式化完成后，控制台会给出相应的提示。\n\n## 卸载USB分区\n\n这个就简单很多了，首先确保在分区里面的虚拟机处于关机状态，然后把虚拟机全部删除后，直接把分区删除掉，最后，恢复一下USB控制器服务的自启动即可。\n\n```\nchkconfig usbarbitrator on\n```\n\n\n启动一下USB控制器服务\n\n```\n/etc/init.d/usbarbitrator start\n```","source":"_posts/给ESXI创建和卸载USB分区.md","raw":"---\ntitle: 给ESXI创建和卸载USB分区\ndate: 2018-11-07 07:13:02\ntags: \n  - esxi\n  - 分区\ncategories:\n  - 技术\nurl: create-and-remove-use-partition-on-esxi\ndescription: 首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。\n---\n\n> 首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。\n\n## 故事的开头\n\n把软路由的硬件处理好，安装好爱快+Lede之后，我还想着试点其他的小东西，尴尬的是存储空间不够了。我实在不想因为一个临时性的想法去把SSD升级一下，毕竟我不打算用来存储内容。巧了，家里面有几个U盘闲置着，所以，我动了点歪脑筋。\n\n## SSH开启\n\nESXI默认并不启动SSH服务，所以，我们需要手动启动一下。打开ESXI的Web\nUI管理界面，我们在左侧选择“主机”-“管理”，在右侧选择服务，我们在列出来的服务里面直接把“TSM”和“TSM-Shell”开启。值得注意的一个小细节是，用SSH客户端连接的时候会提示使用私钥文件登录，我们选择键盘交互，回车一下即可登录。\n\n## 创建存储\n\n首先，我们需要把USB控制器服务关闭。\n\n```\n/etc/init.d/usbarbitrator stop\n```\n\n然后把USB控制器服务的自启动禁用，当然，这个是一个可选操作。\n\n```\nchkconfig usbarbitrator off\n```\n\n接下来，把U盘插入，获取U盘的标识符（类似mpx.vmhbaXX格式）。\n\n```\nls /dev/disks/\n```\n\n写入一个GPT标签（我的U盘标识符是mpx.vmhba33）\n\n```\npartedUtil mklabel /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt\n```\n\n为了创建一个分区，需要知道的数据有USB设备的起始扇区、结束扇区、USB容量大小，以及确定一个GUID\n\n```\npartedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0\n```\n\n执行以上命令之后会得到USB的结束扇区的位置，我们还可以通过以下命令直接获取到正确的结束扇区\n\n```\neval expr $(partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 | tail -1 | awk '{print $1 \" \\\\* \" $2 \" \\\\* \" $3}') - 1\n```\n\n创建分区，记得替换掉结束分区的位置\n\n```\npartedUtil setptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt \"1 2048 31278554 AA31E02A400F11DB9590000C2911D1B8 0\"\n```\n\n通过VMFS5格式化分区\n\n```\nvmkfstools -C vmfs5 -S USB-STORE /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0:1\n```\n\n需要注意的是，格式化需要一定时间，期间最好耐心等待，不要去马上去操作出现在ESXI的USB-STORE分。格式化完成后，控制台会给出相应的提示。\n\n## 卸载USB分区\n\n这个就简单很多了，首先确保在分区里面的虚拟机处于关机状态，然后把虚拟机全部删除后，直接把分区删除掉，最后，恢复一下USB控制器服务的自启动即可。\n\n```\nchkconfig usbarbitrator on\n```\n\n\n启动一下USB控制器服务\n\n```\n/etc/init.d/usbarbitrator start\n```","slug":"给ESXI创建和卸载USB分区","published":1,"updated":"2022-05-12T17:05:22.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6av90041lvtddmc02p6a","content":"<blockquote>\n<p>首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。</p>\n</blockquote>\n<h2 id=\"故事的开头\"><a href=\"#故事的开头\" class=\"headerlink\" title=\"故事的开头\"></a>故事的开头</h2><p>把软路由的硬件处理好，安装好爱快+Lede之后，我还想着试点其他的小东西，尴尬的是存储空间不够了。我实在不想因为一个临时性的想法去把SSD升级一下，毕竟我不打算用来存储内容。巧了，家里面有几个U盘闲置着，所以，我动了点歪脑筋。</p>\n<h2 id=\"SSH开启\"><a href=\"#SSH开启\" class=\"headerlink\" title=\"SSH开启\"></a>SSH开启</h2><p>ESXI默认并不启动SSH服务，所以，我们需要手动启动一下。打开ESXI的Web<br>UI管理界面，我们在左侧选择“主机”-“管理”，在右侧选择服务，我们在列出来的服务里面直接把“TSM”和“TSM-Shell”开启。值得注意的一个小细节是，用SSH客户端连接的时候会提示使用私钥文件登录，我们选择键盘交互，回车一下即可登录。</p>\n<h2 id=\"创建存储\"><a href=\"#创建存储\" class=\"headerlink\" title=\"创建存储\"></a>创建存储</h2><p>首先，我们需要把USB控制器服务关闭。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/usbarbitrator stop</span><br></pre></td></tr></table></figure>\n\n<p>然后把USB控制器服务的自启动禁用，当然，这个是一个可选操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig usbarbitrator off</span><br></pre></td></tr></table></figure>\n\n<p>接下来，把U盘插入，获取U盘的标识符（类似mpx.vmhbaXX格式）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /dev/disks/</span><br></pre></td></tr></table></figure>\n\n<p>写入一个GPT标签（我的U盘标识符是mpx.vmhba33）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil mklabel /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt</span><br></pre></td></tr></table></figure>\n\n<p>为了创建一个分区，需要知道的数据有USB设备的起始扇区、结束扇区、USB容量大小，以及确定一个GUID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0</span><br></pre></td></tr></table></figure>\n\n<p>执行以上命令之后会得到USB的结束扇区的位置，我们还可以通过以下命令直接获取到正确的结束扇区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval expr $(partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 | tail -1 | awk &#x27;&#123;print $1 &quot; \\\\* &quot; $2 &quot; \\\\* &quot; $3&#125;&#x27;) - 1</span><br></pre></td></tr></table></figure>\n\n<p>创建分区，记得替换掉结束分区的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil setptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt &quot;1 2048 31278554 AA31E02A400F11DB9590000C2911D1B8 0&quot;</span><br></pre></td></tr></table></figure>\n\n<p>通过VMFS5格式化分区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmkfstools -C vmfs5 -S USB-STORE /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0:1</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，格式化需要一定时间，期间最好耐心等待，不要去马上去操作出现在ESXI的USB-STORE分。格式化完成后，控制台会给出相应的提示。</p>\n<h2 id=\"卸载USB分区\"><a href=\"#卸载USB分区\" class=\"headerlink\" title=\"卸载USB分区\"></a>卸载USB分区</h2><p>这个就简单很多了，首先确保在分区里面的虚拟机处于关机状态，然后把虚拟机全部删除后，直接把分区删除掉，最后，恢复一下USB控制器服务的自启动即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig usbarbitrator on</span><br></pre></td></tr></table></figure>\n\n\n<p>启动一下USB控制器服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/usbarbitrator start</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":1334,"excerpt":"","more":"<blockquote>\n<p>首先呢，简单地说一下ESXI。ESXI是一款服务器级别的虚拟机，多被用于服务器领域，而最近火起来的很多软路由多系统共存的解决方案也都大多选择了ESXI。而我，也过了一回软路由的瘾。</p>\n</blockquote>\n<h2 id=\"故事的开头\"><a href=\"#故事的开头\" class=\"headerlink\" title=\"故事的开头\"></a>故事的开头</h2><p>把软路由的硬件处理好，安装好爱快+Lede之后，我还想着试点其他的小东西，尴尬的是存储空间不够了。我实在不想因为一个临时性的想法去把SSD升级一下，毕竟我不打算用来存储内容。巧了，家里面有几个U盘闲置着，所以，我动了点歪脑筋。</p>\n<h2 id=\"SSH开启\"><a href=\"#SSH开启\" class=\"headerlink\" title=\"SSH开启\"></a>SSH开启</h2><p>ESXI默认并不启动SSH服务，所以，我们需要手动启动一下。打开ESXI的Web<br>UI管理界面，我们在左侧选择“主机”-“管理”，在右侧选择服务，我们在列出来的服务里面直接把“TSM”和“TSM-Shell”开启。值得注意的一个小细节是，用SSH客户端连接的时候会提示使用私钥文件登录，我们选择键盘交互，回车一下即可登录。</p>\n<h2 id=\"创建存储\"><a href=\"#创建存储\" class=\"headerlink\" title=\"创建存储\"></a>创建存储</h2><p>首先，我们需要把USB控制器服务关闭。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/usbarbitrator stop</span><br></pre></td></tr></table></figure>\n\n<p>然后把USB控制器服务的自启动禁用，当然，这个是一个可选操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig usbarbitrator off</span><br></pre></td></tr></table></figure>\n\n<p>接下来，把U盘插入，获取U盘的标识符（类似mpx.vmhbaXX格式）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /dev/disks/</span><br></pre></td></tr></table></figure>\n\n<p>写入一个GPT标签（我的U盘标识符是mpx.vmhba33）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil mklabel /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt</span><br></pre></td></tr></table></figure>\n\n<p>为了创建一个分区，需要知道的数据有USB设备的起始扇区、结束扇区、USB容量大小，以及确定一个GUID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0</span><br></pre></td></tr></table></figure>\n\n<p>执行以上命令之后会得到USB的结束扇区的位置，我们还可以通过以下命令直接获取到正确的结束扇区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval expr $(partedUtil getptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 | tail -1 | awk &#x27;&#123;print $1 &quot; \\\\* &quot; $2 &quot; \\\\* &quot; $3&#125;&#x27;) - 1</span><br></pre></td></tr></table></figure>\n\n<p>创建分区，记得替换掉结束分区的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">partedUtil setptbl /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0 gpt &quot;1 2048 31278554 AA31E02A400F11DB9590000C2911D1B8 0&quot;</span><br></pre></td></tr></table></figure>\n\n<p>通过VMFS5格式化分区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmkfstools -C vmfs5 -S USB-STORE /dev/disks/mpx.vmhba33\\:C0\\:T0\\:L0:1</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，格式化需要一定时间，期间最好耐心等待，不要去马上去操作出现在ESXI的USB-STORE分。格式化完成后，控制台会给出相应的提示。</p>\n<h2 id=\"卸载USB分区\"><a href=\"#卸载USB分区\" class=\"headerlink\" title=\"卸载USB分区\"></a>卸载USB分区</h2><p>这个就简单很多了，首先确保在分区里面的虚拟机处于关机状态，然后把虚拟机全部删除后，直接把分区删除掉，最后，恢复一下USB控制器服务的自启动即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig usbarbitrator on</span><br></pre></td></tr></table></figure>\n\n\n<p>启动一下USB控制器服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/usbarbitrator start</span><br></pre></td></tr></table></figure>"},{"title":"自定义OpenWRT的启动脚本","date":"2020-02-19T10:37:44.000Z","url":"zi-ding-yi-openwrtde-qi-dong-jiao-ben","description":"OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！","_content":"\n> OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！\n\n## 建立启动脚本\n\n找一个地方创建一个shell脚本，强烈建议不要放置在/tmp目录，可能会被清除释放。例如：在/home下面新建一个脚本叫做leochan.me.sh。\n\n```\ncd /home\necho '#!/bin/sh' > leochan.me.sh\necho '/bin/echo leochan.me > /home/leochan.me.log' >> leochan.me.sh\nchmod +x leochan.me.sh\n```\n\n这是一个很简单的脚本，只是为了说明，请自己根据需求写入相应的脚本内容。\n\n## 创建procd脚本\n\nOpenWRT是基于procd守护进程的，也就是说procd作为父级进程监控各个进程的状态。\n\n```\ncat << EOF > /etc/init.d/leochan\n#!/bin/sh /etc/rc.common\nUSE_PROCD=1\nSTART=95\nSTOP=01\nstart_service() {\n    procd_open_instance\n    procd_set_param command /bin/sh \"/home/leochan.me.sh\"\n    procd_close_instance\n}\nEOF\nchmod 755 /etc/init.d/leochan\n```\n上面只有两行命令，chmod 755 /etc/init.d/leochan是单独的一行，上面的是一行。\n\n## 应用\n\n激活脚本\n\n```\n/etc/init.d/leochan enable\n```\n#查看生效的启动脚本\n\n```\nls -la /etc/rc.d/S*\n```\n启动脚本\n\n```\n/etc/init.d/leochan start\n```\n验证结果 \n\n/home/leochan.me.log里面有leochan.me说明启动正常\n\n```\ncat /home/leochan.me.log\n```\n\n## 重要提示\n\n最好不要直接进入/etc/init.d目录复制一份，然后仿制应用，否则会出现无法打开OpenWRT WebUI的情况。出现这种情况，只要登录SSH，进入/etc/init.d，删除掉那个复制创建的脚本，断电重启即可！！","source":"_posts/自定义OpenWRT的启动脚本.md","raw":"---\ntitle: 自定义OpenWRT的启动脚本\ndate: 2020-02-19 18:37:44\ntags: \n  - OpenWRT\n  - 自启动\ncategories:\n  - 技术\nurl: zi-ding-yi-openwrtde-qi-dong-jiao-ben\ndescription: OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！\n---\n\n> OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！\n\n## 建立启动脚本\n\n找一个地方创建一个shell脚本，强烈建议不要放置在/tmp目录，可能会被清除释放。例如：在/home下面新建一个脚本叫做leochan.me.sh。\n\n```\ncd /home\necho '#!/bin/sh' > leochan.me.sh\necho '/bin/echo leochan.me > /home/leochan.me.log' >> leochan.me.sh\nchmod +x leochan.me.sh\n```\n\n这是一个很简单的脚本，只是为了说明，请自己根据需求写入相应的脚本内容。\n\n## 创建procd脚本\n\nOpenWRT是基于procd守护进程的，也就是说procd作为父级进程监控各个进程的状态。\n\n```\ncat << EOF > /etc/init.d/leochan\n#!/bin/sh /etc/rc.common\nUSE_PROCD=1\nSTART=95\nSTOP=01\nstart_service() {\n    procd_open_instance\n    procd_set_param command /bin/sh \"/home/leochan.me.sh\"\n    procd_close_instance\n}\nEOF\nchmod 755 /etc/init.d/leochan\n```\n上面只有两行命令，chmod 755 /etc/init.d/leochan是单独的一行，上面的是一行。\n\n## 应用\n\n激活脚本\n\n```\n/etc/init.d/leochan enable\n```\n#查看生效的启动脚本\n\n```\nls -la /etc/rc.d/S*\n```\n启动脚本\n\n```\n/etc/init.d/leochan start\n```\n验证结果 \n\n/home/leochan.me.log里面有leochan.me说明启动正常\n\n```\ncat /home/leochan.me.log\n```\n\n## 重要提示\n\n最好不要直接进入/etc/init.d目录复制一份，然后仿制应用，否则会出现无法打开OpenWRT WebUI的情况。出现这种情况，只要登录SSH，进入/etc/init.d，删除掉那个复制创建的脚本，断电重启即可！！","slug":"自定义OpenWRT的启动脚本","published":1,"updated":"2022-05-12T17:07:38.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6ava0044lvtd39hl3aiv","content":"<blockquote>\n<p>OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！</p>\n</blockquote>\n<h2 id=\"建立启动脚本\"><a href=\"#建立启动脚本\" class=\"headerlink\" title=\"建立启动脚本\"></a>建立启动脚本</h2><p>找一个地方创建一个shell脚本，强烈建议不要放置在&#x2F;tmp目录，可能会被清除释放。例如：在&#x2F;home下面新建一个脚本叫做leochan.me.sh。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home</span><br><span class=\"line\">echo &#x27;#!/bin/sh&#x27; &gt; leochan.me.sh</span><br><span class=\"line\">echo &#x27;/bin/echo leochan.me &gt; /home/leochan.me.log&#x27; &gt;&gt; leochan.me.sh</span><br><span class=\"line\">chmod +x leochan.me.sh</span><br></pre></td></tr></table></figure>\n\n<p>这是一个很简单的脚本，只是为了说明，请自己根据需求写入相应的脚本内容。</p>\n<h2 id=\"创建procd脚本\"><a href=\"#创建procd脚本\" class=\"headerlink\" title=\"创建procd脚本\"></a>创建procd脚本</h2><p>OpenWRT是基于procd守护进程的，也就是说procd作为父级进程监控各个进程的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt; /etc/init.d/leochan</span><br><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\">USE_PROCD=1</span><br><span class=\"line\">START=95</span><br><span class=\"line\">STOP=01</span><br><span class=\"line\">start_service() &#123;</span><br><span class=\"line\">    procd_open_instance</span><br><span class=\"line\">    procd_set_param command /bin/sh &quot;/home/leochan.me.sh&quot;</span><br><span class=\"line\">    procd_close_instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 755 /etc/init.d/leochan</span><br></pre></td></tr></table></figure>\n<p>上面只有两行命令，chmod 755 &#x2F;etc&#x2F;init.d&#x2F;leochan是单独的一行，上面的是一行。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>激活脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/leochan enable</span><br></pre></td></tr></table></figure>\n<p>#查看生效的启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la /etc/rc.d/S*</span><br></pre></td></tr></table></figure>\n<p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/leochan start</span><br></pre></td></tr></table></figure>\n<p>验证结果 </p>\n<p>&#x2F;home&#x2F;leochan.me.log里面有leochan.me说明启动正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /home/leochan.me.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重要提示\"><a href=\"#重要提示\" class=\"headerlink\" title=\"重要提示\"></a>重要提示</h2><p>最好不要直接进入&#x2F;etc&#x2F;init.d目录复制一份，然后仿制应用，否则会出现无法打开OpenWRT WebUI的情况。出现这种情况，只要登录SSH，进入&#x2F;etc&#x2F;init.d，删除掉那个复制创建的脚本，断电重启即可！！</p>\n","site":{"data":{}},"length":1077,"excerpt":"","more":"<blockquote>\n<p>OpenWRT是最流行的开源路由器系统，貌似没有之一。很出名的Lede是基于OpenWRT开发的，甚至于最近声名鹊起的国内企业开发的高恪路由器系统也是基于OpenWRT开发的。对于使用者来说，自定义OpenWRT的启动脚本，也是一种必要的技能！！</p>\n</blockquote>\n<h2 id=\"建立启动脚本\"><a href=\"#建立启动脚本\" class=\"headerlink\" title=\"建立启动脚本\"></a>建立启动脚本</h2><p>找一个地方创建一个shell脚本，强烈建议不要放置在&#x2F;tmp目录，可能会被清除释放。例如：在&#x2F;home下面新建一个脚本叫做leochan.me.sh。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home</span><br><span class=\"line\">echo &#x27;#!/bin/sh&#x27; &gt; leochan.me.sh</span><br><span class=\"line\">echo &#x27;/bin/echo leochan.me &gt; /home/leochan.me.log&#x27; &gt;&gt; leochan.me.sh</span><br><span class=\"line\">chmod +x leochan.me.sh</span><br></pre></td></tr></table></figure>\n\n<p>这是一个很简单的脚本，只是为了说明，请自己根据需求写入相应的脚本内容。</p>\n<h2 id=\"创建procd脚本\"><a href=\"#创建procd脚本\" class=\"headerlink\" title=\"创建procd脚本\"></a>创建procd脚本</h2><p>OpenWRT是基于procd守护进程的，也就是说procd作为父级进程监控各个进程的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt; /etc/init.d/leochan</span><br><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\">USE_PROCD=1</span><br><span class=\"line\">START=95</span><br><span class=\"line\">STOP=01</span><br><span class=\"line\">start_service() &#123;</span><br><span class=\"line\">    procd_open_instance</span><br><span class=\"line\">    procd_set_param command /bin/sh &quot;/home/leochan.me.sh&quot;</span><br><span class=\"line\">    procd_close_instance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 755 /etc/init.d/leochan</span><br></pre></td></tr></table></figure>\n<p>上面只有两行命令，chmod 755 &#x2F;etc&#x2F;init.d&#x2F;leochan是单独的一行，上面的是一行。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>激活脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/leochan enable</span><br></pre></td></tr></table></figure>\n<p>#查看生效的启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la /etc/rc.d/S*</span><br></pre></td></tr></table></figure>\n<p>启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/leochan start</span><br></pre></td></tr></table></figure>\n<p>验证结果 </p>\n<p>&#x2F;home&#x2F;leochan.me.log里面有leochan.me说明启动正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /home/leochan.me.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重要提示\"><a href=\"#重要提示\" class=\"headerlink\" title=\"重要提示\"></a>重要提示</h2><p>最好不要直接进入&#x2F;etc&#x2F;init.d目录复制一份，然后仿制应用，否则会出现无法打开OpenWRT WebUI的情况。出现这种情况，只要登录SSH，进入&#x2F;etc&#x2F;init.d，删除掉那个复制创建的脚本，断电重启即可！！</p>\n"},{"title":"解除denyhosts黑名单里面的IP","date":"2018-01-12T23:07:00.000Z","url":"remove-the-ip-blocked-by-denyhosts","description":"denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！","_content":"\n> denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！\n\n## 方法一\n\n```\necho '' > /usr/share/denyhosts/data/hosts\necho '' > /usr/share/denyhosts/data/hosts-restricted\necho '' > /usr/share/denyhosts/data/hosts-root\necho '' > /usr/share/denyhosts/data/hosts-valid\necho '' > /usr/share/denyhosts/data/users-hosts\necho '' > /etc/hosts.deny\necho '' > /var/log/secure\n```\n\n\n上面的shell命令主要是为了覆盖上面的几个文件。当然我们可以使用tee命令结合echo批量处理。\n\n```\necho '' | tee /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts /etc/hosts.deny /var/log/secure\n```\n\n这个方法很粗暴，不保留任何的失败记录和黑名单。如果是单个IP或者是不介意丢失那些信息，那这个是最好最便捷的方法。如果介意，那可以试试方法二。\n\n## 方法二\n\n```\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-restricted \nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-root\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-valid\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/users-hosts\nsed -i '/192.168.1.1/d' /etc/hosts.deny\nsed -i '/192.168.1.1/d' /var/log/secure\n```\n\n上面的shell命令是在那些文件里面删除含有192.168.1.1的行！！","source":"_posts/解除denyhosts黑名单里面的IP.md","raw":"---\ntitle: 解除denyhosts黑名单里面的IP\ndate: 2018-01-13 07:07:00\ntags: \n  - denyhosts\ncategories:\n  - 技术\nurl: remove-the-ip-blocked-by-denyhosts\ndescription: denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！\n---\n\n> denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！\n\n## 方法一\n\n```\necho '' > /usr/share/denyhosts/data/hosts\necho '' > /usr/share/denyhosts/data/hosts-restricted\necho '' > /usr/share/denyhosts/data/hosts-root\necho '' > /usr/share/denyhosts/data/hosts-valid\necho '' > /usr/share/denyhosts/data/users-hosts\necho '' > /etc/hosts.deny\necho '' > /var/log/secure\n```\n\n\n上面的shell命令主要是为了覆盖上面的几个文件。当然我们可以使用tee命令结合echo批量处理。\n\n```\necho '' | tee /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts /etc/hosts.deny /var/log/secure\n```\n\n这个方法很粗暴，不保留任何的失败记录和黑名单。如果是单个IP或者是不介意丢失那些信息，那这个是最好最便捷的方法。如果介意，那可以试试方法二。\n\n## 方法二\n\n```\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-restricted \nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-root\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/hosts-valid\nsed -i '/192.168.1.1/d' /usr/share/denyhosts/data/users-hosts\nsed -i '/192.168.1.1/d' /etc/hosts.deny\nsed -i '/192.168.1.1/d' /var/log/secure\n```\n\n上面的shell命令是在那些文件里面删除含有192.168.1.1的行！！","slug":"解除denyhosts黑名单里面的IP","published":1,"updated":"2022-05-12T17:05:31.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6ava0047lvtdfh1i5y6d","content":"<blockquote>\n<p>denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！</p>\n</blockquote>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-restricted</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-root</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-valid</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/users-hosts</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /etc/hosts.deny</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /var/log/secure</span><br></pre></td></tr></table></figure>\n\n\n<p>上面的shell命令主要是为了覆盖上面的几个文件。当然我们可以使用tee命令结合echo批量处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;&#x27; | tee /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts /etc/hosts.deny /var/log/secure</span><br></pre></td></tr></table></figure>\n\n<p>这个方法很粗暴，不保留任何的失败记录和黑名单。如果是单个IP或者是不介意丢失那些信息，那这个是最好最便捷的方法。如果介意，那可以试试方法二。</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-restricted </span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-root</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-valid</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/users-hosts</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /etc/hosts.deny</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /var/log/secure</span><br></pre></td></tr></table></figure>\n\n<p>上面的shell命令是在那些文件里面删除含有192.168.1.1的行！！</p>\n","site":{"data":{}},"length":1308,"excerpt":"","more":"<blockquote>\n<p>denyhosts为我们保护服务器提供了一种很好的保护机制。但是有时候使用不当，自己的IP就会被加入到黑名单里面！！我现在以Centos7.3为例，说说怎么解除被封禁的IP吧。其他版本的Linux发行版的方式，大家可以举一反三！！</p>\n</blockquote>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-restricted</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-root</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/hosts-valid</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /usr/share/denyhosts/data/users-hosts</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /etc/hosts.deny</span><br><span class=\"line\">echo &#x27;&#x27; &gt; /var/log/secure</span><br></pre></td></tr></table></figure>\n\n\n<p>上面的shell命令主要是为了覆盖上面的几个文件。当然我们可以使用tee命令结合echo批量处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;&#x27; | tee /usr/share/denyhosts/data/hosts /usr/share/denyhosts/data/hosts-restricted /usr/share/denyhosts/data/hosts-root /usr/share/denyhosts/data/hosts-valid /usr/share/denyhosts/data/users-hosts /etc/hosts.deny /var/log/secure</span><br></pre></td></tr></table></figure>\n\n<p>这个方法很粗暴，不保留任何的失败记录和黑名单。如果是单个IP或者是不介意丢失那些信息，那这个是最好最便捷的方法。如果介意，那可以试试方法二。</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-restricted </span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-root</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/hosts-valid</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /usr/share/denyhosts/data/users-hosts</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /etc/hosts.deny</span><br><span class=\"line\">sed -i &#x27;/192.168.1.1/d&#x27; /var/log/secure</span><br></pre></td></tr></table></figure>\n\n<p>上面的shell命令是在那些文件里面删除含有192.168.1.1的行！！</p>\n"},{"title":"让电脑和NAS断网后自动关机","date":"2018-08-23T00:03:00.000Z","url":"shutdown-after-offline-on-pc-and-nas","description":"最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。","_content":"\n> 最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。\n\n## NAS断网关机\n\n买UPS的时候没有注意到UPS的牌子以及型号，UPS是买回来了，不过群晖的操作系统“并不支持”。之所以说不支持，只是不能支持群晖NAS自带的不断电系统，才有了下面的变通。稍微对linux系统熟悉的人都知道群晖的DSM其实是一个Linux发行版。shell脚本内容如下：\n\n```\n#!/bin/bash\n  \nIP=\"192.168.1.1\"\nNUM=1\nwhile [ $NUM -le 5 ]; do\n    if ping -c 1 $IP > /dev/null; then\n        echo \"$IP Ping is successful.\"\n        break\n    else\n        let NUM++\n    fi\ndone\nif [ $NUM -ge 5 ];then\n    echo \"Power Off\"\n    poweroff\nelse\n    echo \"Power On\"\nfi\n```\n\n其实很简单，简单解释一下。IP变量指定路由器IP，NUM是一个初始化变量。接下来进入一个循环，当NUM小于5的时候，PING一下路由器，如果PING通，输出一个提示，并跳出循环；如果无法PING通，则让NUM变量加1。循环完成后判断一下NUM的值是否大于或者等于5，如果是就输出提示并关机，否则只输出提示。建议在Linux上面保存上面的内存成shell脚本文件，名称是poweroff.sh。\n\n 1. 把上面保存的脚本文件放到NAS上File Station的shell文件夹，如果没有shell文件夹，新建就好；\n 2. 依次进入“控制面板》任务计划”；\n 3. 在右侧顶部，依次点击“新增》计划的任务》用户定义的脚本”；\n 4. 在创建任务窗口上面点击“计划”tab，在日期设置项里面选择“在以下天中运行”，并且设置下面的下拉框值成“每天”；然后在时间设置项里面首次运行时间设置成“00:00”，把最后运行时间设置成“23:59”，把运行频率修改成“每5分钟”；\n 5. 点击“任务设置”tab，在运行命令下面的子设置项的文本框输入\"bash /volume1/shell/poweroff.sh\"（不含引号）；\n 6. 点击窗口下面的“确定”保存设置即可；\n\n## windows断网关机\n\nwindows关机依赖于windows的事件机制。不需要写什么脚本，按以下步骤操作即可！\n\n 1.  首先需要确定电脑连接网络网卡、路由器不经常变更，一句话，不经常变更网络设备以及环境；\n 2.  找出事件ID，依次点击“控制面板》系统和安全》管理工具》事件查看器”，打开事件查看器；\n 3.  在左边的事件查看器（本地）下面依次展开“应用程序和服务日志》Microsoft》Windows》NetworkProfile》Operational”；\n 4.  在右边的顶部，依次点击不同事件ID的信息查看说明（同一个事件ID的多个信息点击其中一个即可），直到找到详情里面的常规tab里面的状态是“已断开连接”的时候停下来，记住事件ID；\n 5.  依次点击“控制面板》系统和安全》管理工具》任务计划程序”，启动任务计划程序；\n 6.  点击顶部的“操作》创建任务”，打开创建任务窗口；\n 7.  在常规tab里面输入一个名称，描述随便写，选择“不管用户是否登录都要运行（W）”，并选择“使用最高权限运行（I）”；\n 8.  在触发器tab里面点击新建按钮，在开始任务（G）那里选择“发生事件时”，在设置区域里面选择“基本”，在日志（O）那里选择“Microsoft-Windows-NetworkProfile/Operational”，在源（S）那里选择“NetworkProfile”，在事件ID（T）那里输入上面第2、3、4步获取到的事件ID，点击“确定”即可；\n 9.  在操作tab里面点击新建打开编辑操作对话框，在操作（I）那里选择“启动程序”，在程序或脚本（P）那里输入“C:\\Windows\\System32\\shutdown.exe”，在添加参数（可选）（A）那里输入“-f\n     -s -t 60 /c \"网络异常，可能是因为市电故障。系统即将于1分钟后关闭\"”，点击确定保存；\n 10. 点击创建任务窗口上面的确定保存即可！\n\n注意，UPS不能给路由器供电，这样子市电断了之后，路由器会断电，windows系统的断网事件会被触发并通知系统执行程序，从而达到断网关机的目的！","source":"_posts/让电脑和NAS断网后自动关机.md","raw":"---\ntitle: 让电脑和NAS断网后自动关机\ndate: 2018-08-23 08:03:00\ntags: \n  - ups\n  - NAS\n  - 断网自动关机\ncategories:\n  - 技术\nurl: shutdown-after-offline-on-pc-and-nas\ndescription: 最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。\n---\n\n> 最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。\n\n## NAS断网关机\n\n买UPS的时候没有注意到UPS的牌子以及型号，UPS是买回来了，不过群晖的操作系统“并不支持”。之所以说不支持，只是不能支持群晖NAS自带的不断电系统，才有了下面的变通。稍微对linux系统熟悉的人都知道群晖的DSM其实是一个Linux发行版。shell脚本内容如下：\n\n```\n#!/bin/bash\n  \nIP=\"192.168.1.1\"\nNUM=1\nwhile [ $NUM -le 5 ]; do\n    if ping -c 1 $IP > /dev/null; then\n        echo \"$IP Ping is successful.\"\n        break\n    else\n        let NUM++\n    fi\ndone\nif [ $NUM -ge 5 ];then\n    echo \"Power Off\"\n    poweroff\nelse\n    echo \"Power On\"\nfi\n```\n\n其实很简单，简单解释一下。IP变量指定路由器IP，NUM是一个初始化变量。接下来进入一个循环，当NUM小于5的时候，PING一下路由器，如果PING通，输出一个提示，并跳出循环；如果无法PING通，则让NUM变量加1。循环完成后判断一下NUM的值是否大于或者等于5，如果是就输出提示并关机，否则只输出提示。建议在Linux上面保存上面的内存成shell脚本文件，名称是poweroff.sh。\n\n 1. 把上面保存的脚本文件放到NAS上File Station的shell文件夹，如果没有shell文件夹，新建就好；\n 2. 依次进入“控制面板》任务计划”；\n 3. 在右侧顶部，依次点击“新增》计划的任务》用户定义的脚本”；\n 4. 在创建任务窗口上面点击“计划”tab，在日期设置项里面选择“在以下天中运行”，并且设置下面的下拉框值成“每天”；然后在时间设置项里面首次运行时间设置成“00:00”，把最后运行时间设置成“23:59”，把运行频率修改成“每5分钟”；\n 5. 点击“任务设置”tab，在运行命令下面的子设置项的文本框输入\"bash /volume1/shell/poweroff.sh\"（不含引号）；\n 6. 点击窗口下面的“确定”保存设置即可；\n\n## windows断网关机\n\nwindows关机依赖于windows的事件机制。不需要写什么脚本，按以下步骤操作即可！\n\n 1.  首先需要确定电脑连接网络网卡、路由器不经常变更，一句话，不经常变更网络设备以及环境；\n 2.  找出事件ID，依次点击“控制面板》系统和安全》管理工具》事件查看器”，打开事件查看器；\n 3.  在左边的事件查看器（本地）下面依次展开“应用程序和服务日志》Microsoft》Windows》NetworkProfile》Operational”；\n 4.  在右边的顶部，依次点击不同事件ID的信息查看说明（同一个事件ID的多个信息点击其中一个即可），直到找到详情里面的常规tab里面的状态是“已断开连接”的时候停下来，记住事件ID；\n 5.  依次点击“控制面板》系统和安全》管理工具》任务计划程序”，启动任务计划程序；\n 6.  点击顶部的“操作》创建任务”，打开创建任务窗口；\n 7.  在常规tab里面输入一个名称，描述随便写，选择“不管用户是否登录都要运行（W）”，并选择“使用最高权限运行（I）”；\n 8.  在触发器tab里面点击新建按钮，在开始任务（G）那里选择“发生事件时”，在设置区域里面选择“基本”，在日志（O）那里选择“Microsoft-Windows-NetworkProfile/Operational”，在源（S）那里选择“NetworkProfile”，在事件ID（T）那里输入上面第2、3、4步获取到的事件ID，点击“确定”即可；\n 9.  在操作tab里面点击新建打开编辑操作对话框，在操作（I）那里选择“启动程序”，在程序或脚本（P）那里输入“C:\\Windows\\System32\\shutdown.exe”，在添加参数（可选）（A）那里输入“-f\n     -s -t 60 /c \"网络异常，可能是因为市电故障。系统即将于1分钟后关闭\"”，点击确定保存；\n 10. 点击创建任务窗口上面的确定保存即可！\n\n注意，UPS不能给路由器供电，这样子市电断了之后，路由器会断电，windows系统的断网事件会被触发并通知系统执行程序，从而达到断网关机的目的！","slug":"让电脑和NAS断网后自动关机","published":1,"updated":"2022-05-12T17:05:57.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6avb004blvtd4tvdbiah","content":"<blockquote>\n<p>最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。</p>\n</blockquote>\n<h2 id=\"NAS断网关机\"><a href=\"#NAS断网关机\" class=\"headerlink\" title=\"NAS断网关机\"></a>NAS断网关机</h2><p>买UPS的时候没有注意到UPS的牌子以及型号，UPS是买回来了，不过群晖的操作系统“并不支持”。之所以说不支持，只是不能支持群晖NAS自带的不断电系统，才有了下面的变通。稍微对linux系统熟悉的人都知道群晖的DSM其实是一个Linux发行版。shell脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">IP=&quot;192.168.1.1&quot;</span><br><span class=\"line\">NUM=1</span><br><span class=\"line\">while [ $NUM -le 5 ]; do</span><br><span class=\"line\">    if ping -c 1 $IP &gt; /dev/null; then</span><br><span class=\"line\">        echo &quot;$IP Ping is successful.&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else</span><br><span class=\"line\">        let NUM++</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br><span class=\"line\">if [ $NUM -ge 5 ];then</span><br><span class=\"line\">    echo &quot;Power Off&quot;</span><br><span class=\"line\">    poweroff</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Power On&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>其实很简单，简单解释一下。IP变量指定路由器IP，NUM是一个初始化变量。接下来进入一个循环，当NUM小于5的时候，PING一下路由器，如果PING通，输出一个提示，并跳出循环；如果无法PING通，则让NUM变量加1。循环完成后判断一下NUM的值是否大于或者等于5，如果是就输出提示并关机，否则只输出提示。建议在Linux上面保存上面的内存成shell脚本文件，名称是poweroff.sh。</p>\n<ol>\n<li>把上面保存的脚本文件放到NAS上File Station的shell文件夹，如果没有shell文件夹，新建就好；</li>\n<li>依次进入“控制面板》任务计划”；</li>\n<li>在右侧顶部，依次点击“新增》计划的任务》用户定义的脚本”；</li>\n<li>在创建任务窗口上面点击“计划”tab，在日期设置项里面选择“在以下天中运行”，并且设置下面的下拉框值成“每天”；然后在时间设置项里面首次运行时间设置成“00:00”，把最后运行时间设置成“23:59”，把运行频率修改成“每5分钟”；</li>\n<li>点击“任务设置”tab，在运行命令下面的子设置项的文本框输入”bash &#x2F;volume1&#x2F;shell&#x2F;poweroff.sh”（不含引号）；</li>\n<li>点击窗口下面的“确定”保存设置即可；</li>\n</ol>\n<h2 id=\"windows断网关机\"><a href=\"#windows断网关机\" class=\"headerlink\" title=\"windows断网关机\"></a>windows断网关机</h2><p>windows关机依赖于windows的事件机制。不需要写什么脚本，按以下步骤操作即可！</p>\n<ol>\n<li>首先需要确定电脑连接网络网卡、路由器不经常变更，一句话，不经常变更网络设备以及环境；</li>\n<li>找出事件ID，依次点击“控制面板》系统和安全》管理工具》事件查看器”，打开事件查看器；</li>\n<li>在左边的事件查看器（本地）下面依次展开“应用程序和服务日志》Microsoft》Windows》NetworkProfile》Operational”；</li>\n<li>在右边的顶部，依次点击不同事件ID的信息查看说明（同一个事件ID的多个信息点击其中一个即可），直到找到详情里面的常规tab里面的状态是“已断开连接”的时候停下来，记住事件ID；</li>\n<li>依次点击“控制面板》系统和安全》管理工具》任务计划程序”，启动任务计划程序；</li>\n<li>点击顶部的“操作》创建任务”，打开创建任务窗口；</li>\n<li>在常规tab里面输入一个名称，描述随便写，选择“不管用户是否登录都要运行（W）”，并选择“使用最高权限运行（I）”；</li>\n<li>在触发器tab里面点击新建按钮，在开始任务（G）那里选择“发生事件时”，在设置区域里面选择“基本”，在日志（O）那里选择“Microsoft-Windows-NetworkProfile&#x2F;Operational”，在源（S）那里选择“NetworkProfile”，在事件ID（T）那里输入上面第2、3、4步获取到的事件ID，点击“确定”即可；</li>\n<li>在操作tab里面点击新建打开编辑操作对话框，在操作（I）那里选择“启动程序”，在程序或脚本（P）那里输入“C:\\Windows\\System32\\shutdown.exe”，在添加参数（可选）（A）那里输入“-f<br>-s -t 60 &#x2F;c “网络异常，可能是因为市电故障。系统即将于1分钟后关闭””，点击确定保存；</li>\n<li>点击创建任务窗口上面的确定保存即可！</li>\n</ol>\n<p>注意，UPS不能给路由器供电，这样子市电断了之后，路由器会断电，windows系统的断网事件会被触发并通知系统执行程序，从而达到断网关机的目的！</p>\n","site":{"data":{}},"length":1879,"excerpt":"","more":"<blockquote>\n<p>最近搬家了，不妙的事情是最近好像附近特别爱断电，供电环境有点恶劣。而我的台式机都是定时开机，而且即使不动，也经常是锁屏而已。所以，电脑很受伤。而NAS更是常年开着机，硬盘上面存放着大量的数据。所以，在供电环境恶劣的情况下，我不得不买了一台UPS。</p>\n</blockquote>\n<h2 id=\"NAS断网关机\"><a href=\"#NAS断网关机\" class=\"headerlink\" title=\"NAS断网关机\"></a>NAS断网关机</h2><p>买UPS的时候没有注意到UPS的牌子以及型号，UPS是买回来了，不过群晖的操作系统“并不支持”。之所以说不支持，只是不能支持群晖NAS自带的不断电系统，才有了下面的变通。稍微对linux系统熟悉的人都知道群晖的DSM其实是一个Linux发行版。shell脚本内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">IP=&quot;192.168.1.1&quot;</span><br><span class=\"line\">NUM=1</span><br><span class=\"line\">while [ $NUM -le 5 ]; do</span><br><span class=\"line\">    if ping -c 1 $IP &gt; /dev/null; then</span><br><span class=\"line\">        echo &quot;$IP Ping is successful.&quot;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else</span><br><span class=\"line\">        let NUM++</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br><span class=\"line\">if [ $NUM -ge 5 ];then</span><br><span class=\"line\">    echo &quot;Power Off&quot;</span><br><span class=\"line\">    poweroff</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Power On&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>其实很简单，简单解释一下。IP变量指定路由器IP，NUM是一个初始化变量。接下来进入一个循环，当NUM小于5的时候，PING一下路由器，如果PING通，输出一个提示，并跳出循环；如果无法PING通，则让NUM变量加1。循环完成后判断一下NUM的值是否大于或者等于5，如果是就输出提示并关机，否则只输出提示。建议在Linux上面保存上面的内存成shell脚本文件，名称是poweroff.sh。</p>\n<ol>\n<li>把上面保存的脚本文件放到NAS上File Station的shell文件夹，如果没有shell文件夹，新建就好；</li>\n<li>依次进入“控制面板》任务计划”；</li>\n<li>在右侧顶部，依次点击“新增》计划的任务》用户定义的脚本”；</li>\n<li>在创建任务窗口上面点击“计划”tab，在日期设置项里面选择“在以下天中运行”，并且设置下面的下拉框值成“每天”；然后在时间设置项里面首次运行时间设置成“00:00”，把最后运行时间设置成“23:59”，把运行频率修改成“每5分钟”；</li>\n<li>点击“任务设置”tab，在运行命令下面的子设置项的文本框输入”bash &#x2F;volume1&#x2F;shell&#x2F;poweroff.sh”（不含引号）；</li>\n<li>点击窗口下面的“确定”保存设置即可；</li>\n</ol>\n<h2 id=\"windows断网关机\"><a href=\"#windows断网关机\" class=\"headerlink\" title=\"windows断网关机\"></a>windows断网关机</h2><p>windows关机依赖于windows的事件机制。不需要写什么脚本，按以下步骤操作即可！</p>\n<ol>\n<li>首先需要确定电脑连接网络网卡、路由器不经常变更，一句话，不经常变更网络设备以及环境；</li>\n<li>找出事件ID，依次点击“控制面板》系统和安全》管理工具》事件查看器”，打开事件查看器；</li>\n<li>在左边的事件查看器（本地）下面依次展开“应用程序和服务日志》Microsoft》Windows》NetworkProfile》Operational”；</li>\n<li>在右边的顶部，依次点击不同事件ID的信息查看说明（同一个事件ID的多个信息点击其中一个即可），直到找到详情里面的常规tab里面的状态是“已断开连接”的时候停下来，记住事件ID；</li>\n<li>依次点击“控制面板》系统和安全》管理工具》任务计划程序”，启动任务计划程序；</li>\n<li>点击顶部的“操作》创建任务”，打开创建任务窗口；</li>\n<li>在常规tab里面输入一个名称，描述随便写，选择“不管用户是否登录都要运行（W）”，并选择“使用最高权限运行（I）”；</li>\n<li>在触发器tab里面点击新建按钮，在开始任务（G）那里选择“发生事件时”，在设置区域里面选择“基本”，在日志（O）那里选择“Microsoft-Windows-NetworkProfile&#x2F;Operational”，在源（S）那里选择“NetworkProfile”，在事件ID（T）那里输入上面第2、3、4步获取到的事件ID，点击“确定”即可；</li>\n<li>在操作tab里面点击新建打开编辑操作对话框，在操作（I）那里选择“启动程序”，在程序或脚本（P）那里输入“C:\\Windows\\System32\\shutdown.exe”，在添加参数（可选）（A）那里输入“-f<br>-s -t 60 &#x2F;c “网络异常，可能是因为市电故障。系统即将于1分钟后关闭””，点击确定保存；</li>\n<li>点击创建任务窗口上面的确定保存即可！</li>\n</ol>\n<p>注意，UPS不能给路由器供电，这样子市电断了之后，路由器会断电，windows系统的断网事件会被触发并通知系统执行程序，从而达到断网关机的目的！</p>\n"},{"title":"说一说Leanote的使用体验","date":"2018-04-04T23:30:00.000Z","url":"the-use-of-feelings-on-leanote","description":"因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。","_content":"\n> 因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。\n\n## Leanote的优点\n\n * Leanote很轻量，不得不说，Leanote的体积很小\n * Leanote很高效率，基于Go开发，决定了Leanote的运行速度666\n * Leanote的界面足够简洁，个人不太喜欢花哨的界面，比较钟爱简约的界面\n * Leanote安装起来还算是比较容易的，源码编译安装方式上，至少相比Gitlab的不知道少了多少步骤\n * Leanote的数据在自己服务器上面，更加安全，也更加自由\n\n## Leanote的缺点\n\n * Leanote的博客功能多余！不得不说，这个功能完全无用，而且因为界面选择少，在界面上与其他博客发布平台相比，并没有什么优势\n * Leanote的插件处于停摆状态，本来是欢天喜地地去安装了Chrome对应的Leanote插件，用于采集笔记。结果，大失所望，并不能好好地采集文章内容\n * Leanote的PDF导出功能有BUG，没办法导出笔记全部内容（只能导出标题和标签）\n * 没有导出导入MD的功能，如果以后想迁移数据，只能一个个笔记地复制，严重影响体验\n\nLeanote好像还是不适合我自己用的，我原本要求的也不高，就希望有MD导入导出还有导出PDF功能。可时下，看来Leanote还是比较短这个，不是很好用！加上我自己有点“洁癖”，后台管理员竟然不能对用户进行管控，我也是醉了！","source":"_posts/说一说Leanote的使用体验.md","raw":"---\ntitle: 说一说Leanote的使用体验\ndate: 2018-04-05 07:30:00\ntags: \n  - Leanote\ncategories:\n  - 记录\nurl: the-use-of-feelings-on-leanote\ndescription: 因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。\n---\n\n> 因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。\n\n## Leanote的优点\n\n * Leanote很轻量，不得不说，Leanote的体积很小\n * Leanote很高效率，基于Go开发，决定了Leanote的运行速度666\n * Leanote的界面足够简洁，个人不太喜欢花哨的界面，比较钟爱简约的界面\n * Leanote安装起来还算是比较容易的，源码编译安装方式上，至少相比Gitlab的不知道少了多少步骤\n * Leanote的数据在自己服务器上面，更加安全，也更加自由\n\n## Leanote的缺点\n\n * Leanote的博客功能多余！不得不说，这个功能完全无用，而且因为界面选择少，在界面上与其他博客发布平台相比，并没有什么优势\n * Leanote的插件处于停摆状态，本来是欢天喜地地去安装了Chrome对应的Leanote插件，用于采集笔记。结果，大失所望，并不能好好地采集文章内容\n * Leanote的PDF导出功能有BUG，没办法导出笔记全部内容（只能导出标题和标签）\n * 没有导出导入MD的功能，如果以后想迁移数据，只能一个个笔记地复制，严重影响体验\n\nLeanote好像还是不适合我自己用的，我原本要求的也不高，就希望有MD导入导出还有导出PDF功能。可时下，看来Leanote还是比较短这个，不是很好用！加上我自己有点“洁癖”，后台管理员竟然不能对用户进行管控，我也是醉了！","slug":"说一说Leanote的使用体验","published":1,"updated":"2022-05-12T17:06:21.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6avc004dlvtdflgleur4","content":"<blockquote>\n<p>因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。</p>\n</blockquote>\n<h2 id=\"Leanote的优点\"><a href=\"#Leanote的优点\" class=\"headerlink\" title=\"Leanote的优点\"></a>Leanote的优点</h2><ul>\n<li>Leanote很轻量，不得不说，Leanote的体积很小</li>\n<li>Leanote很高效率，基于Go开发，决定了Leanote的运行速度666</li>\n<li>Leanote的界面足够简洁，个人不太喜欢花哨的界面，比较钟爱简约的界面</li>\n<li>Leanote安装起来还算是比较容易的，源码编译安装方式上，至少相比Gitlab的不知道少了多少步骤</li>\n<li>Leanote的数据在自己服务器上面，更加安全，也更加自由</li>\n</ul>\n<h2 id=\"Leanote的缺点\"><a href=\"#Leanote的缺点\" class=\"headerlink\" title=\"Leanote的缺点\"></a>Leanote的缺点</h2><ul>\n<li>Leanote的博客功能多余！不得不说，这个功能完全无用，而且因为界面选择少，在界面上与其他博客发布平台相比，并没有什么优势</li>\n<li>Leanote的插件处于停摆状态，本来是欢天喜地地去安装了Chrome对应的Leanote插件，用于采集笔记。结果，大失所望，并不能好好地采集文章内容</li>\n<li>Leanote的PDF导出功能有BUG，没办法导出笔记全部内容（只能导出标题和标签）</li>\n<li>没有导出导入MD的功能，如果以后想迁移数据，只能一个个笔记地复制，严重影响体验</li>\n</ul>\n<p>Leanote好像还是不适合我自己用的，我原本要求的也不高，就希望有MD导入导出还有导出PDF功能。可时下，看来Leanote还是比较短这个，不是很好用！加上我自己有点“洁癖”，后台管理员竟然不能对用户进行管控，我也是醉了！</p>\n","site":{"data":{}},"length":732,"excerpt":"","more":"<blockquote>\n<p>因为平时的时间比较少，所以在网络上看到好的文章或者知识点，我往往会先把它保存到网络笔记，以便往后阅读。所以，我十分注重网络笔记的使用体验。用过印象笔记，当时觉得还不错。后面碰到了为知，又转移到了为知上。用了许久的为知，我发现为知也不像我当初那时候认为的完美。于是，我看上了Leanote。之前，安装过Leanote，不过因为早期版本的功能无法满足我，所以放弃了。安装好Leanote，体验了一天，说一说。</p>\n</blockquote>\n<h2 id=\"Leanote的优点\"><a href=\"#Leanote的优点\" class=\"headerlink\" title=\"Leanote的优点\"></a>Leanote的优点</h2><ul>\n<li>Leanote很轻量，不得不说，Leanote的体积很小</li>\n<li>Leanote很高效率，基于Go开发，决定了Leanote的运行速度666</li>\n<li>Leanote的界面足够简洁，个人不太喜欢花哨的界面，比较钟爱简约的界面</li>\n<li>Leanote安装起来还算是比较容易的，源码编译安装方式上，至少相比Gitlab的不知道少了多少步骤</li>\n<li>Leanote的数据在自己服务器上面，更加安全，也更加自由</li>\n</ul>\n<h2 id=\"Leanote的缺点\"><a href=\"#Leanote的缺点\" class=\"headerlink\" title=\"Leanote的缺点\"></a>Leanote的缺点</h2><ul>\n<li>Leanote的博客功能多余！不得不说，这个功能完全无用，而且因为界面选择少，在界面上与其他博客发布平台相比，并没有什么优势</li>\n<li>Leanote的插件处于停摆状态，本来是欢天喜地地去安装了Chrome对应的Leanote插件，用于采集笔记。结果，大失所望，并不能好好地采集文章内容</li>\n<li>Leanote的PDF导出功能有BUG，没办法导出笔记全部内容（只能导出标题和标签）</li>\n<li>没有导出导入MD的功能，如果以后想迁移数据，只能一个个笔记地复制，严重影响体验</li>\n</ul>\n<p>Leanote好像还是不适合我自己用的，我原本要求的也不高，就希望有MD导入导出还有导出PDF功能。可时下，看来Leanote还是比较短这个，不是很好用！加上我自己有点“洁癖”，后台管理员竟然不能对用户进行管控，我也是醉了！</p>\n"},{"title":"说一说swoole的安装","date":"2018-08-30T00:07:00.000Z","url":"about-swoole-installtion","description":"因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。","_content":"\n> 因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。\n\n## 环境说明\n\n服务器系统是centos7.4，64bit，系统内核版本（可通过uname\n-a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP\nC扩展，所以也补充一下PHP的版本，是7.1.19。安装的swoole是最新的v4.0.4，支持异步Redis客户端以及HTTP2。这里的说明不涉及Redis的编译安装，因为这个很常用，只需要确保安装的redis版本一定要大于或者等于1.2，原因后面说。\n\n## 安装hiredis\n\nswoole异步redis客户端的实现依赖于hiredis。hiredis是一个基于C开发的redis客户端，要求redis版本必须等于或者大于1.2。github地址是<https://github.com/redis/hiredis>\n\n```\nwget https://github.com/redis/hiredis/archive/v0.13.3.tar.gz\ntar xzf v0.13.3.tar.gz\ncd hiredis*\nmake\nsudo make install\n```\n\n## 安装nghttp2\n\n安装nghttp2是为了解决swoole支持http2的依赖。github地址是<https://github.com/nghttp2/nghttp2>\n\n```\nwget https://github.com/nghttp2/nghttp2/releases/download/v1.32.0/nghttp2-1.32.0.tar.bz2\ntar -jxvf nghttp2-1.32.0.tar.bz2\ncd nghttp2*\n./configure\nmake\nsudo make install\n```\n\n## 安装swoole\n\n这里说一下swoole的版本，有1.×，2.x以及4.x。这里做一下简单的说明，1.x没有支持协程，2.x和4.x都支持协程，所不同者在于4.x是基于boost.context汇编代码实现了全新的协程内核，两者之间没有兼容问题。值得注意的是，1.x和2.x都不会再开发新的特性，所以，如果想多尝试，可选择4.x。\n\n```\nwget https://github.com/swoole/swoole-src/archive/v4.0.4.tar.gz\ntar xzf v4.0.4.tar.gz\ncd swoole*\nphpize\n./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis --enable-mysqlnd\nmake\nsudo make install\n```\n\n## 加载swoole\n\n```\necho 'extension=swoole.so' >> /usr/local/php/etc/php.ini\nservice php-fpm restart\n```\n\n在终端输入php -m | grep swoole，有结果就行！\n\n## 后话\n\n如果重载php fpm的时候出现类似的“libhiredis.so.0.13: cannot open shared object\nfile”的错误，是因为swoole找不到动态库的原因。解决的办法有两个：\n编译安装的swoole的时候修改参数\n\n```\n./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis=/usr/local --enable-mysqlnd\n```\n\n\n或者修改ld.so.conf，让系统搜索动态链接库的时候也搜索指定目录。\n\n```\necho '/usr/local/lib' >> /etc/ld.so.conf\nsudo ldconfig\n```\n\n重载php-fpm即可","source":"_posts/说一说swoole的安装.md","raw":"---\ntitle: 说一说swoole的安装\ndate: 2018-08-30 08:07:00\ntags: \n  - swoole\ncategories:\n  - 技术\nurl: about-swoole-installtion\ndescription: 因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。\n---\n\n> 因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。\n\n## 环境说明\n\n服务器系统是centos7.4，64bit，系统内核版本（可通过uname\n-a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP\nC扩展，所以也补充一下PHP的版本，是7.1.19。安装的swoole是最新的v4.0.4，支持异步Redis客户端以及HTTP2。这里的说明不涉及Redis的编译安装，因为这个很常用，只需要确保安装的redis版本一定要大于或者等于1.2，原因后面说。\n\n## 安装hiredis\n\nswoole异步redis客户端的实现依赖于hiredis。hiredis是一个基于C开发的redis客户端，要求redis版本必须等于或者大于1.2。github地址是<https://github.com/redis/hiredis>\n\n```\nwget https://github.com/redis/hiredis/archive/v0.13.3.tar.gz\ntar xzf v0.13.3.tar.gz\ncd hiredis*\nmake\nsudo make install\n```\n\n## 安装nghttp2\n\n安装nghttp2是为了解决swoole支持http2的依赖。github地址是<https://github.com/nghttp2/nghttp2>\n\n```\nwget https://github.com/nghttp2/nghttp2/releases/download/v1.32.0/nghttp2-1.32.0.tar.bz2\ntar -jxvf nghttp2-1.32.0.tar.bz2\ncd nghttp2*\n./configure\nmake\nsudo make install\n```\n\n## 安装swoole\n\n这里说一下swoole的版本，有1.×，2.x以及4.x。这里做一下简单的说明，1.x没有支持协程，2.x和4.x都支持协程，所不同者在于4.x是基于boost.context汇编代码实现了全新的协程内核，两者之间没有兼容问题。值得注意的是，1.x和2.x都不会再开发新的特性，所以，如果想多尝试，可选择4.x。\n\n```\nwget https://github.com/swoole/swoole-src/archive/v4.0.4.tar.gz\ntar xzf v4.0.4.tar.gz\ncd swoole*\nphpize\n./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis --enable-mysqlnd\nmake\nsudo make install\n```\n\n## 加载swoole\n\n```\necho 'extension=swoole.so' >> /usr/local/php/etc/php.ini\nservice php-fpm restart\n```\n\n在终端输入php -m | grep swoole，有结果就行！\n\n## 后话\n\n如果重载php fpm的时候出现类似的“libhiredis.so.0.13: cannot open shared object\nfile”的错误，是因为swoole找不到动态库的原因。解决的办法有两个：\n编译安装的swoole的时候修改参数\n\n```\n./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis=/usr/local --enable-mysqlnd\n```\n\n\n或者修改ld.so.conf，让系统搜索动态链接库的时候也搜索指定目录。\n\n```\necho '/usr/local/lib' >> /etc/ld.so.conf\nsudo ldconfig\n```\n\n重载php-fpm即可","slug":"说一说swoole的安装","published":1,"updated":"2022-05-12T17:06:28.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6avd004glvtdhn2h47ej","content":"<blockquote>\n<p>因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。</p>\n</blockquote>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>服务器系统是centos7.4，64bit，系统内核版本（可通过uname<br>-a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP<br>C扩展，所以也补充一下PHP的版本，是7.1.19。安装的swoole是最新的v4.0.4，支持异步Redis客户端以及HTTP2。这里的说明不涉及Redis的编译安装，因为这个很常用，只需要确保安装的redis版本一定要大于或者等于1.2，原因后面说。</p>\n<h2 id=\"安装hiredis\"><a href=\"#安装hiredis\" class=\"headerlink\" title=\"安装hiredis\"></a>安装hiredis</h2><p>swoole异步redis客户端的实现依赖于hiredis。hiredis是一个基于C开发的redis客户端，要求redis版本必须等于或者大于1.2。github地址是<a href=\"https://github.com/redis/hiredis\">https://github.com/redis/hiredis</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/redis/hiredis/archive/v0.13.3.tar.gz</span><br><span class=\"line\">tar xzf v0.13.3.tar.gz</span><br><span class=\"line\">cd hiredis*</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nghttp2\"><a href=\"#安装nghttp2\" class=\"headerlink\" title=\"安装nghttp2\"></a>安装nghttp2</h2><p>安装nghttp2是为了解决swoole支持http2的依赖。github地址是<a href=\"https://github.com/nghttp2/nghttp2\">https://github.com/nghttp2/nghttp2</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/nghttp2/nghttp2/releases/download/v1.32.0/nghttp2-1.32.0.tar.bz2</span><br><span class=\"line\">tar -jxvf nghttp2-1.32.0.tar.bz2</span><br><span class=\"line\">cd nghttp2*</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装swoole\"><a href=\"#安装swoole\" class=\"headerlink\" title=\"安装swoole\"></a>安装swoole</h2><p>这里说一下swoole的版本，有1.×，2.x以及4.x。这里做一下简单的说明，1.x没有支持协程，2.x和4.x都支持协程，所不同者在于4.x是基于boost.context汇编代码实现了全新的协程内核，两者之间没有兼容问题。值得注意的是，1.x和2.x都不会再开发新的特性，所以，如果想多尝试，可选择4.x。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/swoole/swoole-src/archive/v4.0.4.tar.gz</span><br><span class=\"line\">tar xzf v4.0.4.tar.gz</span><br><span class=\"line\">cd swoole*</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis --enable-mysqlnd</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载swoole\"><a href=\"#加载swoole\" class=\"headerlink\" title=\"加载swoole\"></a>加载swoole</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;extension=swoole.so&#x27; &gt;&gt; /usr/local/php/etc/php.ini</span><br><span class=\"line\">service php-fpm restart</span><br></pre></td></tr></table></figure>\n\n<p>在终端输入php -m | grep swoole，有结果就行！</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>如果重载php fpm的时候出现类似的“libhiredis.so.0.13: cannot open shared object<br>file”的错误，是因为swoole找不到动态库的原因。解决的办法有两个：<br>编译安装的swoole的时候修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis=/usr/local --enable-mysqlnd</span><br></pre></td></tr></table></figure>\n\n\n<p>或者修改ld.so.conf，让系统搜索动态链接库的时候也搜索指定目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/usr/local/lib&#x27; &gt;&gt; /etc/ld.so.conf</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<p>重载php-fpm即可</p>\n","site":{"data":{}},"length":1674,"excerpt":"","more":"<blockquote>\n<p>因为项目需求，接触过几次swoole。swoole把项目的实现难度降低了一个维度，是一个实实在在的好东西。不过，这个东西也很让很多新手头疼吧，毕竟是一个基于C开发出来的PHP扩展。我也为swoole普及使点力，就说一说swoole的编译安装吧。</p>\n</blockquote>\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>服务器系统是centos7.4，64bit，系统内核版本（可通过uname<br>-a命令查看系统内核版本）3.10.0-693.2.2.el7.x86_64。此外，因为最后是安装了对应的PHP<br>C扩展，所以也补充一下PHP的版本，是7.1.19。安装的swoole是最新的v4.0.4，支持异步Redis客户端以及HTTP2。这里的说明不涉及Redis的编译安装，因为这个很常用，只需要确保安装的redis版本一定要大于或者等于1.2，原因后面说。</p>\n<h2 id=\"安装hiredis\"><a href=\"#安装hiredis\" class=\"headerlink\" title=\"安装hiredis\"></a>安装hiredis</h2><p>swoole异步redis客户端的实现依赖于hiredis。hiredis是一个基于C开发的redis客户端，要求redis版本必须等于或者大于1.2。github地址是<a href=\"https://github.com/redis/hiredis\">https://github.com/redis/hiredis</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/redis/hiredis/archive/v0.13.3.tar.gz</span><br><span class=\"line\">tar xzf v0.13.3.tar.gz</span><br><span class=\"line\">cd hiredis*</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装nghttp2\"><a href=\"#安装nghttp2\" class=\"headerlink\" title=\"安装nghttp2\"></a>安装nghttp2</h2><p>安装nghttp2是为了解决swoole支持http2的依赖。github地址是<a href=\"https://github.com/nghttp2/nghttp2\">https://github.com/nghttp2/nghttp2</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/nghttp2/nghttp2/releases/download/v1.32.0/nghttp2-1.32.0.tar.bz2</span><br><span class=\"line\">tar -jxvf nghttp2-1.32.0.tar.bz2</span><br><span class=\"line\">cd nghttp2*</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装swoole\"><a href=\"#安装swoole\" class=\"headerlink\" title=\"安装swoole\"></a>安装swoole</h2><p>这里说一下swoole的版本，有1.×，2.x以及4.x。这里做一下简单的说明，1.x没有支持协程，2.x和4.x都支持协程，所不同者在于4.x是基于boost.context汇编代码实现了全新的协程内核，两者之间没有兼容问题。值得注意的是，1.x和2.x都不会再开发新的特性，所以，如果想多尝试，可选择4.x。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/swoole/swoole-src/archive/v4.0.4.tar.gz</span><br><span class=\"line\">tar xzf v4.0.4.tar.gz</span><br><span class=\"line\">cd swoole*</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis --enable-mysqlnd</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载swoole\"><a href=\"#加载swoole\" class=\"headerlink\" title=\"加载swoole\"></a>加载swoole</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;extension=swoole.so&#x27; &gt;&gt; /usr/local/php/etc/php.ini</span><br><span class=\"line\">service php-fpm restart</span><br></pre></td></tr></table></figure>\n\n<p>在终端输入php -m | grep swoole，有结果就行！</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>如果重载php fpm的时候出现类似的“libhiredis.so.0.13: cannot open shared object<br>file”的错误，是因为swoole找不到动态库的原因。解决的办法有两个：<br>编译安装的swoole的时候修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-sockets --enable-openssl --enable-http2 --enable-async-redis=/usr/local --enable-mysqlnd</span><br></pre></td></tr></table></figure>\n\n\n<p>或者修改ld.so.conf，让系统搜索动态链接库的时候也搜索指定目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;/usr/local/lib&#x27; &gt;&gt; /etc/ld.so.conf</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<p>重载php-fpm即可</p>\n"},{"title":"说一说群晖版本的inotify+rsync同步","date":"2020-02-19T10:22:50.000Z","url":"shuo-yi-shuo-qun-hui-ban-ben-de-inotify-rsynctong-bu","description":"相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。","_content":"\n> 相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。\n\n## 查找包管理器\n\ninotify是最好的系统监控框架之一。可惜在群晖上面并没有找到相应的套件。而后，考虑过docker，但是考虑到机器硬件有限，也放弃了。因为群晖的DSM是基于linux开发的，所以转而想到利用包管理器安装一下。\n\n1. 切换到root权限\n\n```\nsudo -i\n```\n\n2. 切换到系统根目录\n\n```\ncd /\n```\n\n3. 查找系统是不是有常见的软件包管理器\n\n```\nfind . -type f ( -iname \"yum\" -o -iname \"apt-get\" -o -iname \"ipkg\" -o -iname \"opkg\" -o -iname \"dpkg\" )\n```\n\n通过上面，在系统里面找到了ipkg、opkg和dpkg三个包管理器。\n\n## ipkg安装方式\n\n通过ipkg方式安装一下。\n\n1. 更新软件包列表\n\n```\nipkg update\n```\n\n2. 查找是不是有inotify-tools\n\n```\nipkg list | grep inotify-tools\n```\n\n3. 安装\n\n```\nipkg install inotify-tools\n```\n\n4. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## opkg安装方式\n\n通过opkg方式安装。\n\n1. 更新软件包列表\n\n```\nopkg update\n```\n\n2. 查找是不是有inotify-tools\n\n```\nopkg list | grep inotify-tools\n```\n\n3. 安装\n\n```\nopkg install inotify-tools\n```\n\n4. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## dpkg安装方式\n\n通过dpkg方式安装。\n\n1. 下载软件包\n\n```\nwget http://ftp.br.debian.org/debian/pool/main/i/inotify-tools/inotify-tools_3.14-2_amd64.deb\n```\n\n2. 安装\n\n```\ndpkg -i inotify-tools_3.14-2_amd64.deb\n```\n\n3. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## 配置inotify-tools和rsync\n\nrsync已经默认安装在群晖的DSM系统上面，而inotify-tools和rsync相关配置可以参考一下《[利用inotify+rsync实时同步数据到远程服务器](/sync-data-realtime-with-inotify-rsync/)》，这里就不再多说。\n\n## 一些说明\n\n由于ipkg源极少，强烈建议通过opkg或者dpkg安装。群晖里面的侦听同步脚本需要开机启动，建议加入到群晖的任务计划里面。","source":"_posts/说一说群晖版本的inotify+rsync同步.md","raw":"---\ntitle: 说一说群晖版本的inotify+rsync同步\ndate: 2020-02-19 18:22:50\ntags: \n  - inotify\n  - 群晖\n  - 实时同步\ncategories:\n  - 技术\nurl: shuo-yi-shuo-qun-hui-ban-ben-de-inotify-rsynctong-bu\ndescription: 相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。\n---\n\n> 相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。\n\n## 查找包管理器\n\ninotify是最好的系统监控框架之一。可惜在群晖上面并没有找到相应的套件。而后，考虑过docker，但是考虑到机器硬件有限，也放弃了。因为群晖的DSM是基于linux开发的，所以转而想到利用包管理器安装一下。\n\n1. 切换到root权限\n\n```\nsudo -i\n```\n\n2. 切换到系统根目录\n\n```\ncd /\n```\n\n3. 查找系统是不是有常见的软件包管理器\n\n```\nfind . -type f ( -iname \"yum\" -o -iname \"apt-get\" -o -iname \"ipkg\" -o -iname \"opkg\" -o -iname \"dpkg\" )\n```\n\n通过上面，在系统里面找到了ipkg、opkg和dpkg三个包管理器。\n\n## ipkg安装方式\n\n通过ipkg方式安装一下。\n\n1. 更新软件包列表\n\n```\nipkg update\n```\n\n2. 查找是不是有inotify-tools\n\n```\nipkg list | grep inotify-tools\n```\n\n3. 安装\n\n```\nipkg install inotify-tools\n```\n\n4. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## opkg安装方式\n\n通过opkg方式安装。\n\n1. 更新软件包列表\n\n```\nopkg update\n```\n\n2. 查找是不是有inotify-tools\n\n```\nopkg list | grep inotify-tools\n```\n\n3. 安装\n\n```\nopkg install inotify-tools\n```\n\n4. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## dpkg安装方式\n\n通过dpkg方式安装。\n\n1. 下载软件包\n\n```\nwget http://ftp.br.debian.org/debian/pool/main/i/inotify-tools/inotify-tools_3.14-2_amd64.deb\n```\n\n2. 安装\n\n```\ndpkg -i inotify-tools_3.14-2_amd64.deb\n```\n\n3. 验证安装\n\n```\nwhich inotifywatch\n```\n\n## 配置inotify-tools和rsync\n\nrsync已经默认安装在群晖的DSM系统上面，而inotify-tools和rsync相关配置可以参考一下《[利用inotify+rsync实时同步数据到远程服务器](/sync-data-realtime-with-inotify-rsync/)》，这里就不再多说。\n\n## 一些说明\n\n由于ipkg源极少，强烈建议通过opkg或者dpkg安装。群晖里面的侦听同步脚本需要开机启动，建议加入到群晖的任务计划里面。","slug":"说一说群晖版本的inotify+rsync同步","published":1,"updated":"2022-05-12T17:06:16.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6avf004jlvtdf59s6z2r","content":"<blockquote>\n<p>相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。</p>\n</blockquote>\n<h2 id=\"查找包管理器\"><a href=\"#查找包管理器\" class=\"headerlink\" title=\"查找包管理器\"></a>查找包管理器</h2><p>inotify是最好的系统监控框架之一。可惜在群晖上面并没有找到相应的套件。而后，考虑过docker，但是考虑到机器硬件有限，也放弃了。因为群晖的DSM是基于linux开发的，所以转而想到利用包管理器安装一下。</p>\n<ol>\n<li>切换到root权限</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切换到系统根目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查找系统是不是有常见的软件包管理器</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f ( -iname &quot;yum&quot; -o -iname &quot;apt-get&quot; -o -iname &quot;ipkg&quot; -o -iname &quot;opkg&quot; -o -iname &quot;dpkg&quot; )</span><br></pre></td></tr></table></figure>\n\n<p>通过上面，在系统里面找到了ipkg、opkg和dpkg三个包管理器。</p>\n<h2 id=\"ipkg安装方式\"><a href=\"#ipkg安装方式\" class=\"headerlink\" title=\"ipkg安装方式\"></a>ipkg安装方式</h2><p>通过ipkg方式安装一下。</p>\n<ol>\n<li>更新软件包列表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查找是不是有inotify-tools</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg list | grep inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg install inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opkg安装方式\"><a href=\"#opkg安装方式\" class=\"headerlink\" title=\"opkg安装方式\"></a>opkg安装方式</h2><p>通过opkg方式安装。</p>\n<ol>\n<li>更新软件包列表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查找是不是有inotify-tools</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg list | grep inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dpkg安装方式\"><a href=\"#dpkg安装方式\" class=\"headerlink\" title=\"dpkg安装方式\"></a>dpkg安装方式</h2><p>通过dpkg方式安装。</p>\n<ol>\n<li>下载软件包</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.br.debian.org/debian/pool/main/i/inotify-tools/inotify-tools_3.14-2_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i inotify-tools_3.14-2_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置inotify-tools和rsync\"><a href=\"#配置inotify-tools和rsync\" class=\"headerlink\" title=\"配置inotify-tools和rsync\"></a>配置inotify-tools和rsync</h2><p>rsync已经默认安装在群晖的DSM系统上面，而inotify-tools和rsync相关配置可以参考一下《<a href=\"/sync-data-realtime-with-inotify-rsync/\">利用inotify+rsync实时同步数据到远程服务器</a>》，这里就不再多说。</p>\n<h2 id=\"一些说明\"><a href=\"#一些说明\" class=\"headerlink\" title=\"一些说明\"></a>一些说明</h2><p>由于ipkg源极少，强烈建议通过opkg或者dpkg安装。群晖里面的侦听同步脚本需要开机启动，建议加入到群晖的任务计划里面。</p>\n","site":{"data":{}},"length":1096,"excerpt":"","more":"<blockquote>\n<p>相信很多人都入手了NAS！群晖作为最知名的NAS品牌之一，用户数量当然不在少数了。今年上半年，在给公司选择NAS的时候，就选择了群晖。群晖的系统体验真的没得说，不过还是遇上了一些问题。最要紧的是要部署前端到机器上面，尝试了很多方法都没有办法去满足实时部署的需求。几经尝试，终于得到解决，在此分享一下。</p>\n</blockquote>\n<h2 id=\"查找包管理器\"><a href=\"#查找包管理器\" class=\"headerlink\" title=\"查找包管理器\"></a>查找包管理器</h2><p>inotify是最好的系统监控框架之一。可惜在群晖上面并没有找到相应的套件。而后，考虑过docker，但是考虑到机器硬件有限，也放弃了。因为群晖的DSM是基于linux开发的，所以转而想到利用包管理器安装一下。</p>\n<ol>\n<li>切换到root权限</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切换到系统根目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查找系统是不是有常见的软件包管理器</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f ( -iname &quot;yum&quot; -o -iname &quot;apt-get&quot; -o -iname &quot;ipkg&quot; -o -iname &quot;opkg&quot; -o -iname &quot;dpkg&quot; )</span><br></pre></td></tr></table></figure>\n\n<p>通过上面，在系统里面找到了ipkg、opkg和dpkg三个包管理器。</p>\n<h2 id=\"ipkg安装方式\"><a href=\"#ipkg安装方式\" class=\"headerlink\" title=\"ipkg安装方式\"></a>ipkg安装方式</h2><p>通过ipkg方式安装一下。</p>\n<ol>\n<li>更新软件包列表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查找是不是有inotify-tools</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg list | grep inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipkg install inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"opkg安装方式\"><a href=\"#opkg安装方式\" class=\"headerlink\" title=\"opkg安装方式\"></a>opkg安装方式</h2><p>通过opkg方式安装。</p>\n<ol>\n<li>更新软件包列表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查找是不是有inotify-tools</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg list | grep inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install inotify-tools</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dpkg安装方式\"><a href=\"#dpkg安装方式\" class=\"headerlink\" title=\"dpkg安装方式\"></a>dpkg安装方式</h2><p>通过dpkg方式安装。</p>\n<ol>\n<li>下载软件包</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.br.debian.org/debian/pool/main/i/inotify-tools/inotify-tools_3.14-2_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i inotify-tools_3.14-2_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which inotifywatch</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置inotify-tools和rsync\"><a href=\"#配置inotify-tools和rsync\" class=\"headerlink\" title=\"配置inotify-tools和rsync\"></a>配置inotify-tools和rsync</h2><p>rsync已经默认安装在群晖的DSM系统上面，而inotify-tools和rsync相关配置可以参考一下《<a href=\"/sync-data-realtime-with-inotify-rsync/\">利用inotify+rsync实时同步数据到远程服务器</a>》，这里就不再多说。</p>\n<h2 id=\"一些说明\"><a href=\"#一些说明\" class=\"headerlink\" title=\"一些说明\"></a>一些说明</h2><p>由于ipkg源极少，强烈建议通过opkg或者dpkg安装。群晖里面的侦听同步脚本需要开机启动，建议加入到群晖的任务计划里面。</p>\n"},{"title":"说说利用frm和ibd以及ibdata1文件恢复mysql数据","date":"2018-03-23T23:34:00.000Z","url":"recovering-mysql-database-with-frm-ibd-ibdata1","description":"最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！","_content":"\n> 最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！\n\n## 拉取文件\n\n利用SFTP登录服务器，找到mysql安装目录，把数据库对应的文件夹全部下载了，里面会有frm和ibd文件。还需要下载ibdata1。frm的作用在于存储每一个数据表的描述信息。ibd文件的作用是存储了每一个InnoDB表数据和索引。ibdata1是mysql的共享系统空间，具体什么结构，存储什么内容我们不得而知，因为mysql没有提供相应工具，也没有详细说明这个。\n\n## 新建库和表\n\n这个没有什么好说的，按照原来的库名称新建库，按照原来的表名称新建表。做了这两步新建，新服务器的mysql目录下面就会有对应的frm和ibd文件。然后停止mysql。\n\n## 覆盖数据\n\n最后一步，把拉取下来的文件上传上去对应覆盖。确保覆盖完成后，启动mysql，你会惊喜地发现数据又完整无缺地回来了！！\n\n## 总结\n\n这种方式是针对InnoDB存储引擎的数据库恢复方式。更需要注意的是表独立空间（ibd）是从mysql\n5.6.6起才默认开启的。具体是通过配置innodb_file_per_table去控制的。","source":"_posts/说说利用frm和ibd以及ibdata1文件恢复mysql数据.md","raw":"---\ntitle: 说说利用frm和ibd以及ibdata1文件恢复mysql数据\ndate: 2018-03-24 07:34:00\ntags: \n  - mysql\n  - 数据恢复\ncategories:\n  - 技术\nurl: recovering-mysql-database-with-frm-ibd-ibdata1\ndescription: 最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！\n---\n\n> 最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！\n\n## 拉取文件\n\n利用SFTP登录服务器，找到mysql安装目录，把数据库对应的文件夹全部下载了，里面会有frm和ibd文件。还需要下载ibdata1。frm的作用在于存储每一个数据表的描述信息。ibd文件的作用是存储了每一个InnoDB表数据和索引。ibdata1是mysql的共享系统空间，具体什么结构，存储什么内容我们不得而知，因为mysql没有提供相应工具，也没有详细说明这个。\n\n## 新建库和表\n\n这个没有什么好说的，按照原来的库名称新建库，按照原来的表名称新建表。做了这两步新建，新服务器的mysql目录下面就会有对应的frm和ibd文件。然后停止mysql。\n\n## 覆盖数据\n\n最后一步，把拉取下来的文件上传上去对应覆盖。确保覆盖完成后，启动mysql，你会惊喜地发现数据又完整无缺地回来了！！\n\n## 总结\n\n这种方式是针对InnoDB存储引擎的数据库恢复方式。更需要注意的是表独立空间（ibd）是从mysql\n5.6.6起才默认开启的。具体是通过配置innodb_file_per_table去控制的。","slug":"说说利用frm和ibd以及ibdata1文件恢复mysql数据","published":1,"updated":"2022-05-12T17:06:09.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3in6avf004mlvtdcrzcd2qh","content":"<blockquote>\n<p>最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！</p>\n</blockquote>\n<h2 id=\"拉取文件\"><a href=\"#拉取文件\" class=\"headerlink\" title=\"拉取文件\"></a>拉取文件</h2><p>利用SFTP登录服务器，找到mysql安装目录，把数据库对应的文件夹全部下载了，里面会有frm和ibd文件。还需要下载ibdata1。frm的作用在于存储每一个数据表的描述信息。ibd文件的作用是存储了每一个InnoDB表数据和索引。ibdata1是mysql的共享系统空间，具体什么结构，存储什么内容我们不得而知，因为mysql没有提供相应工具，也没有详细说明这个。</p>\n<h2 id=\"新建库和表\"><a href=\"#新建库和表\" class=\"headerlink\" title=\"新建库和表\"></a>新建库和表</h2><p>这个没有什么好说的，按照原来的库名称新建库，按照原来的表名称新建表。做了这两步新建，新服务器的mysql目录下面就会有对应的frm和ibd文件。然后停止mysql。</p>\n<h2 id=\"覆盖数据\"><a href=\"#覆盖数据\" class=\"headerlink\" title=\"覆盖数据\"></a>覆盖数据</h2><p>最后一步，把拉取下来的文件上传上去对应覆盖。确保覆盖完成后，启动mysql，你会惊喜地发现数据又完整无缺地回来了！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这种方式是针对InnoDB存储引擎的数据库恢复方式。更需要注意的是表独立空间（ibd）是从mysql<br>5.6.6起才默认开启的。具体是通过配置innodb_file_per_table去控制的。</p>\n","site":{"data":{}},"length":642,"excerpt":"","more":"<blockquote>\n<p>最近，有一台服务器的mysql服务down掉了。排查过后，发现是centos系统的空间已经被mysql日志榨干。日志自然是不敢乱动的，所以删除了部分文件。但是，却遇上了文件被删除，空间却没有被释放的情况。按照以往的经验处理了空间没有被释放的问题，但是还是没有释放空间。时间就是金钱，所以Google了一把，解决办法拿到了，但却都没有成功。最后决定先恢复mysql数据再说。几经摸索，终于发现了恢复数据的最正确姿势！</p>\n</blockquote>\n<h2 id=\"拉取文件\"><a href=\"#拉取文件\" class=\"headerlink\" title=\"拉取文件\"></a>拉取文件</h2><p>利用SFTP登录服务器，找到mysql安装目录，把数据库对应的文件夹全部下载了，里面会有frm和ibd文件。还需要下载ibdata1。frm的作用在于存储每一个数据表的描述信息。ibd文件的作用是存储了每一个InnoDB表数据和索引。ibdata1是mysql的共享系统空间，具体什么结构，存储什么内容我们不得而知，因为mysql没有提供相应工具，也没有详细说明这个。</p>\n<h2 id=\"新建库和表\"><a href=\"#新建库和表\" class=\"headerlink\" title=\"新建库和表\"></a>新建库和表</h2><p>这个没有什么好说的，按照原来的库名称新建库，按照原来的表名称新建表。做了这两步新建，新服务器的mysql目录下面就会有对应的frm和ibd文件。然后停止mysql。</p>\n<h2 id=\"覆盖数据\"><a href=\"#覆盖数据\" class=\"headerlink\" title=\"覆盖数据\"></a>覆盖数据</h2><p>最后一步，把拉取下来的文件上传上去对应覆盖。确保覆盖完成后，启动mysql，你会惊喜地发现数据又完整无缺地回来了！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这种方式是针对InnoDB存储引擎的数据库恢复方式。更需要注意的是表独立空间（ibd）是从mysql<br>5.6.6起才默认开启的。具体是通过配置innodb_file_per_table去控制的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3in6aty0005lvtd2d4l01yv","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6au4000blvtda2z7hgi9"},{"post_id":"cl3in6atq0000lvtdg9zkf6jo","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6au5000glvtd0a3i85kw"},{"post_id":"cl3in6atz0006lvtdhslsbhtr","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6au7000jlvtdhqwy6tbc"},{"post_id":"cl3in6au20009lvtd3uyx113d","category_id":"cl16op5qv00036itd16gc2ooy","_id":"cl3in6au8000nlvtd2wnbdjbv"},{"post_id":"cl3in6atu0001lvtdfh2c3tpa","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aua000qlvtd8xsicw19"},{"post_id":"cl3in6au3000alvtd17vg7h3r","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aub000tlvtd5oq0bec2"},{"post_id":"cl3in6au5000flvtdg2zu9w43","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6auc000vlvtdhn6c4fab"},{"post_id":"cl3in6atx0004lvtdcle9f4b9","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aud000xlvtd6jxlc7qb"},{"post_id":"cl3in6au6000ilvtddzs83rvb","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aue0011lvtd5xya3v21"},{"post_id":"cl3in6au7000mlvtd82b86neg","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6auf0014lvtddxlv5z3x"},{"post_id":"cl3in6au8000plvtd3kjt1zbq","category_id":"cl16op5qv00036itd16gc2ooy","_id":"cl3in6aug0018lvtdaq97eph2"},{"post_id":"cl3in6aua000slvtd2tmwdch4","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6auh001alvtd9myd67c0"},{"post_id":"cl3in6auc000ulvtde4mmh7h4","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6auk001dlvtdhek90g2j"},{"post_id":"cl3in6auc000wlvtd2b37b5m1","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6auk001flvtdfc8o5rrs"},{"post_id":"cl3in6aue0010lvtdeab97br8","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aul001ilvtd5255hijp"},{"post_id":"cl3in6auf0013lvtd59b7amy5","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aum001jlvtdabgcap0a"},{"post_id":"cl3in6aug0017lvtd1of2f3xe","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aum001klvtd0jvs2en6"},{"post_id":"cl3in6aug0019lvtd4ev37ibn","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aum001nlvtd63j0erxe"},{"post_id":"cl3in6auj001clvtd0c1m7lib","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aun001plvtdgf2yc3ri"},{"post_id":"cl3in6auk001elvtdflv469n2","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aun001slvtd8bi88451"},{"post_id":"cl3in6aul001hlvtdby89cx0d","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6aun001ulvtddota2syz"},{"post_id":"cl3in6av4003qlvtddrz1dvxk","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6av7003vlvtd36c22pro"},{"post_id":"cl3in6av5003rlvtd07fv0wkb","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6av8003xlvtd0xl153vr"},{"post_id":"cl3in6av5003tlvtd4ogy95e4","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6av80040lvtd4verbm7n"},{"post_id":"cl3in6av6003ulvtd02vw9tkt","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6av90042lvtd5bgn49tz"},{"post_id":"cl3in6av7003wlvtdadmvdvea","category_id":"cl16op5qv00036itd16gc2ooy","_id":"cl3in6ava0045lvtd5bqd1p4g"},{"post_id":"cl3in6av8003zlvtd9sh03poc","category_id":"cl16op5qv00036itd16gc2ooy","_id":"cl3in6avb0048lvtdbitb8lt4"},{"post_id":"cl3in6av90041lvtddmc02p6a","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avc004clvtd0197ajvw"},{"post_id":"cl3in6ava0044lvtd39hl3aiv","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avc004elvtdg65t6f0r"},{"post_id":"cl3in6ava0047lvtdfh1i5y6d","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avd004hlvtdf1m5chdf"},{"post_id":"cl3in6avb004blvtd4tvdbiah","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avf004klvtd69l93xpz"},{"post_id":"cl3in6avc004dlvtdflgleur4","category_id":"cl16op5qv00036itd16gc2ooy","_id":"cl3in6avg004nlvtdg12h2zjc"},{"post_id":"cl3in6avd004glvtdhn2h47ej","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avh004qlvtdat6s7idg"},{"post_id":"cl3in6avf004jlvtdf59s6z2r","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avh004slvtdg4v7ad3g"},{"post_id":"cl3in6avf004mlvtdcrzcd2qh","category_id":"cl3in6atv0002lvtdaeui7ixh","_id":"cl3in6avj004ulvtd1woean4c"}],"PostTag":[{"post_id":"cl3in6au20009lvtd3uyx113d","tag_id":"cl16op5qw00046itd10nvduyr","_id":"cl3in6au5000elvtd39ofdpem"},{"post_id":"cl3in6au20009lvtd3uyx113d","tag_id":"cl16op5qz00066itd67gnfacx","_id":"cl3in6au6000hlvtdem9s8dgz"},{"post_id":"cl3in6atq0000lvtdg9zkf6jo","tag_id":"cl3in6atx0003lvtd03wp8ia0","_id":"cl3in6au7000llvtdfc5jfutq"},{"post_id":"cl3in6atq0000lvtdg9zkf6jo","tag_id":"cl3in6au00008lvtd9dzs5qt0","_id":"cl3in6au8000olvtd8lc33sue"},{"post_id":"cl3in6atu0001lvtdfh2c3tpa","tag_id":"cl3in6au4000dlvtdhbwcegfy","_id":"cl3in6aue000zlvtdecsqae6r"},{"post_id":"cl3in6atu0001lvtdfh2c3tpa","tag_id":"cl3in6au7000klvtd46s0cg9v","_id":"cl3in6aue0012lvtd5go0bzcr"},{"post_id":"cl3in6atu0001lvtdfh2c3tpa","tag_id":"cl3in6aua000rlvtd3dfpgnwg","_id":"cl3in6aug0016lvtd1dqkdzza"},{"post_id":"cl3in6atx0004lvtdcle9f4b9","tag_id":"cl3in6aud000ylvtdh96qgesb","_id":"cl3in6aum001mlvtd07p7c4tw"},{"post_id":"cl3in6atx0004lvtdcle9f4b9","tag_id":"cl3in6auf0015lvtdecz45tg8","_id":"cl3in6aun001olvtd4fxihtm1"},{"post_id":"cl3in6atx0004lvtdcle9f4b9","tag_id":"cl3in6auh001blvtd1cwrgrbn","_id":"cl3in6aun001rlvtd8ol9312i"},{"post_id":"cl3in6atx0004lvtdcle9f4b9","tag_id":"cl3in6aul001glvtd6k793jzk","_id":"cl3in6aun001tlvtd94zigend"},{"post_id":"cl3in6aty0005lvtd2d4l01yv","tag_id":"cl3in6aum001llvtddaiiefzr","_id":"cl3in6aun001wlvtd96c44arp"},{"post_id":"cl3in6aty0005lvtd2d4l01yv","tag_id":"cl3in6aun001qlvtd1fdmdv0r","_id":"cl3in6aun001xlvtdbyyj3iv3"},{"post_id":"cl3in6atz0006lvtdhslsbhtr","tag_id":"cl3in6aun001vlvtd9i8t77o5","_id":"cl3in6auo0020lvtd1b7ncpyn"},{"post_id":"cl3in6atz0006lvtdhslsbhtr","tag_id":"cl3in6aun001ylvtd0vd49qa6","_id":"cl3in6auo0021lvtdfkb15366"},{"post_id":"cl3in6au3000alvtd17vg7h3r","tag_id":"cl3in6auo001zlvtd3ijvg4v0","_id":"cl3in6aup0025lvtd41duae42"},{"post_id":"cl3in6au3000alvtd17vg7h3r","tag_id":"cl3in6auo0022lvtd3dsshwbg","_id":"cl3in6aup0026lvtdb2269ipy"},{"post_id":"cl3in6au3000alvtd17vg7h3r","tag_id":"cl3in6auo0023lvtdaar6enme","_id":"cl3in6aup0028lvtdc7oqfnh8"},{"post_id":"cl3in6au5000flvtdg2zu9w43","tag_id":"cl3in6aup0024lvtd1nf4gjou","_id":"cl3in6aup002alvtdfy7sabae"},{"post_id":"cl3in6au5000flvtdg2zu9w43","tag_id":"cl3in6aup0027lvtd32tgccsw","_id":"cl3in6auq002blvtd5ppfchxb"},{"post_id":"cl3in6au6000ilvtddzs83rvb","tag_id":"cl3in6aup0029lvtddt933lll","_id":"cl3in6aur002flvtdgwnacwnv"},{"post_id":"cl3in6au6000ilvtddzs83rvb","tag_id":"cl3in6auq002clvtd2s0qbx85","_id":"cl3in6aur002glvtd9z7bbp1d"},{"post_id":"cl3in6au6000ilvtddzs83rvb","tag_id":"cl3in6auf0015lvtdecz45tg8","_id":"cl3in6aur002ilvtd52gk6jvq"},{"post_id":"cl3in6au7000mlvtd82b86neg","tag_id":"cl3in6auq002elvtd0qkbcpo5","_id":"cl3in6aus002llvtd65imfmjb"},{"post_id":"cl3in6au7000mlvtd82b86neg","tag_id":"cl3in6auq002clvtd2s0qbx85","_id":"cl3in6aus002mlvtdf7qv5opx"},{"post_id":"cl3in6au7000mlvtd82b86neg","tag_id":"cl3in6auf0015lvtdecz45tg8","_id":"cl3in6aus002olvtd2rgk6hwk"},{"post_id":"cl3in6au8000plvtd3kjt1zbq","tag_id":"cl3in6aur002klvtdhgbcgfgf","_id":"cl3in6aus002plvtd9clt15fu"},{"post_id":"cl3in6aua000slvtd2tmwdch4","tag_id":"cl3in6auh001blvtd1cwrgrbn","_id":"cl3in6aut002tlvtdgjdl6i1s"},{"post_id":"cl3in6aua000slvtd2tmwdch4","tag_id":"cl3in6aus002qlvtd6n59awno","_id":"cl3in6aut002ulvtdfk0p57mr"},{"post_id":"cl3in6aua000slvtd2tmwdch4","tag_id":"cl3in6auf0015lvtdecz45tg8","_id":"cl3in6aut002wlvtd6gko663k"},{"post_id":"cl3in6auc000ulvtde4mmh7h4","tag_id":"cl3in6aut002slvtdberd2jfa","_id":"cl3in6aut002xlvtdg5xi1c60"},{"post_id":"cl3in6auc000wlvtd2b37b5m1","tag_id":"cl3in6aut002vlvtd4al7gmmn","_id":"cl3in6auv0031lvtd98vcbixy"},{"post_id":"cl3in6auc000wlvtd2b37b5m1","tag_id":"cl3in6aut002ylvtd15zyf3we","_id":"cl3in6auv0032lvtd8x2yfyh2"},{"post_id":"cl3in6auc000wlvtd2b37b5m1","tag_id":"cl3in6auu002zlvtdbb4q96l1","_id":"cl3in6auw0034lvtdc9f11p3x"},{"post_id":"cl3in6aue0010lvtdeab97br8","tag_id":"cl3in6aut002vlvtd4al7gmmn","_id":"cl3in6auw0036lvtdd17l2y74"},{"post_id":"cl3in6aue0010lvtdeab97br8","tag_id":"cl3in6auu002zlvtdbb4q96l1","_id":"cl3in6aux0037lvtd2cidfyv2"},{"post_id":"cl3in6auf0013lvtd59b7amy5","tag_id":"cl3in6auw0035lvtd2ctyczr0","_id":"cl3in6aux003alvtdgzz0cebw"},{"post_id":"cl3in6auf0013lvtd59b7amy5","tag_id":"cl3in6aux0038lvtd9csr4smi","_id":"cl3in6aux003blvtd74jngya7"},{"post_id":"cl3in6aug0017lvtd1of2f3xe","tag_id":"cl3in6aux0039lvtd557vc1i2","_id":"cl3in6auy003dlvtd3a8r4o0k"},{"post_id":"cl3in6aug0019lvtd4ev37ibn","tag_id":"cl3in6aux003clvtd7ei58b5a","_id":"cl3in6auy003flvtd5a7bds80"},{"post_id":"cl3in6auj001clvtd0c1m7lib","tag_id":"cl3in6aus002qlvtd6n59awno","_id":"cl3in6auz003hlvtdb164hjrd"},{"post_id":"cl3in6auj001clvtd0c1m7lib","tag_id":"cl3in6auf0015lvtdecz45tg8","_id":"cl3in6auz003ilvtdavuka8ed"},{"post_id":"cl3in6auk001elvtdflv469n2","tag_id":"cl3in6auy003glvtddzqveuyf","_id":"cl3in6av0003llvtdgsos6dyc"},{"post_id":"cl3in6auk001elvtdflv469n2","tag_id":"cl3in6auz003jlvtd41i99rmb","_id":"cl3in6av0003mlvtdcmm7fktx"},{"post_id":"cl3in6aul001hlvtdby89cx0d","tag_id":"cl3in6auz003klvtdgyh0eg3j","_id":"cl3in6av0003olvtd82bc7x3h"},{"post_id":"cl3in6aul001hlvtdby89cx0d","tag_id":"cl3in6auz003jlvtd41i99rmb","_id":"cl3in6av0003plvtdfttr7v8q"},{"post_id":"cl3in6av4003qlvtddrz1dvxk","tag_id":"cl3in6av5003slvtd3rivajd4","_id":"cl3in6ava0046lvtdgbk167rc"},{"post_id":"cl3in6av4003qlvtddrz1dvxk","tag_id":"cl3in6av8003ylvtdha61f886","_id":"cl3in6avb0049lvtddxpr08g0"},{"post_id":"cl3in6av5003rlvtd07fv0wkb","tag_id":"cl3in6av90043lvtdbl833qpa","_id":"cl3in6ave004ilvtd2nnr1137"},{"post_id":"cl3in6av5003rlvtd07fv0wkb","tag_id":"cl3in6avb004alvtdg4ev0455","_id":"cl3in6avf004llvtd3m8x3x3q"},{"post_id":"cl3in6av5003tlvtd4ogy95e4","tag_id":"cl3in6aup0024lvtd1nf4gjou","_id":"cl3in6avh004plvtd3t685sdt"},{"post_id":"cl3in6av5003tlvtd4ogy95e4","tag_id":"cl3in6avc004flvtd847ohuob","_id":"cl3in6avh004rlvtdh6be55my"},{"post_id":"cl3in6av6003ulvtd02vw9tkt","tag_id":"cl3in6avg004olvtd5k2lhpml","_id":"cl3in6avj004vlvtd1r4t70c9"},{"post_id":"cl3in6av7003wlvtdadmvdvea","tag_id":"cl3in6avh004tlvtd1o6e9bez","_id":"cl3in6avj004ylvtd1ahq60lg"},{"post_id":"cl3in6av7003wlvtdadmvdvea","tag_id":"cl3in6avj004wlvtd4xiugk03","_id":"cl3in6avj004zlvtd6yfmbd4l"},{"post_id":"cl3in6av8003zlvtd9sh03poc","tag_id":"cl3in6avj004xlvtd3aa4gt08","_id":"cl3in6avk0051lvtd3le43hog"},{"post_id":"cl3in6av90041lvtddmc02p6a","tag_id":"cl3in6avj0050lvtd6ghd1yan","_id":"cl3in6avk0054lvtddl0o5me9"},{"post_id":"cl3in6av90041lvtddmc02p6a","tag_id":"cl3in6avk0052lvtd0r3v5si9","_id":"cl3in6avk0055lvtd3w228gci"},{"post_id":"cl3in6ava0044lvtd39hl3aiv","tag_id":"cl3in6avb004alvtdg4ev0455","_id":"cl3in6avl0058lvtd81id7rry"},{"post_id":"cl3in6ava0044lvtd39hl3aiv","tag_id":"cl3in6avk0056lvtd3s38eom5","_id":"cl3in6avl0059lvtdb9y511wi"},{"post_id":"cl3in6ava0047lvtdfh1i5y6d","tag_id":"cl3in6avl0057lvtd97ng55ib","_id":"cl3in6avl005blvtd1h80gbzo"},{"post_id":"cl3in6avb004blvtd4tvdbiah","tag_id":"cl3in6avl005alvtdd17xaqdj","_id":"cl3in6avm005flvtd6ooo91t6"},{"post_id":"cl3in6avb004blvtd4tvdbiah","tag_id":"cl3in6avl005clvtd0pr0274v","_id":"cl3in6avm005glvtd7ycdhtl3"},{"post_id":"cl3in6avb004blvtd4tvdbiah","tag_id":"cl3in6avl005dlvtd7s58aerr","_id":"cl3in6avm005ilvtd2hcg0ndr"},{"post_id":"cl3in6avc004dlvtdflgleur4","tag_id":"cl3in6avm005elvtd3glb1nbk","_id":"cl3in6avn005jlvtdg8gvhmtl"},{"post_id":"cl3in6avd004glvtdhn2h47ej","tag_id":"cl3in6avm005hlvtdb7z45jub","_id":"cl3in6avn005llvtdhuuq1xkt"},{"post_id":"cl3in6avf004jlvtdf59s6z2r","tag_id":"cl3in6aut002vlvtd4al7gmmn","_id":"cl3in6avo005nlvtd369lbdtc"},{"post_id":"cl3in6avf004jlvtdf59s6z2r","tag_id":"cl3in6avn005klvtdf66d9tfw","_id":"cl3in6avo005olvtd7ya231q9"},{"post_id":"cl3in6avf004jlvtdf59s6z2r","tag_id":"cl3in6auu002zlvtdbb4q96l1","_id":"cl3in6avo005plvtdem2m77fz"},{"post_id":"cl3in6avf004mlvtdcrzcd2qh","tag_id":"cl3in6aup0024lvtd1nf4gjou","_id":"cl3in6avo005qlvtd7u944rch"},{"post_id":"cl3in6avf004mlvtdcrzcd2qh","tag_id":"cl3in6avn005mlvtdh2cc915v","_id":"cl3in6avo005rlvtd96bjgjja"}],"Tag":[{"name":"hello","_id":"cl16op5qw00046itd10nvduyr"},{"name":"hi","_id":"cl16op5qz00066itd67gnfacx"},{"name":"Atom","_id":"cl3in6atx0003lvtd03wp8ia0"},{"name":"SSH代理","_id":"cl3in6au00008lvtd9dzs5qt0"},{"name":"docker","_id":"cl3in6au4000dlvtdhbwcegfy"},{"name":"pm2","_id":"cl3in6au7000klvtd46s0cg9v"},{"name":"开机自启","_id":"cl3in6aua000rlvtd3dfpgnwg"},{"name":"Firewalld","_id":"cl3in6aud000ylvtdh96qgesb"},{"name":"防火墙","_id":"cl3in6auf0015lvtdecz45tg8"},{"name":"ipset","_id":"cl3in6auh001blvtd1cwrgrbn"},{"name":"网络安全","_id":"cl3in6aul001glvtd6k793jzk"},{"name":"supervisor","_id":"cl3in6aum001llvtddaiiefzr"},{"name":"守护进程","_id":"cl3in6aun001qlvtd1fdmdv0r"},{"name":"echo","_id":"cl3in6aun001vlvtd9i8t77o5"},{"name":"tee","_id":"cl3in6aun001ylvtd0vd49qa6"},{"name":"前端","_id":"cl3in6auo001zlvtd3ijvg4v0"},{"name":"iframe","_id":"cl3in6auo0022lvtd3dsshwbg"},{"name":"弹窗","_id":"cl3in6auo0023lvtdaar6enme"},{"name":"mysql","_id":"cl3in6aup0024lvtd1nf4gjou"},{"name":"emoji","_id":"cl3in6aup0027lvtd32tgccsw"},{"name":"nginx","_id":"cl3in6aup0029lvtddt933lll"},{"name":"lua","_id":"cl3in6auq002clvtd2s0qbx85"},{"name":"waf","_id":"cl3in6auq002elvtd0qkbcpo5"},{"name":"google chrome","_id":"cl3in6aur002klvtdhgbcgfgf"},{"name":"iptables","_id":"cl3in6aus002qlvtd6n59awno"},{"name":"ssh","_id":"cl3in6aut002slvtdberd2jfa"},{"name":"inotify","_id":"cl3in6aut002vlvtd4al7gmmn"},{"name":"rsync","_id":"cl3in6aut002ylvtd15zyf3we"},{"name":"实时同步","_id":"cl3in6auu002zlvtdbb4q96l1"},{"name":"SSH安全","_id":"cl3in6auw0035lvtd2ctyczr0"},{"name":"二步验证","_id":"cl3in6aux0038lvtd9csr4smi"},{"name":"ffmpeg","_id":"cl3in6aux0039lvtd557vc1i2"},{"name":"OpenCC","_id":"cl3in6aux003clvtd7ei58b5a"},{"name":"kafka","_id":"cl3in6auy003glvtddzqveuyf"},{"name":"队列","_id":"cl3in6auz003jlvtd41i99rmb"},{"name":"rabbitmq","_id":"cl3in6auz003klvtdgyh0eg3j"},{"name":"nps","_id":"cl3in6av5003slvtd3rivajd4"},{"name":"内网穿透","_id":"cl3in6av8003ylvtdha61f886"},{"name":"软路由","_id":"cl3in6av90043lvtdbl833qpa"},{"name":"OpenWRT","_id":"cl3in6avb004alvtdg4ev0455"},{"name":"数据库备份","_id":"cl3in6avc004flvtd847ohuob"},{"name":"Docker","_id":"cl3in6avg004olvtd5k2lhpml"},{"name":"账号安全","_id":"cl3in6avh004tlvtd1o6e9bez"},{"name":"勒索","_id":"cl3in6avj004wlvtd4xiugk03"},{"name":"safari","_id":"cl3in6avj004xlvtd3aa4gt08"},{"name":"esxi","_id":"cl3in6avj0050lvtd6ghd1yan"},{"name":"分区","_id":"cl3in6avk0052lvtd0r3v5si9"},{"name":"自启动","_id":"cl3in6avk0056lvtd3s38eom5"},{"name":"denyhosts","_id":"cl3in6avl0057lvtd97ng55ib"},{"name":"ups","_id":"cl3in6avl005alvtdd17xaqdj"},{"name":"NAS","_id":"cl3in6avl005clvtd0pr0274v"},{"name":"断网自动关机","_id":"cl3in6avl005dlvtd7s58aerr"},{"name":"Leanote","_id":"cl3in6avm005elvtd3glb1nbk"},{"name":"swoole","_id":"cl3in6avm005hlvtdb7z45jub"},{"name":"群晖","_id":"cl3in6avn005klvtdf66d9tfw"},{"name":"数据恢复","_id":"cl3in6avn005mlvtdh2cc915v"}]}}